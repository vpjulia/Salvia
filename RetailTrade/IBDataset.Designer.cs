//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RetailTrade {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("IBDataset")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class IBDataset : System.Data.DataSet {
        
        private SPR_IZGDataTable tableSPR_IZG;
        
        private SPR_TOVDataTable tableSPR_TOV;
        
        private System.Data.DataRelation relationSPR_IZG_SPR_TOV;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IBDataset() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected IBDataset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SPR_IZG"] != null)) {
                    base.Tables.Add(new SPR_IZGDataTable(ds.Tables["SPR_IZG"]));
                }
                if ((ds.Tables["SPR_TOV"] != null)) {
                    base.Tables.Add(new SPR_TOVDataTable(ds.Tables["SPR_TOV"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_IZGDataTable SPR_IZG {
            get {
                return this.tableSPR_IZG;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_TOVDataTable SPR_TOV {
            get {
                return this.tableSPR_TOV;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            IBDataset cln = ((IBDataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SPR_IZG"] != null)) {
                    base.Tables.Add(new SPR_IZGDataTable(ds.Tables["SPR_IZG"]));
                }
                if ((ds.Tables["SPR_TOV"] != null)) {
                    base.Tables.Add(new SPR_TOVDataTable(ds.Tables["SPR_TOV"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSPR_IZG = ((SPR_IZGDataTable)(base.Tables["SPR_IZG"]));
            if ((initTable == true)) {
                if ((this.tableSPR_IZG != null)) {
                    this.tableSPR_IZG.InitVars();
                }
            }
            this.tableSPR_TOV = ((SPR_TOVDataTable)(base.Tables["SPR_TOV"]));
            if ((initTable == true)) {
                if ((this.tableSPR_TOV != null)) {
                    this.tableSPR_TOV.InitVars();
                }
            }
            this.relationSPR_IZG_SPR_TOV = this.Relations["SPR_IZG_SPR_TOV"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "IBDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/IBDataset.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSPR_IZG = new SPR_IZGDataTable();
            base.Tables.Add(this.tableSPR_IZG);
            this.tableSPR_TOV = new SPR_TOVDataTable();
            base.Tables.Add(this.tableSPR_TOV);
            this.relationSPR_IZG_SPR_TOV = new System.Data.DataRelation("SPR_IZG_SPR_TOV", new System.Data.DataColumn[] {
                        this.tableSPR_IZG.ID_IZGColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.ID_IZGColumn}, false);
            this.Relations.Add(this.relationSPR_IZG_SPR_TOV);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_IZG() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_TOV() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            IBDataset ds = new IBDataset();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void SPR_IZGRowChangeEventHandler(object sender, SPR_IZGRowChangeEvent e);
        
        public delegate void SPR_TOVRowChangeEventHandler(object sender, SPR_TOVRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_IZGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_IZG;
            
            private System.Data.DataColumn columnNAME_IZG;
            
            private System.Data.DataColumn columnPR_NAC;
            
            private System.Data.DataColumn columnCR_DATE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGDataTable() {
                this.TableName = "SPR_IZG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_IZGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_IZGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_IZGColumn {
                get {
                    return this.columnID_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAME_IZGColumn {
                get {
                    return this.columnNAME_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PR_NACColumn {
                get {
                    return this.columnPR_NAC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CR_DATEColumn {
                get {
                    return this.columnCR_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRow this[int index] {
                get {
                    return ((SPR_IZGRow)(this.Rows[index]));
                }
            }
            
            public event SPR_IZGRowChangeEventHandler SPR_IZGRowChanging;
            
            public event SPR_IZGRowChangeEventHandler SPR_IZGRowChanged;
            
            public event SPR_IZGRowChangeEventHandler SPR_IZGRowDeleting;
            
            public event SPR_IZGRowChangeEventHandler SPR_IZGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_IZGRow(SPR_IZGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRow AddSPR_IZGRow(int ID_IZG, string NAME_IZG, decimal PR_NAC, System.DateTime CR_DATE) {
                SPR_IZGRow rowSPR_IZGRow = ((SPR_IZGRow)(this.NewRow()));
                rowSPR_IZGRow.ItemArray = new object[] {
                        ID_IZG,
                        NAME_IZG,
                        PR_NAC,
                        CR_DATE};
                this.Rows.Add(rowSPR_IZGRow);
                return rowSPR_IZGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRow FindByID_IZG(int ID_IZG) {
                return ((SPR_IZGRow)(this.Rows.Find(new object[] {
                            ID_IZG})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_IZGDataTable cln = ((SPR_IZGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_IZGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_IZG = base.Columns["ID_IZG"];
                this.columnNAME_IZG = base.Columns["NAME_IZG"];
                this.columnPR_NAC = base.Columns["PR_NAC"];
                this.columnCR_DATE = base.Columns["CR_DATE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_IZG = new System.Data.DataColumn("ID_IZG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_IZG);
                this.columnNAME_IZG = new System.Data.DataColumn("NAME_IZG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME_IZG);
                this.columnPR_NAC = new System.Data.DataColumn("PR_NAC", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPR_NAC);
                this.columnCR_DATE = new System.Data.DataColumn("CR_DATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCR_DATE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_IZG}, true));
                this.columnID_IZG.AllowDBNull = false;
                this.columnID_IZG.Unique = true;
                this.columnNAME_IZG.MaxLength = 255;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRow NewSPR_IZGRow() {
                return ((SPR_IZGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_IZGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_IZGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_IZGRowChanged != null)) {
                    this.SPR_IZGRowChanged(this, new SPR_IZGRowChangeEvent(((SPR_IZGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_IZGRowChanging != null)) {
                    this.SPR_IZGRowChanging(this, new SPR_IZGRowChangeEvent(((SPR_IZGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_IZGRowDeleted != null)) {
                    this.SPR_IZGRowDeleted(this, new SPR_IZGRowChangeEvent(((SPR_IZGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_IZGRowDeleting != null)) {
                    this.SPR_IZGRowDeleting(this, new SPR_IZGRowChangeEvent(((SPR_IZGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_IZGRow(SPR_IZGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                IBDataset ds = new IBDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_IZGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_TOVDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnKOD_T;
            
            private System.Data.DataColumn columnNAME_T;
            
            private System.Data.DataColumn columnDOZA;
            
            private System.Data.DataColumn columnFORMA_VIP;
            
            private System.Data.DataColumn columnOBJEM;
            
            private System.Data.DataColumn columnED_IZM;
            
            private System.Data.DataColumn columnVES;
            
            private System.Data.DataColumn columnCENA_IZG;
            
            private System.Data.DataColumn columnPROC_REG;
            
            private System.Data.DataColumn columnID_IZG;
            
            private System.Data.DataColumn columnID_KL1;
            
            private System.Data.DataColumn columnID_KL2;
            
            private System.Data.DataColumn columnID_KL3;
            
            private System.Data.DataColumn columnPR_NDS;
            
            private System.Data.DataColumn columnKOL_UP;
            
            private System.Data.DataColumn columnDATA_REG;
            
            private System.Data.DataColumn columnN_REG;
            
            private System.Data.DataColumn columnAUTOR;
            
            private System.Data.DataColumn columnCR_DATE;
            
            private System.Data.DataColumn columnSNAME_T;
            
            private System.Data.DataColumn columnOLD_NAMET;
            
            private System.Data.DataColumn columnNAMET1;
            
            private System.Data.DataColumn columnIS_RECEPT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVDataTable() {
                this.TableName = "SPR_TOV";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_TOVDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_TOVDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KOD_TColumn {
                get {
                    return this.columnKOD_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAME_TColumn {
                get {
                    return this.columnNAME_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DOZAColumn {
                get {
                    return this.columnDOZA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FORMA_VIPColumn {
                get {
                    return this.columnFORMA_VIP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJEMColumn {
                get {
                    return this.columnOBJEM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ED_IZMColumn {
                get {
                    return this.columnED_IZM;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VESColumn {
                get {
                    return this.columnVES;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CENA_IZGColumn {
                get {
                    return this.columnCENA_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PROC_REGColumn {
                get {
                    return this.columnPROC_REG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_IZGColumn {
                get {
                    return this.columnID_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_KL1Column {
                get {
                    return this.columnID_KL1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_KL2Column {
                get {
                    return this.columnID_KL2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_KL3Column {
                get {
                    return this.columnID_KL3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PR_NDSColumn {
                get {
                    return this.columnPR_NDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KOL_UPColumn {
                get {
                    return this.columnKOL_UP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATA_REGColumn {
                get {
                    return this.columnDATA_REG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn N_REGColumn {
                get {
                    return this.columnN_REG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AUTORColumn {
                get {
                    return this.columnAUTOR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CR_DATEColumn {
                get {
                    return this.columnCR_DATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SNAME_TColumn {
                get {
                    return this.columnSNAME_T;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OLD_NAMETColumn {
                get {
                    return this.columnOLD_NAMET;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAMET1Column {
                get {
                    return this.columnNAMET1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IS_RECEPTColumn {
                get {
                    return this.columnIS_RECEPT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow this[int index] {
                get {
                    return ((SPR_TOVRow)(this.Rows[index]));
                }
            }
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowChanging;
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowChanged;
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowDeleting;
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_TOVRow(SPR_TOVRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow AddSPR_TOVRow(
                        int KOD_T, 
                        string NAME_T, 
                        string DOZA, 
                        string FORMA_VIP, 
                        string OBJEM, 
                        string ED_IZM, 
                        decimal VES, 
                        decimal CENA_IZG, 
                        short PROC_REG, 
                        SPR_IZGRow parentSPR_IZGRowBySPR_IZG_SPR_TOV, 
                        int ID_KL1, 
                        int ID_KL2, 
                        int ID_KL3, 
                        string PR_NDS, 
                        int KOL_UP, 
                        System.DateTime DATA_REG, 
                        string N_REG, 
                        string AUTOR, 
                        System.DateTime CR_DATE, 
                        string SNAME_T, 
                        string OLD_NAMET, 
                        string NAMET1, 
                        short IS_RECEPT) {
                SPR_TOVRow rowSPR_TOVRow = ((SPR_TOVRow)(this.NewRow()));
                rowSPR_TOVRow.ItemArray = new object[] {
                        KOD_T,
                        NAME_T,
                        DOZA,
                        FORMA_VIP,
                        OBJEM,
                        ED_IZM,
                        VES,
                        CENA_IZG,
                        PROC_REG,
                        parentSPR_IZGRowBySPR_IZG_SPR_TOV[0],
                        ID_KL1,
                        ID_KL2,
                        ID_KL3,
                        PR_NDS,
                        KOL_UP,
                        DATA_REG,
                        N_REG,
                        AUTOR,
                        CR_DATE,
                        SNAME_T,
                        OLD_NAMET,
                        NAMET1,
                        IS_RECEPT};
                this.Rows.Add(rowSPR_TOVRow);
                return rowSPR_TOVRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow FindByKOD_T(int KOD_T) {
                return ((SPR_TOVRow)(this.Rows.Find(new object[] {
                            KOD_T})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_TOVDataTable cln = ((SPR_TOVDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_TOVDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKOD_T = base.Columns["KOD_T"];
                this.columnNAME_T = base.Columns["NAME_T"];
                this.columnDOZA = base.Columns["DOZA"];
                this.columnFORMA_VIP = base.Columns["FORMA_VIP"];
                this.columnOBJEM = base.Columns["OBJEM"];
                this.columnED_IZM = base.Columns["ED_IZM"];
                this.columnVES = base.Columns["VES"];
                this.columnCENA_IZG = base.Columns["CENA_IZG"];
                this.columnPROC_REG = base.Columns["PROC_REG"];
                this.columnID_IZG = base.Columns["ID_IZG"];
                this.columnID_KL1 = base.Columns["ID_KL1"];
                this.columnID_KL2 = base.Columns["ID_KL2"];
                this.columnID_KL3 = base.Columns["ID_KL3"];
                this.columnPR_NDS = base.Columns["PR_NDS"];
                this.columnKOL_UP = base.Columns["KOL_UP"];
                this.columnDATA_REG = base.Columns["DATA_REG"];
                this.columnN_REG = base.Columns["N_REG"];
                this.columnAUTOR = base.Columns["AUTOR"];
                this.columnCR_DATE = base.Columns["CR_DATE"];
                this.columnSNAME_T = base.Columns["SNAME_T"];
                this.columnOLD_NAMET = base.Columns["OLD_NAMET"];
                this.columnNAMET1 = base.Columns["NAMET1"];
                this.columnIS_RECEPT = base.Columns["IS_RECEPT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKOD_T = new System.Data.DataColumn("KOD_T", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKOD_T);
                this.columnNAME_T = new System.Data.DataColumn("NAME_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME_T);
                this.columnDOZA = new System.Data.DataColumn("DOZA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOZA);
                this.columnFORMA_VIP = new System.Data.DataColumn("FORMA_VIP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORMA_VIP);
                this.columnOBJEM = new System.Data.DataColumn("OBJEM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJEM);
                this.columnED_IZM = new System.Data.DataColumn("ED_IZM", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnED_IZM);
                this.columnVES = new System.Data.DataColumn("VES", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVES);
                this.columnCENA_IZG = new System.Data.DataColumn("CENA_IZG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCENA_IZG);
                this.columnPROC_REG = new System.Data.DataColumn("PROC_REG", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROC_REG);
                this.columnID_IZG = new System.Data.DataColumn("ID_IZG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_IZG);
                this.columnID_KL1 = new System.Data.DataColumn("ID_KL1", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_KL1);
                this.columnID_KL2 = new System.Data.DataColumn("ID_KL2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_KL2);
                this.columnID_KL3 = new System.Data.DataColumn("ID_KL3", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_KL3);
                this.columnPR_NDS = new System.Data.DataColumn("PR_NDS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPR_NDS);
                this.columnKOL_UP = new System.Data.DataColumn("KOL_UP", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKOL_UP);
                this.columnDATA_REG = new System.Data.DataColumn("DATA_REG", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATA_REG);
                this.columnN_REG = new System.Data.DataColumn("N_REG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnN_REG);
                this.columnAUTOR = new System.Data.DataColumn("AUTOR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTOR);
                this.columnCR_DATE = new System.Data.DataColumn("CR_DATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCR_DATE);
                this.columnSNAME_T = new System.Data.DataColumn("SNAME_T", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSNAME_T);
                this.columnOLD_NAMET = new System.Data.DataColumn("OLD_NAMET", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOLD_NAMET);
                this.columnNAMET1 = new System.Data.DataColumn("NAMET1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAMET1);
                this.columnIS_RECEPT = new System.Data.DataColumn("IS_RECEPT", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_RECEPT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnKOD_T}, true));
                this.columnKOD_T.AllowDBNull = false;
                this.columnKOD_T.Unique = true;
                this.columnNAME_T.MaxLength = 255;
                this.columnDOZA.MaxLength = 10;
                this.columnFORMA_VIP.MaxLength = 10;
                this.columnOBJEM.MaxLength = 10;
                this.columnED_IZM.MaxLength = 5;
                this.columnPR_NDS.MaxLength = 1;
                this.columnN_REG.MaxLength = 20;
                this.columnAUTOR.MaxLength = 10;
                this.columnSNAME_T.MaxLength = 12;
                this.columnOLD_NAMET.MaxLength = 35;
                this.columnNAMET1.MaxLength = 255;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow NewSPR_TOVRow() {
                return ((SPR_TOVRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_TOVRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_TOVRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_TOVRowChanged != null)) {
                    this.SPR_TOVRowChanged(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_TOVRowChanging != null)) {
                    this.SPR_TOVRowChanging(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_TOVRowDeleted != null)) {
                    this.SPR_TOVRowDeleted(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_TOVRowDeleting != null)) {
                    this.SPR_TOVRowDeleting(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_TOVRow(SPR_TOVRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                IBDataset ds = new IBDataset();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_TOVDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_IZGRow : System.Data.DataRow {
            
            private SPR_IZGDataTable tableSPR_IZG;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_IZGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_IZG = ((SPR_IZGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_IZG {
                get {
                    return ((int)(this[this.tableSPR_IZG.ID_IZGColumn]));
                }
                set {
                    this[this.tableSPR_IZG.ID_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME_IZG {
                get {
                    try {
                        return ((string)(this[this.tableSPR_IZG.NAME_IZGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME_IZG\' in table \'SPR_IZG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_IZG.NAME_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PR_NAC {
                get {
                    try {
                        return ((decimal)(this[this.tableSPR_IZG.PR_NACColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PR_NAC\' in table \'SPR_IZG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_IZG.PR_NACColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CR_DATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSPR_IZG.CR_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CR_DATE\' in table \'SPR_IZG\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_IZG.CR_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAME_IZGNull() {
                return this.IsNull(this.tableSPR_IZG.NAME_IZGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAME_IZGNull() {
                this[this.tableSPR_IZG.NAME_IZGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPR_NACNull() {
                return this.IsNull(this.tableSPR_IZG.PR_NACColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPR_NACNull() {
                this[this.tableSPR_IZG.PR_NACColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCR_DATENull() {
                return this.IsNull(this.tableSPR_IZG.CR_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCR_DATENull() {
                this[this.tableSPR_IZG.CR_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["SPR_IZG_SPR_TOV"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_TOVRow : System.Data.DataRow {
            
            private SPR_TOVDataTable tableSPR_TOV;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_TOVRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_TOV = ((SPR_TOVDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KOD_T {
                get {
                    return ((int)(this[this.tableSPR_TOV.KOD_TColumn]));
                }
                set {
                    this[this.tableSPR_TOV.KOD_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME_T {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.NAME_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME_T\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.NAME_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOZA {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.DOZAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DOZA\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.DOZAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FORMA_VIP {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.FORMA_VIPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FORMA_VIP\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.FORMA_VIPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBJEM {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.OBJEMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBJEM\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.OBJEMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ED_IZM {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.ED_IZMColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ED_IZM\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.ED_IZMColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VES {
                get {
                    try {
                        return ((decimal)(this[this.tableSPR_TOV.VESColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VES\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.VESColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CENA_IZG {
                get {
                    try {
                        return ((decimal)(this[this.tableSPR_TOV.CENA_IZGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CENA_IZG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.CENA_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PROC_REG {
                get {
                    try {
                        return ((short)(this[this.tableSPR_TOV.PROC_REGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PROC_REG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.PROC_REGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_IZG {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.ID_IZGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_IZG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.ID_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_KL1 {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.ID_KL1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_KL1\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.ID_KL1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_KL2 {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.ID_KL2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_KL2\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.ID_KL2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_KL3 {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.ID_KL3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_KL3\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.ID_KL3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PR_NDS {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.PR_NDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PR_NDS\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.PR_NDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KOL_UP {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.KOL_UPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'KOL_UP\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.KOL_UPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATA_REG {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSPR_TOV.DATA_REGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATA_REG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.DATA_REGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string N_REG {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.N_REGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'N_REG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.N_REGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AUTOR {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.AUTORColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AUTOR\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.AUTORColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CR_DATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSPR_TOV.CR_DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CR_DATE\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.CR_DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SNAME_T {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.SNAME_TColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SNAME_T\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.SNAME_TColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OLD_NAMET {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.OLD_NAMETColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OLD_NAMET\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.OLD_NAMETColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAMET1 {
                get {
                    try {
                        return ((string)(this[this.tableSPR_TOV.NAMET1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAMET1\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.NAMET1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short IS_RECEPT {
                get {
                    try {
                        return ((short)(this[this.tableSPR_TOV.IS_RECEPTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IS_RECEPT\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IS_RECEPTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRow SPR_IZGRow {
                get {
                    return ((SPR_IZGRow)(this.GetParentRow(this.Table.ParentRelations["SPR_IZG_SPR_TOV"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SPR_IZG_SPR_TOV"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAME_TNull() {
                return this.IsNull(this.tableSPR_TOV.NAME_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAME_TNull() {
                this[this.tableSPR_TOV.NAME_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOZANull() {
                return this.IsNull(this.tableSPR_TOV.DOZAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOZANull() {
                this[this.tableSPR_TOV.DOZAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORMA_VIPNull() {
                return this.IsNull(this.tableSPR_TOV.FORMA_VIPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORMA_VIPNull() {
                this[this.tableSPR_TOV.FORMA_VIPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBJEMNull() {
                return this.IsNull(this.tableSPR_TOV.OBJEMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBJEMNull() {
                this[this.tableSPR_TOV.OBJEMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsED_IZMNull() {
                return this.IsNull(this.tableSPR_TOV.ED_IZMColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetED_IZMNull() {
                this[this.tableSPR_TOV.ED_IZMColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVESNull() {
                return this.IsNull(this.tableSPR_TOV.VESColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVESNull() {
                this[this.tableSPR_TOV.VESColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCENA_IZGNull() {
                return this.IsNull(this.tableSPR_TOV.CENA_IZGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCENA_IZGNull() {
                this[this.tableSPR_TOV.CENA_IZGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROC_REGNull() {
                return this.IsNull(this.tableSPR_TOV.PROC_REGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROC_REGNull() {
                this[this.tableSPR_TOV.PROC_REGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_IZGNull() {
                return this.IsNull(this.tableSPR_TOV.ID_IZGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_IZGNull() {
                this[this.tableSPR_TOV.ID_IZGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_KL1Null() {
                return this.IsNull(this.tableSPR_TOV.ID_KL1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_KL1Null() {
                this[this.tableSPR_TOV.ID_KL1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_KL2Null() {
                return this.IsNull(this.tableSPR_TOV.ID_KL2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_KL2Null() {
                this[this.tableSPR_TOV.ID_KL2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_KL3Null() {
                return this.IsNull(this.tableSPR_TOV.ID_KL3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_KL3Null() {
                this[this.tableSPR_TOV.ID_KL3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPR_NDSNull() {
                return this.IsNull(this.tableSPR_TOV.PR_NDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPR_NDSNull() {
                this[this.tableSPR_TOV.PR_NDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKOL_UPNull() {
                return this.IsNull(this.tableSPR_TOV.KOL_UPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKOL_UPNull() {
                this[this.tableSPR_TOV.KOL_UPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATA_REGNull() {
                return this.IsNull(this.tableSPR_TOV.DATA_REGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATA_REGNull() {
                this[this.tableSPR_TOV.DATA_REGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsN_REGNull() {
                return this.IsNull(this.tableSPR_TOV.N_REGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetN_REGNull() {
                this[this.tableSPR_TOV.N_REGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTORNull() {
                return this.IsNull(this.tableSPR_TOV.AUTORColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTORNull() {
                this[this.tableSPR_TOV.AUTORColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCR_DATENull() {
                return this.IsNull(this.tableSPR_TOV.CR_DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCR_DATENull() {
                this[this.tableSPR_TOV.CR_DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSNAME_TNull() {
                return this.IsNull(this.tableSPR_TOV.SNAME_TColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSNAME_TNull() {
                this[this.tableSPR_TOV.SNAME_TColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOLD_NAMETNull() {
                return this.IsNull(this.tableSPR_TOV.OLD_NAMETColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOLD_NAMETNull() {
                this[this.tableSPR_TOV.OLD_NAMETColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMET1Null() {
                return this.IsNull(this.tableSPR_TOV.NAMET1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMET1Null() {
                this[this.tableSPR_TOV.NAMET1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIS_RECEPTNull() {
                return this.IsNull(this.tableSPR_TOV.IS_RECEPTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIS_RECEPTNull() {
                this[this.tableSPR_TOV.IS_RECEPTColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_IZGRowChangeEvent : System.EventArgs {
            
            private SPR_IZGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRowChangeEvent(SPR_IZGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IZGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_TOVRowChangeEvent : System.EventArgs {
            
            private SPR_TOVRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRowChangeEvent(SPR_TOVRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RetailTrade.IBDatasetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_IZGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_IZGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_IZG";
            tableMapping.ColumnMappings.Add("ID_IZG", "ID_IZG");
            tableMapping.ColumnMappings.Add("NAME_IZG", "NAME_IZG");
            tableMapping.ColumnMappings.Add("PR_NAC", "PR_NAC");
            tableMapping.ColumnMappings.Add("CR_DATE", "CR_DATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `SPR_IZG` WHERE ((`ID_IZG` = ?) AND ((? = 1 AND `NAME_IZG` IS NULL) O" +
                "R (`NAME_IZG` = ?)) AND ((? = 1 AND `PR_NAC` IS NULL) OR (`PR_NAC` = ?)) AND ((?" +
                " = 1 AND `CR_DATE` IS NULL) OR (`CR_DATE` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_NAME_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_IZG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_NAME_IZG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_PR_NAC", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NAC", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_PR_NAC", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(6)), ((byte)(2)), "PR_NAC", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_CR_DATE", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `SPR_IZG` (`ID_IZG`, `NAME_IZG`, `PR_NAC`, `CR_DATE`) VALUES (?, ?, ?" +
                ", ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("NAME_IZG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("PR_NAC", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(6)), ((byte)(2)), "PR_NAC", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `SPR_IZG` SET `ID_IZG` = ?, `NAME_IZG` = ?, `PR_NAC` = ?, `CR_DATE` = ? WHERE ((`ID_IZG` = ?) AND ((? = 1 AND `NAME_IZG` IS NULL) OR (`NAME_IZG` = ?)) AND ((? = 1 AND `PR_NAC` IS NULL) OR (`PR_NAC` = ?)) AND ((? = 1 AND `CR_DATE` IS NULL) OR (`CR_DATE` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("NAME_IZG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("PR_NAC", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(6)), ((byte)(2)), "PR_NAC", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_NAME_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_IZG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_NAME_IZG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_PR_NAC", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NAC", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_PR_NAC", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(6)), ((byte)(2)), "PR_NAC", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_CR_DATE", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.db2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_IZG, NAME_IZG, PR_NAC, CR_DATE FROM SPR_IZG";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(IBDataset.SPR_IZGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual IBDataset.SPR_IZGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            IBDataset.SPR_IZGDataTable dataTable = new IBDataset.SPR_IZGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(IBDataset.SPR_IZGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(IBDataset dataSet) {
            return this.Adapter.Update(dataSet, "SPR_IZG");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_IZG, string Original_NAME_IZG, System.Nullable<decimal> Original_PR_NAC, System.Nullable<System.DateTime> Original_CR_DATE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_IZG));
            if ((Original_NAME_IZG == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NAME_IZG));
            }
            if ((Original_PR_NAC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_PR_NAC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_CR_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_CR_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_IZG, string NAME_IZG, System.Nullable<decimal> PR_NAC, System.Nullable<System.DateTime> CR_DATE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_IZG));
            if ((NAME_IZG == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME_IZG));
            }
            if ((PR_NAC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(PR_NAC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((CR_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(CR_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_IZG, string NAME_IZG, System.Nullable<decimal> PR_NAC, System.Nullable<System.DateTime> CR_DATE, int Original_ID_IZG, string Original_NAME_IZG, System.Nullable<decimal> Original_PR_NAC, System.Nullable<System.DateTime> Original_CR_DATE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_IZG));
            if ((NAME_IZG == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME_IZG));
            }
            if ((PR_NAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(PR_NAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((CR_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(CR_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_IZG));
            if ((Original_NAME_IZG == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_NAME_IZG));
            }
            if ((Original_PR_NAC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_PR_NAC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_CR_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_CR_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_TOVTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_TOVTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_TOV";
            tableMapping.ColumnMappings.Add("KOD_T", "KOD_T");
            tableMapping.ColumnMappings.Add("NAME_T", "NAME_T");
            tableMapping.ColumnMappings.Add("DOZA", "DOZA");
            tableMapping.ColumnMappings.Add("FORMA_VIP", "FORMA_VIP");
            tableMapping.ColumnMappings.Add("OBJEM", "OBJEM");
            tableMapping.ColumnMappings.Add("ED_IZM", "ED_IZM");
            tableMapping.ColumnMappings.Add("VES", "VES");
            tableMapping.ColumnMappings.Add("CENA_IZG", "CENA_IZG");
            tableMapping.ColumnMappings.Add("PROC_REG", "PROC_REG");
            tableMapping.ColumnMappings.Add("ID_IZG", "ID_IZG");
            tableMapping.ColumnMappings.Add("ID_KL1", "ID_KL1");
            tableMapping.ColumnMappings.Add("ID_KL2", "ID_KL2");
            tableMapping.ColumnMappings.Add("ID_KL3", "ID_KL3");
            tableMapping.ColumnMappings.Add("PR_NDS", "PR_NDS");
            tableMapping.ColumnMappings.Add("KOL_UP", "KOL_UP");
            tableMapping.ColumnMappings.Add("DATA_REG", "DATA_REG");
            tableMapping.ColumnMappings.Add("N_REG", "N_REG");
            tableMapping.ColumnMappings.Add("AUTOR", "AUTOR");
            tableMapping.ColumnMappings.Add("CR_DATE", "CR_DATE");
            tableMapping.ColumnMappings.Add("SNAME_T", "SNAME_T");
            tableMapping.ColumnMappings.Add("OLD_NAMET", "OLD_NAMET");
            tableMapping.ColumnMappings.Add("NAMET1", "NAMET1");
            tableMapping.ColumnMappings.Add("IS_RECEPT", "IS_RECEPT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `SPR_TOV` WHERE ((`KOD_T` = ?) AND ((? = 1 AND `NAME_T` IS NULL) OR (`NAME_T` = ?)) AND ((? = 1 AND `DOZA` IS NULL) OR (`DOZA` = ?)) AND ((? = 1 AND `FORMA_VIP` IS NULL) OR (`FORMA_VIP` = ?)) AND ((? = 1 AND `OBJEM` IS NULL) OR (`OBJEM` = ?)) AND ((? = 1 AND `ED_IZM` IS NULL) OR (`ED_IZM` = ?)) AND ((? = 1 AND `VES` IS NULL) OR (`VES` = ?)) AND ((? = 1 AND `CENA_IZG` IS NULL) OR (`CENA_IZG` = ?)) AND ((? = 1 AND `PROC_REG` IS NULL) OR (`PROC_REG` = ?)) AND ((? = 1 AND `ID_IZG` IS NULL) OR (`ID_IZG` = ?)) AND ((? = 1 AND `ID_KL1` IS NULL) OR (`ID_KL1` = ?)) AND ((? = 1 AND `ID_KL2` IS NULL) OR (`ID_KL2` = ?)) AND ((? = 1 AND `ID_KL3` IS NULL) OR (`ID_KL3` = ?)) AND ((? = 1 AND `PR_NDS` IS NULL) OR (`PR_NDS` = ?)) AND ((? = 1 AND `KOL_UP` IS NULL) OR (`KOL_UP` = ?)) AND ((? = 1 AND `DATA_REG` IS NULL) OR (`DATA_REG` = ?)) AND ((? = 1 AND `N_REG` IS NULL) OR (`N_REG` = ?)) AND ((? = 1 AND `AUTOR` IS NULL) OR (`AUTOR` = ?)) AND ((? = 1 AND `CR_DATE` IS NULL) OR (`CR_DATE` = ?)) AND ((? = 1 AND `SNAME_T` IS NULL) OR (`SNAME_T` = ?)) AND ((? = 1 AND `OLD_NAMET` IS NULL) OR (`OLD_NAMET` = ?)) AND ((? = 1 AND `NAMET1` IS NULL) OR (`NAMET1` = ?)) AND ((? = 1 AND `IS_RECEPT` IS NULL) OR (`IS_RECEPT` = ?)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_KOD_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOD_T", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_NAME_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_T", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_NAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_T", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_DOZA", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DOZA", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_DOZA", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DOZA", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_FORMA_VIP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FORMA_VIP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_FORMA_VIP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FORMA_VIP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OBJEM", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OBJEM", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OBJEM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OBJEM", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ED_IZM", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ED_IZM", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ED_IZM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ED_IZM", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_VES", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "VES", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_VES", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(3)), "VES", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_CENA_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CENA_IZG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_CENA_IZG", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(5)), "CENA_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_PROC_REG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROC_REG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_PROC_REG", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROC_REG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_KL1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL1", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_KL1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL1", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_KL2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL2", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_KL2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL2", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_KL3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL3", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_KL3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL3", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_PR_NDS", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NDS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_PR_NDS", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NDS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_KOL_UP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOL_UP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_KOL_UP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOL_UP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_DATA_REG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DATA_REG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_DATA_REG", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DATA_REG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_N_REG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "N_REG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_N_REG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "N_REG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_AUTOR", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AUTOR", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_AUTOR", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AUTOR", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_CR_DATE", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_SNAME_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SNAME_T", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_SNAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SNAME_T", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OLD_NAMET", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_NAMET", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OLD_NAMET", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_NAMET", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_NAMET1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAMET1", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_NAMET1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAMET1", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_IS_RECEPT", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IS_RECEPT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_IS_RECEPT", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IS_RECEPT", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `SPR_TOV` (`KOD_T`, `NAME_T`, `DOZA`, `FORMA_VIP`, `OBJEM`, `ED_IZM`, `VES`, `CENA_IZG`, `PROC_REG`, `ID_IZG`, `ID_KL1`, `ID_KL2`, `ID_KL3`, `PR_NDS`, `KOL_UP`, `DATA_REG`, `N_REG`, `AUTOR`, `CR_DATE`, `SNAME_T`, `OLD_NAMET`, `NAMET1`, `IS_RECEPT`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("KOD_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOD_T", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("NAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_T", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DOZA", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DOZA", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("FORMA_VIP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FORMA_VIP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OBJEM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OBJEM", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ED_IZM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ED_IZM", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("VES", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(3)), "VES", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("CENA_IZG", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(5)), "CENA_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("PROC_REG", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROC_REG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_KL1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_KL2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_KL3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("PR_NDS", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NDS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("KOL_UP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOL_UP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DATA_REG", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DATA_REG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("N_REG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "N_REG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("AUTOR", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AUTOR", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("SNAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SNAME_T", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OLD_NAMET", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_NAMET", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("NAMET1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAMET1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IS_RECEPT", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IS_RECEPT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `SPR_TOV` SET `KOD_T` = ?, `NAME_T` = ?, `DOZA` = ?, `FORMA_VIP` = ?, `OBJ" +
                "EM` = ?, `ED_IZM` = ?, `VES` = ?, `CENA_IZG` = ?, `PROC_REG` = ?, `ID_IZG` = ?, " +
                "`ID_KL1` = ?, `ID_KL2` = ?, `ID_KL3` = ?, `PR_NDS` = ?, `KOL_UP` = ?, `DATA_REG`" +
                " = ?, `N_REG` = ?, `AUTOR` = ?, `CR_DATE` = ?, `SNAME_T` = ?, `OLD_NAMET` = ?, `" +
                "NAMET1` = ?, `IS_RECEPT` = ? WHERE ((`KOD_T` = ?) AND ((? = 1 AND `NAME_T` IS NU" +
                "LL) OR (`NAME_T` = ?)) AND ((? = 1 AND `DOZA` IS NULL) OR (`DOZA` = ?)) AND ((? " +
                "= 1 AND `FORMA_VIP` IS NULL) OR (`FORMA_VIP` = ?)) AND ((? = 1 AND `OBJEM` IS NU" +
                "LL) OR (`OBJEM` = ?)) AND ((? = 1 AND `ED_IZM` IS NULL) OR (`ED_IZM` = ?)) AND (" +
                "(? = 1 AND `VES` IS NULL) OR (`VES` = ?)) AND ((? = 1 AND `CENA_IZG` IS NULL) OR" +
                " (`CENA_IZG` = ?)) AND ((? = 1 AND `PROC_REG` IS NULL) OR (`PROC_REG` = ?)) AND " +
                "((? = 1 AND `ID_IZG` IS NULL) OR (`ID_IZG` = ?)) AND ((? = 1 AND `ID_KL1` IS NUL" +
                "L) OR (`ID_KL1` = ?)) AND ((? = 1 AND `ID_KL2` IS NULL) OR (`ID_KL2` = ?)) AND (" +
                "(? = 1 AND `ID_KL3` IS NULL) OR (`ID_KL3` = ?)) AND ((? = 1 AND `PR_NDS` IS NULL" +
                ") OR (`PR_NDS` = ?)) AND ((? = 1 AND `KOL_UP` IS NULL) OR (`KOL_UP` = ?)) AND ((" +
                "? = 1 AND `DATA_REG` IS NULL) OR (`DATA_REG` = ?)) AND ((? = 1 AND `N_REG` IS NU" +
                "LL) OR (`N_REG` = ?)) AND ((? = 1 AND `AUTOR` IS NULL) OR (`AUTOR` = ?)) AND ((?" +
                " = 1 AND `CR_DATE` IS NULL) OR (`CR_DATE` = ?)) AND ((? = 1 AND `SNAME_T` IS NUL" +
                "L) OR (`SNAME_T` = ?)) AND ((? = 1 AND `OLD_NAMET` IS NULL) OR (`OLD_NAMET` = ?)" +
                ") AND ((? = 1 AND `NAMET1` IS NULL) OR (`NAMET1` = ?)) AND ((? = 1 AND `IS_RECEP" +
                "T` IS NULL) OR (`IS_RECEPT` = ?)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("KOD_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOD_T", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("NAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_T", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DOZA", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DOZA", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("FORMA_VIP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FORMA_VIP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OBJEM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OBJEM", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ED_IZM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ED_IZM", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("VES", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(3)), "VES", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("CENA_IZG", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(5)), "CENA_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("PROC_REG", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROC_REG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_KL1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_KL2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL2", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ID_KL3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL3", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("PR_NDS", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NDS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("KOL_UP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOL_UP", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("DATA_REG", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DATA_REG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("N_REG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "N_REG", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("AUTOR", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AUTOR", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("SNAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SNAME_T", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("OLD_NAMET", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_NAMET", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("NAMET1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAMET1", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IS_RECEPT", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IS_RECEPT", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_KOD_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOD_T", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_NAME_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_T", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_NAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAME_T", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_DOZA", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DOZA", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_DOZA", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DOZA", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_FORMA_VIP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FORMA_VIP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_FORMA_VIP", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FORMA_VIP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OBJEM", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OBJEM", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OBJEM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OBJEM", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ED_IZM", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ED_IZM", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ED_IZM", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ED_IZM", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_VES", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "VES", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_VES", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(3)), "VES", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_CENA_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CENA_IZG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_CENA_IZG", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(15)), ((byte)(5)), "CENA_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_PROC_REG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROC_REG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_PROC_REG", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROC_REG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_IZG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_IZG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_KL1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL1", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_KL1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL1", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_KL2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL2", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_KL2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL2", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_ID_KL3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL3", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_ID_KL3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID_KL3", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_PR_NDS", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NDS", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_PR_NDS", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PR_NDS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_KOL_UP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOL_UP", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_KOL_UP", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "KOL_UP", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_DATA_REG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DATA_REG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_DATA_REG", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DATA_REG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_N_REG", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "N_REG", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_N_REG", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "N_REG", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_AUTOR", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AUTOR", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_AUTOR", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AUTOR", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_CR_DATE", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_CR_DATE", System.Data.OleDb.OleDbType.Date, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CR_DATE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_SNAME_T", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SNAME_T", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_SNAME_T", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SNAME_T", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_OLD_NAMET", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_NAMET", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_OLD_NAMET", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OLD_NAMET", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_NAMET1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAMET1", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_NAMET1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "NAMET1", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("IsNull_IS_RECEPT", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IS_RECEPT", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("Original_IS_RECEPT", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IS_RECEPT", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.db2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT KOD_T, NAME_T, DOZA, FORMA_VIP, OBJEM, ED_IZM, VES, CENA_IZG, PROC_REG, ID" +
                "_IZG, ID_KL1, ID_KL2, ID_KL3, PR_NDS, KOL_UP, DATA_REG, N_REG, AUTOR, CR_DATE, S" +
                "NAME_T, OLD_NAMET, NAMET1, IS_RECEPT FROM SPR_TOV";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(IBDataset.SPR_TOVDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual IBDataset.SPR_TOVDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            IBDataset.SPR_TOVDataTable dataTable = new IBDataset.SPR_TOVDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(IBDataset.SPR_TOVDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(IBDataset dataSet) {
            return this.Adapter.Update(dataSet, "SPR_TOV");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_KOD_T, 
                    string Original_NAME_T, 
                    string Original_DOZA, 
                    string Original_FORMA_VIP, 
                    string Original_OBJEM, 
                    string Original_ED_IZM, 
                    System.Nullable<decimal> Original_VES, 
                    System.Nullable<decimal> Original_CENA_IZG, 
                    System.Nullable<short> Original_PROC_REG, 
                    System.Nullable<int> Original_ID_IZG, 
                    System.Nullable<int> Original_ID_KL1, 
                    System.Nullable<int> Original_ID_KL2, 
                    System.Nullable<int> Original_ID_KL3, 
                    string Original_PR_NDS, 
                    System.Nullable<int> Original_KOL_UP, 
                    System.Nullable<System.DateTime> Original_DATA_REG, 
                    string Original_N_REG, 
                    string Original_AUTOR, 
                    System.Nullable<System.DateTime> Original_CR_DATE, 
                    string Original_SNAME_T, 
                    string Original_OLD_NAMET, 
                    string Original_NAMET1, 
                    short Original_IS_RECEPT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_KOD_T));
            if ((Original_NAME_T == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_NAME_T));
            }
            if ((Original_DOZA == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_DOZA));
            }
            if ((Original_FORMA_VIP == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FORMA_VIP));
            }
            if ((Original_OBJEM == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_OBJEM));
            }
            if ((Original_ED_IZM == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ED_IZM));
            }
            if ((Original_VES.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_VES.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_CENA_IZG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_CENA_IZG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_PROC_REG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((short)(Original_PROC_REG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_ID_IZG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_ID_IZG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_ID_KL1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_ID_KL1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_ID_KL2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_ID_KL2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            if ((Original_ID_KL3.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_ID_KL3.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            if ((Original_PR_NDS == null)) {
                throw new System.ArgumentNullException("Original_PR_NDS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_PR_NDS));
            }
            if ((Original_KOL_UP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_KOL_UP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            if ((Original_DATA_REG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((System.DateTime)(Original_DATA_REG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = System.DBNull.Value;
            }
            if ((Original_N_REG == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_N_REG));
            }
            if ((Original_AUTOR == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_AUTOR));
            }
            if ((Original_CR_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((System.DateTime)(Original_CR_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = System.DBNull.Value;
            }
            if ((Original_SNAME_T == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_SNAME_T));
            }
            if ((Original_OLD_NAMET == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_OLD_NAMET));
            }
            if ((Original_NAMET1 == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_NAMET1));
            }
            this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[44].Value = ((short)(Original_IS_RECEPT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int KOD_T, 
                    string NAME_T, 
                    string DOZA, 
                    string FORMA_VIP, 
                    string OBJEM, 
                    string ED_IZM, 
                    System.Nullable<decimal> VES, 
                    System.Nullable<decimal> CENA_IZG, 
                    System.Nullable<short> PROC_REG, 
                    System.Nullable<int> ID_IZG, 
                    System.Nullable<int> ID_KL1, 
                    System.Nullable<int> ID_KL2, 
                    System.Nullable<int> ID_KL3, 
                    string PR_NDS, 
                    System.Nullable<int> KOL_UP, 
                    System.Nullable<System.DateTime> DATA_REG, 
                    string N_REG, 
                    string AUTOR, 
                    System.Nullable<System.DateTime> CR_DATE, 
                    string SNAME_T, 
                    string OLD_NAMET, 
                    string NAMET1, 
                    short IS_RECEPT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(KOD_T));
            if ((NAME_T == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME_T));
            }
            if ((DOZA == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DOZA));
            }
            if ((FORMA_VIP == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FORMA_VIP));
            }
            if ((OBJEM == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(OBJEM));
            }
            if ((ED_IZM == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ED_IZM));
            }
            if ((VES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(VES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((CENA_IZG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CENA_IZG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PROC_REG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((short)(PROC_REG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((ID_IZG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(ID_IZG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((ID_KL1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(ID_KL1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((ID_KL2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(ID_KL2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((ID_KL3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(ID_KL3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((PR_NDS == null)) {
                throw new System.ArgumentNullException("PR_NDS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(PR_NDS));
            }
            if ((KOL_UP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(KOL_UP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((DATA_REG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(DATA_REG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((N_REG == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(N_REG));
            }
            if ((AUTOR == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(AUTOR));
            }
            if ((CR_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(CR_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((SNAME_T == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(SNAME_T));
            }
            if ((OLD_NAMET == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(OLD_NAMET));
            }
            if ((NAMET1 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(NAMET1));
            }
            this.Adapter.InsertCommand.Parameters[22].Value = ((short)(IS_RECEPT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int KOD_T, 
                    string NAME_T, 
                    string DOZA, 
                    string FORMA_VIP, 
                    string OBJEM, 
                    string ED_IZM, 
                    System.Nullable<decimal> VES, 
                    System.Nullable<decimal> CENA_IZG, 
                    System.Nullable<short> PROC_REG, 
                    System.Nullable<int> ID_IZG, 
                    System.Nullable<int> ID_KL1, 
                    System.Nullable<int> ID_KL2, 
                    System.Nullable<int> ID_KL3, 
                    string PR_NDS, 
                    System.Nullable<int> KOL_UP, 
                    System.Nullable<System.DateTime> DATA_REG, 
                    string N_REG, 
                    string AUTOR, 
                    System.Nullable<System.DateTime> CR_DATE, 
                    string SNAME_T, 
                    string OLD_NAMET, 
                    string NAMET1, 
                    short IS_RECEPT, 
                    int Original_KOD_T, 
                    string Original_NAME_T, 
                    string Original_DOZA, 
                    string Original_FORMA_VIP, 
                    string Original_OBJEM, 
                    string Original_ED_IZM, 
                    System.Nullable<decimal> Original_VES, 
                    System.Nullable<decimal> Original_CENA_IZG, 
                    System.Nullable<short> Original_PROC_REG, 
                    System.Nullable<int> Original_ID_IZG, 
                    System.Nullable<int> Original_ID_KL1, 
                    System.Nullable<int> Original_ID_KL2, 
                    System.Nullable<int> Original_ID_KL3, 
                    string Original_PR_NDS, 
                    System.Nullable<int> Original_KOL_UP, 
                    System.Nullable<System.DateTime> Original_DATA_REG, 
                    string Original_N_REG, 
                    string Original_AUTOR, 
                    System.Nullable<System.DateTime> Original_CR_DATE, 
                    string Original_SNAME_T, 
                    string Original_OLD_NAMET, 
                    string Original_NAMET1, 
                    short Original_IS_RECEPT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(KOD_T));
            if ((NAME_T == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME_T));
            }
            if ((DOZA == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DOZA));
            }
            if ((FORMA_VIP == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FORMA_VIP));
            }
            if ((OBJEM == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(OBJEM));
            }
            if ((ED_IZM == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ED_IZM));
            }
            if ((VES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(VES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((CENA_IZG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CENA_IZG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PROC_REG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((short)(PROC_REG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((ID_IZG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID_IZG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((ID_KL1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ID_KL1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((ID_KL2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ID_KL2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((ID_KL3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ID_KL3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((PR_NDS == null)) {
                throw new System.ArgumentNullException("PR_NDS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(PR_NDS));
            }
            if ((KOL_UP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(KOL_UP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((DATA_REG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(DATA_REG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((N_REG == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(N_REG));
            }
            if ((AUTOR == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(AUTOR));
            }
            if ((CR_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(CR_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((SNAME_T == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(SNAME_T));
            }
            if ((OLD_NAMET == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(OLD_NAMET));
            }
            if ((NAMET1 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(NAMET1));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((short)(IS_RECEPT));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_KOD_T));
            if ((Original_NAME_T == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_NAME_T));
            }
            if ((Original_DOZA == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_DOZA));
            }
            if ((Original_FORMA_VIP == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_FORMA_VIP));
            }
            if ((Original_OBJEM == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_OBJEM));
            }
            if ((Original_ED_IZM == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_ED_IZM));
            }
            if ((Original_VES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_VES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = System.DBNull.Value;
            }
            if ((Original_CENA_IZG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(Original_CENA_IZG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = System.DBNull.Value;
            }
            if ((Original_PROC_REG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((short)(Original_PROC_REG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = System.DBNull.Value;
            }
            if ((Original_ID_IZG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((int)(Original_ID_IZG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = System.DBNull.Value;
            }
            if ((Original_ID_KL1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((int)(Original_ID_KL1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = System.DBNull.Value;
            }
            if ((Original_ID_KL2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((int)(Original_ID_KL2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = System.DBNull.Value;
            }
            if ((Original_ID_KL3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(Original_ID_KL3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = System.DBNull.Value;
            }
            if ((Original_PR_NDS == null)) {
                throw new System.ArgumentNullException("Original_PR_NDS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_PR_NDS));
            }
            if ((Original_KOL_UP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_KOL_UP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = System.DBNull.Value;
            }
            if ((Original_DATA_REG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((System.DateTime)(Original_DATA_REG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = System.DBNull.Value;
            }
            if ((Original_N_REG == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_N_REG));
            }
            if ((Original_AUTOR == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_AUTOR));
            }
            if ((Original_CR_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((System.DateTime)(Original_CR_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = System.DBNull.Value;
            }
            if ((Original_SNAME_T == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_SNAME_T));
            }
            if ((Original_OLD_NAMET == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_OLD_NAMET));
            }
            if ((Original_NAMET1 == null)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_NAMET1));
            }
            this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[67].Value = ((short)(Original_IS_RECEPT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591