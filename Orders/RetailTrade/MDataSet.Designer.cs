//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
namespace RetailTradeOrders {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MDataSet : System.Data.DataSet {
        
        private CashDataTable tableCash;
        
        private DocumentTypeDataTable tableDocumentType;
        
        private InvoiceMasterDataTable tableInvoiceMaster;
        
        private InvoiceDetailDataTable tableInvoiceDetail;
        
        private PeriodsDataTable tablePeriods;
        
        private ReceiptDetailDataTable tableReceiptDetail;
        
        private ReceiptMasterDataTable tableReceiptMaster;
        
        private ReceiptRemainsDataTable tableReceiptRemains;
        
        private ProductDataTable tableProduct;
        
        private RemainsDataTable tableRemains;
        
        private StockDataTable tableStock;
        
        private LocalSettingDataTable tableLocalSetting;
        
        private OrdersDataTable tableOrders;
        
        private inventoryMasterDataTable tableinventoryMaster;
        
        private inventoryDetailsDataTable tableinventoryDetails;
        
        private System.Data.DataRelation relationFK_InvoiceDetail_InvoiceMaster;
        
        private System.Data.DataRelation relationRemains_InvoiceDetail;
        
        private System.Data.DataRelation relationFK_inventoryMaster_inventoryDetails;
        
        private System.Data.DataRelation relationFK_ReceiptDetail_ReceiptMaster;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_DocumentType;
        
        private System.Data.DataRelation relationFK_InvoiceDetail_ReceiptRemains;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Stock;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Stock1;
        
        private System.Data.DataRelation relationReceiptDetail_Remains;
        
        private System.Data.DataRelation relationProduct_ReceiptDetail;
        
        private System.Data.DataRelation relationInvoiceDetail_Product;
        
        private System.Data.DataRelation relationProduct_Orders;
        
        private System.Data.DataRelation relationProduct_Remains;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Cash"] != null)) {
                    base.Tables.Add(new CashDataTable(ds.Tables["Cash"]));
                }
                if ((ds.Tables["DocumentType"] != null)) {
                    base.Tables.Add(new DocumentTypeDataTable(ds.Tables["DocumentType"]));
                }
                if ((ds.Tables["InvoiceMaster"] != null)) {
                    base.Tables.Add(new InvoiceMasterDataTable(ds.Tables["InvoiceMaster"]));
                }
                if ((ds.Tables["InvoiceDetail"] != null)) {
                    base.Tables.Add(new InvoiceDetailDataTable(ds.Tables["InvoiceDetail"]));
                }
                if ((ds.Tables["Periods"] != null)) {
                    base.Tables.Add(new PeriodsDataTable(ds.Tables["Periods"]));
                }
                if ((ds.Tables["ReceiptDetail"] != null)) {
                    base.Tables.Add(new ReceiptDetailDataTable(ds.Tables["ReceiptDetail"]));
                }
                if ((ds.Tables["ReceiptMaster"] != null)) {
                    base.Tables.Add(new ReceiptMasterDataTable(ds.Tables["ReceiptMaster"]));
                }
                if ((ds.Tables["ReceiptRemains"] != null)) {
                    base.Tables.Add(new ReceiptRemainsDataTable(ds.Tables["ReceiptRemains"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["Remains"] != null)) {
                    base.Tables.Add(new RemainsDataTable(ds.Tables["Remains"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                if ((ds.Tables["LocalSetting"] != null)) {
                    base.Tables.Add(new LocalSettingDataTable(ds.Tables["LocalSetting"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["inventoryMaster"] != null)) {
                    base.Tables.Add(new inventoryMasterDataTable(ds.Tables["inventoryMaster"]));
                }
                if ((ds.Tables["inventoryDetails"] != null)) {
                    base.Tables.Add(new inventoryDetailsDataTable(ds.Tables["inventoryDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CashDataTable Cash {
            get {
                return this.tableCash;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DocumentTypeDataTable DocumentType {
            get {
                return this.tableDocumentType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceMasterDataTable InvoiceMaster {
            get {
                return this.tableInvoiceMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDetailDataTable InvoiceDetail {
            get {
                return this.tableInvoiceDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PeriodsDataTable Periods {
            get {
                return this.tablePeriods;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptDetailDataTable ReceiptDetail {
            get {
                return this.tableReceiptDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptMasterDataTable ReceiptMaster {
            get {
                return this.tableReceiptMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptRemainsDataTable ReceiptRemains {
            get {
                return this.tableReceiptRemains;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductDataTable Product {
            get {
                return this.tableProduct;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RemainsDataTable Remains {
            get {
                return this.tableRemains;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDataTable Stock {
            get {
                return this.tableStock;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocalSettingDataTable LocalSetting {
            get {
                return this.tableLocalSetting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public inventoryMasterDataTable inventoryMaster {
            get {
                return this.tableinventoryMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public inventoryDetailsDataTable inventoryDetails {
            get {
                return this.tableinventoryDetails;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MDataSet cln = ((MDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Cash"] != null)) {
                    base.Tables.Add(new CashDataTable(ds.Tables["Cash"]));
                }
                if ((ds.Tables["DocumentType"] != null)) {
                    base.Tables.Add(new DocumentTypeDataTable(ds.Tables["DocumentType"]));
                }
                if ((ds.Tables["InvoiceMaster"] != null)) {
                    base.Tables.Add(new InvoiceMasterDataTable(ds.Tables["InvoiceMaster"]));
                }
                if ((ds.Tables["InvoiceDetail"] != null)) {
                    base.Tables.Add(new InvoiceDetailDataTable(ds.Tables["InvoiceDetail"]));
                }
                if ((ds.Tables["Periods"] != null)) {
                    base.Tables.Add(new PeriodsDataTable(ds.Tables["Periods"]));
                }
                if ((ds.Tables["ReceiptDetail"] != null)) {
                    base.Tables.Add(new ReceiptDetailDataTable(ds.Tables["ReceiptDetail"]));
                }
                if ((ds.Tables["ReceiptMaster"] != null)) {
                    base.Tables.Add(new ReceiptMasterDataTable(ds.Tables["ReceiptMaster"]));
                }
                if ((ds.Tables["ReceiptRemains"] != null)) {
                    base.Tables.Add(new ReceiptRemainsDataTable(ds.Tables["ReceiptRemains"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["Remains"] != null)) {
                    base.Tables.Add(new RemainsDataTable(ds.Tables["Remains"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                if ((ds.Tables["LocalSetting"] != null)) {
                    base.Tables.Add(new LocalSettingDataTable(ds.Tables["LocalSetting"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["inventoryMaster"] != null)) {
                    base.Tables.Add(new inventoryMasterDataTable(ds.Tables["inventoryMaster"]));
                }
                if ((ds.Tables["inventoryDetails"] != null)) {
                    base.Tables.Add(new inventoryDetailsDataTable(ds.Tables["inventoryDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCash = ((CashDataTable)(base.Tables["Cash"]));
            if ((initTable == true)) {
                if ((this.tableCash != null)) {
                    this.tableCash.InitVars();
                }
            }
            this.tableDocumentType = ((DocumentTypeDataTable)(base.Tables["DocumentType"]));
            if ((initTable == true)) {
                if ((this.tableDocumentType != null)) {
                    this.tableDocumentType.InitVars();
                }
            }
            this.tableInvoiceMaster = ((InvoiceMasterDataTable)(base.Tables["InvoiceMaster"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceMaster != null)) {
                    this.tableInvoiceMaster.InitVars();
                }
            }
            this.tableInvoiceDetail = ((InvoiceDetailDataTable)(base.Tables["InvoiceDetail"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceDetail != null)) {
                    this.tableInvoiceDetail.InitVars();
                }
            }
            this.tablePeriods = ((PeriodsDataTable)(base.Tables["Periods"]));
            if ((initTable == true)) {
                if ((this.tablePeriods != null)) {
                    this.tablePeriods.InitVars();
                }
            }
            this.tableReceiptDetail = ((ReceiptDetailDataTable)(base.Tables["ReceiptDetail"]));
            if ((initTable == true)) {
                if ((this.tableReceiptDetail != null)) {
                    this.tableReceiptDetail.InitVars();
                }
            }
            this.tableReceiptMaster = ((ReceiptMasterDataTable)(base.Tables["ReceiptMaster"]));
            if ((initTable == true)) {
                if ((this.tableReceiptMaster != null)) {
                    this.tableReceiptMaster.InitVars();
                }
            }
            this.tableReceiptRemains = ((ReceiptRemainsDataTable)(base.Tables["ReceiptRemains"]));
            if ((initTable == true)) {
                if ((this.tableReceiptRemains != null)) {
                    this.tableReceiptRemains.InitVars();
                }
            }
            this.tableProduct = ((ProductDataTable)(base.Tables["Product"]));
            if ((initTable == true)) {
                if ((this.tableProduct != null)) {
                    this.tableProduct.InitVars();
                }
            }
            this.tableRemains = ((RemainsDataTable)(base.Tables["Remains"]));
            if ((initTable == true)) {
                if ((this.tableRemains != null)) {
                    this.tableRemains.InitVars();
                }
            }
            this.tableStock = ((StockDataTable)(base.Tables["Stock"]));
            if ((initTable == true)) {
                if ((this.tableStock != null)) {
                    this.tableStock.InitVars();
                }
            }
            this.tableLocalSetting = ((LocalSettingDataTable)(base.Tables["LocalSetting"]));
            if ((initTable == true)) {
                if ((this.tableLocalSetting != null)) {
                    this.tableLocalSetting.InitVars();
                }
            }
            this.tableOrders = ((OrdersDataTable)(base.Tables["Orders"]));
            if ((initTable == true)) {
                if ((this.tableOrders != null)) {
                    this.tableOrders.InitVars();
                }
            }
            this.tableinventoryMaster = ((inventoryMasterDataTable)(base.Tables["inventoryMaster"]));
            if ((initTable == true)) {
                if ((this.tableinventoryMaster != null)) {
                    this.tableinventoryMaster.InitVars();
                }
            }
            this.tableinventoryDetails = ((inventoryDetailsDataTable)(base.Tables["inventoryDetails"]));
            if ((initTable == true)) {
                if ((this.tableinventoryDetails != null)) {
                    this.tableinventoryDetails.InitVars();
                }
            }
            this.relationFK_InvoiceDetail_InvoiceMaster = this.Relations["FK_InvoiceDetail_InvoiceMaster"];
            this.relationRemains_InvoiceDetail = this.Relations["Remains_InvoiceDetail"];
            this.relationFK_inventoryMaster_inventoryDetails = this.Relations["FK_inventoryMaster_inventoryDetails"];
            this.relationFK_ReceiptDetail_ReceiptMaster = this.Relations["FK_ReceiptDetail_ReceiptMaster"];
            this.relationFK_ReceiptMaster_DocumentType = this.Relations["FK_ReceiptMaster_DocumentType"];
            this.relationFK_InvoiceDetail_ReceiptRemains = this.Relations["FK_InvoiceDetail_ReceiptRemains"];
            this.relationFK_ReceiptMaster_Stock = this.Relations["FK_ReceiptMaster_Stock"];
            this.relationFK_ReceiptMaster_Stock1 = this.Relations["FK_ReceiptMaster_Stock1"];
            this.relationReceiptDetail_Remains = this.Relations["ReceiptDetail_Remains"];
            this.relationProduct_ReceiptDetail = this.Relations["Product_ReceiptDetail"];
            this.relationInvoiceDetail_Product = this.Relations["InvoiceDetail_Product"];
            this.relationProduct_Orders = this.Relations["Product_Orders"];
            this.relationProduct_Remains = this.Relations["Product_Remains"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCash = new CashDataTable();
            base.Tables.Add(this.tableCash);
            this.tableDocumentType = new DocumentTypeDataTable();
            base.Tables.Add(this.tableDocumentType);
            this.tableInvoiceMaster = new InvoiceMasterDataTable();
            base.Tables.Add(this.tableInvoiceMaster);
            this.tableInvoiceDetail = new InvoiceDetailDataTable(false);
            base.Tables.Add(this.tableInvoiceDetail);
            this.tablePeriods = new PeriodsDataTable();
            base.Tables.Add(this.tablePeriods);
            this.tableReceiptDetail = new ReceiptDetailDataTable(false);
            base.Tables.Add(this.tableReceiptDetail);
            this.tableReceiptMaster = new ReceiptMasterDataTable();
            base.Tables.Add(this.tableReceiptMaster);
            this.tableReceiptRemains = new ReceiptRemainsDataTable();
            base.Tables.Add(this.tableReceiptRemains);
            this.tableProduct = new ProductDataTable();
            base.Tables.Add(this.tableProduct);
            this.tableRemains = new RemainsDataTable(false);
            base.Tables.Add(this.tableRemains);
            this.tableStock = new StockDataTable();
            base.Tables.Add(this.tableStock);
            this.tableLocalSetting = new LocalSettingDataTable();
            base.Tables.Add(this.tableLocalSetting);
            this.tableOrders = new OrdersDataTable();
            base.Tables.Add(this.tableOrders);
            this.tableinventoryMaster = new inventoryMasterDataTable();
            base.Tables.Add(this.tableinventoryMaster);
            this.tableinventoryDetails = new inventoryDetailsDataTable(false);
            base.Tables.Add(this.tableinventoryDetails);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_InvoiceDetail_InvoiceMaster", new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.InvoiceMasterRefColumn});
            this.tableInvoiceDetail.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Remains_InvoiceDetail", new System.Data.DataColumn[] {
                        this.tableRemains.ReceiptDetailRefColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.LocalReceiptDetailRefColumn});
            this.tableInvoiceDetail.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_inventoryMaster_inventoryDetails", new System.Data.DataColumn[] {
                        this.tableinventoryMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableinventoryDetails.inventoryMasterRefColumn});
            this.tableinventoryDetails.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_InvoiceDetail_InvoiceMaster = new System.Data.DataRelation("FK_InvoiceDetail_InvoiceMaster", new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.InvoiceMasterRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceDetail_InvoiceMaster);
            this.relationRemains_InvoiceDetail = new System.Data.DataRelation("Remains_InvoiceDetail", new System.Data.DataColumn[] {
                        this.tableRemains.ReceiptDetailRefColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.LocalReceiptDetailRefColumn}, false);
            this.Relations.Add(this.relationRemains_InvoiceDetail);
            this.relationFK_inventoryMaster_inventoryDetails = new System.Data.DataRelation("FK_inventoryMaster_inventoryDetails", new System.Data.DataColumn[] {
                        this.tableinventoryMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableinventoryDetails.inventoryMasterRefColumn}, false);
            this.Relations.Add(this.relationFK_inventoryMaster_inventoryDetails);
            this.relationFK_ReceiptDetail_ReceiptMaster = new System.Data.DataRelation("FK_ReceiptDetail_ReceiptMaster", new System.Data.DataColumn[] {
                        this.tableReceiptMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ReceiptMasterRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptDetail_ReceiptMaster);
            this.relationFK_ReceiptMaster_DocumentType = new System.Data.DataRelation("FK_ReceiptMaster_DocumentType", new System.Data.DataColumn[] {
                        this.tableDocumentType.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.DocumentTypeRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_DocumentType);
            this.relationFK_InvoiceDetail_ReceiptRemains = new System.Data.DataRelation("FK_InvoiceDetail_ReceiptRemains", new System.Data.DataColumn[] {
                        this.tableReceiptRemains.ReceiptDetailRefColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.LocalReceiptDetailRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceDetail_ReceiptRemains);
            this.relationFK_ReceiptMaster_Stock = new System.Data.DataRelation("FK_ReceiptMaster_Stock", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.MainStockRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Stock);
            this.relationFK_ReceiptMaster_Stock1 = new System.Data.DataRelation("FK_ReceiptMaster_Stock1", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.SenderStockRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Stock1);
            this.relationReceiptDetail_Remains = new System.Data.DataRelation("ReceiptDetail_Remains", new System.Data.DataColumn[] {
                        this.tableRemains.ReceiptDetailRefColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.IDColumn}, false);
            this.Relations.Add(this.relationReceiptDetail_Remains);
            this.relationProduct_ReceiptDetail = new System.Data.DataRelation("Product_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_ReceiptDetail);
            this.relationInvoiceDetail_Product = new System.Data.DataRelation("InvoiceDetail_Product", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.ProductRefColumn}, false);
            this.Relations.Add(this.relationInvoiceDetail_Product);
            this.relationProduct_Orders = new System.Data.DataRelation("Product_Orders", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_Orders);
            this.relationProduct_Remains = new System.Data.DataRelation("Product_Remains", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableRemains.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_Remains);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCash() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocumentType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePeriods() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptRemains() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRemains() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStock() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLocalSetting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinventoryMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinventoryDetails() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MDataSet ds = new MDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.InvoiceDetail.DocumentTypeRefColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).DocumentTypeRef";
            this.InvoiceDetail.ProductRefColumn.Expression = "Parent(Remains_InvoiceDetail).ProductRef";
            this.InvoiceDetail.SeriesColumn.Expression = "Parent(Remains_InvoiceDetail).Series";
            this.InvoiceDetail.UseByDateColumn.Expression = "Parent(Remains_InvoiceDetail).UseByDate";
            this.InvoiceDetail.ManufacturerNameColumn.Expression = "Parent(Remains_InvoiceDetail).ManufacturerName";
            this.InvoiceDetail.ProductNameColumn.Expression = "Parent(InvoiceDetail_Product).Name";
            this.InvoiceDetail.NumCheckColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).NumCheck";
            this.InvoiceDetail.DateColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).Date";
            this.InvoiceDetail.CalcSumColumn.Expression = "Quantity*PriceRetailNDS";
            this.ReceiptDetail.DocumentTypeRefColumn.Expression = "Parent(FK_ReceiptDetail_ReceiptMaster).DocumentTypeRef";
            this.ReceiptDetail.ProductNameColumn.Expression = "Parent(Product_ReceiptDetail).Name";
            this.Remains.ProductNameColumn.Expression = "Parent(Product_Remains).Name";
            this.Remains.SumRemainsColumn.Expression = "QuantityRemains*PricePurchase";
            this.inventoryDetails.SumFactColumn.Expression = "Price*QuantityFact";
            this.inventoryDetails.SumRemColumn.Expression = "Quantity*Price";
            this.inventoryDetails.DiffColumn.Expression = "Quantity-QuantityFact";
        }
        
        public delegate void CashRowChangeEventHandler(object sender, CashRowChangeEvent e);
        
        public delegate void DocumentTypeRowChangeEventHandler(object sender, DocumentTypeRowChangeEvent e);
        
        public delegate void InvoiceMasterRowChangeEventHandler(object sender, InvoiceMasterRowChangeEvent e);
        
        public delegate void InvoiceDetailRowChangeEventHandler(object sender, InvoiceDetailRowChangeEvent e);
        
        public delegate void PeriodsRowChangeEventHandler(object sender, PeriodsRowChangeEvent e);
        
        public delegate void ReceiptDetailRowChangeEventHandler(object sender, ReceiptDetailRowChangeEvent e);
        
        public delegate void ReceiptMasterRowChangeEventHandler(object sender, ReceiptMasterRowChangeEvent e);
        
        public delegate void ReceiptRemainsRowChangeEventHandler(object sender, ReceiptRemainsRowChangeEvent e);
        
        public delegate void ProductRowChangeEventHandler(object sender, ProductRowChangeEvent e);
        
        public delegate void RemainsRowChangeEventHandler(object sender, RemainsRowChangeEvent e);
        
        public delegate void StockRowChangeEventHandler(object sender, StockRowChangeEvent e);
        
        public delegate void LocalSettingRowChangeEventHandler(object sender, LocalSettingRowChangeEvent e);
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        public delegate void inventoryMasterRowChangeEventHandler(object sender, inventoryMasterRowChangeEvent e);
        
        public delegate void inventoryDetailsRowChangeEventHandler(object sender, inventoryDetailsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CashDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumZ;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnBalanceBegin;
            
            private System.Data.DataColumn columnOfIncome;
            
            private System.Data.DataColumn columnOfExpend;
            
            private System.Data.DataColumn columnIncome;
            
            private System.Data.DataColumn columnExpend;
            
            private System.Data.DataColumn columnBalanceEnd;
            
            private System.Data.DataColumn columnIsClosed;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashDataTable() {
                this.TableName = "Cash";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CashDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CashDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumZColumn {
                get {
                    return this.columnNumZ;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BalanceBeginColumn {
                get {
                    return this.columnBalanceBegin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OfIncomeColumn {
                get {
                    return this.columnOfIncome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OfExpendColumn {
                get {
                    return this.columnOfExpend;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncomeColumn {
                get {
                    return this.columnIncome;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExpendColumn {
                get {
                    return this.columnExpend;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BalanceEndColumn {
                get {
                    return this.columnBalanceEnd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsClosedColumn {
                get {
                    return this.columnIsClosed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashRow this[int index] {
                get {
                    return ((CashRow)(this.Rows[index]));
                }
            }
            
            public event CashRowChangeEventHandler CashRowChanging;
            
            public event CashRowChangeEventHandler CashRowChanged;
            
            public event CashRowChangeEventHandler CashRowDeleting;
            
            public event CashRowChangeEventHandler CashRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCashRow(CashRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashRow AddCashRow(int NumZ, System.DateTime Date, decimal BalanceBegin, decimal OfIncome, decimal OfExpend, decimal Income, decimal Expend, decimal BalanceEnd, bool IsClosed, byte[] RowVersion) {
                CashRow rowCashRow = ((CashRow)(this.NewRow()));
                rowCashRow.ItemArray = new object[] {
                        null,
                        NumZ,
                        Date,
                        BalanceBegin,
                        OfIncome,
                        OfExpend,
                        Income,
                        Expend,
                        BalanceEnd,
                        IsClosed,
                        RowVersion};
                this.Rows.Add(rowCashRow);
                return rowCashRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CashDataTable cln = ((CashDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CashDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumZ = base.Columns["NumZ"];
                this.columnDate = base.Columns["Date"];
                this.columnBalanceBegin = base.Columns["BalanceBegin"];
                this.columnOfIncome = base.Columns["OfIncome"];
                this.columnOfExpend = base.Columns["OfExpend"];
                this.columnIncome = base.Columns["Income"];
                this.columnExpend = base.Columns["Expend"];
                this.columnBalanceEnd = base.Columns["BalanceEnd"];
                this.columnIsClosed = base.Columns["IsClosed"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumZ = new System.Data.DataColumn("NumZ", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumZ);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnBalanceBegin = new System.Data.DataColumn("BalanceBegin", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceBegin);
                this.columnOfIncome = new System.Data.DataColumn("OfIncome", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfIncome);
                this.columnOfExpend = new System.Data.DataColumn("OfExpend", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOfExpend);
                this.columnIncome = new System.Data.DataColumn("Income", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncome);
                this.columnExpend = new System.Data.DataColumn("Expend", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpend);
                this.columnBalanceEnd = new System.Data.DataColumn("BalanceEnd", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalanceEnd);
                this.columnIsClosed = new System.Data.DataColumn("IsClosed", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsClosed);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnNumZ.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnBalanceBegin.AllowDBNull = false;
                this.columnOfIncome.AllowDBNull = false;
                this.columnOfExpend.AllowDBNull = false;
                this.columnIncome.AllowDBNull = false;
                this.columnExpend.AllowDBNull = false;
                this.columnBalanceEnd.AllowDBNull = false;
                this.columnIsClosed.AllowDBNull = false;
                this.columnIsClosed.DefaultValue = ((bool)(false));
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashRow NewCashRow() {
                return ((CashRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CashRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CashRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CashRowChanged != null)) {
                    this.CashRowChanged(this, new CashRowChangeEvent(((CashRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CashRowChanging != null)) {
                    this.CashRowChanging(this, new CashRowChangeEvent(((CashRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CashRowDeleted != null)) {
                    this.CashRowDeleted(this, new CashRowChangeEvent(((CashRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CashRowDeleting != null)) {
                    this.CashRowDeleting(this, new CashRowChangeEvent(((CashRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCashRow(CashRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CashDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocumentTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsInternal;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeDataTable() {
                this.TableName = "DocumentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DocumentTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsInternalColumn {
                get {
                    return this.columnIsInternal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow this[int index] {
                get {
                    return ((DocumentTypeRow)(this.Rows[index]));
                }
            }
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowChanging;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowChanged;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowDeleting;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocumentTypeRow(DocumentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow AddDocumentTypeRow(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                DocumentTypeRow rowDocumentTypeRow = ((DocumentTypeRow)(this.NewRow()));
                rowDocumentTypeRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsInternal,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowDocumentTypeRow);
                return rowDocumentTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow FindByID(int ID) {
                return ((DocumentTypeRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DocumentTypeDataTable cln = ((DocumentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DocumentTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnIsInternal = base.Columns["IsInternal"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsInternal = new System.Data.DataColumn("IsInternal", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsInternal);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsInternal.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow NewDocumentTypeRow() {
                return ((DocumentTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DocumentTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DocumentTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocumentTypeRowChanged != null)) {
                    this.DocumentTypeRowChanged(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocumentTypeRowChanging != null)) {
                    this.DocumentTypeRowChanging(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocumentTypeRowDeleted != null)) {
                    this.DocumentTypeRowDeleted(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocumentTypeRowDeleting != null)) {
                    this.DocumentTypeRowDeleting(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocumentTypeRow(DocumentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocumentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnOrganisationRef;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnRemoteReceiptMasterRef;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnSum;
            
            private System.Data.DataColumn columnNds;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnPeriodsRef;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnRecalcSum;
            
            private System.Data.DataColumn columnExtra;
            
            private System.Data.DataColumn columnDiscount;
            
            private System.Data.DataColumn columnNumCheck;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterDataTable() {
                this.TableName = "InvoiceMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganisationRefColumn {
                get {
                    return this.columnOrganisationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteReceiptMasterRefColumn {
                get {
                    return this.columnRemoteReceiptMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumColumn {
                get {
                    return this.columnSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NdsColumn {
                get {
                    return this.columnNds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PeriodsRefColumn {
                get {
                    return this.columnPeriodsRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecalcSumColumn {
                get {
                    return this.columnRecalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumCheckColumn {
                get {
                    return this.columnNumCheck;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow this[int index] {
                get {
                    return ((InvoiceMasterRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanging;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanged;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleting;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceMasterRow(InvoiceMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow AddInvoiceMasterRow(
                        System.DateTime Date, 
                        int OrganisationRef, 
                        int DocumentTypeRef, 
                        int RemoteReceiptMasterRef, 
                        bool IsReadOnly, 
                        decimal Sum, 
                        decimal Nds, 
                        string Note, 
                        decimal PeriodsRef, 
                        System.DateTime DateLastModif, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        bool RecalcSum, 
                        decimal Extra, 
                        decimal Discount, 
                        int NumCheck) {
                InvoiceMasterRow rowInvoiceMasterRow = ((InvoiceMasterRow)(this.NewRow()));
                rowInvoiceMasterRow.ItemArray = new object[] {
                        null,
                        null,
                        Date,
                        OrganisationRef,
                        DocumentTypeRef,
                        RemoteReceiptMasterRef,
                        IsReadOnly,
                        Sum,
                        Nds,
                        Note,
                        PeriodsRef,
                        DateLastModif,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        RecalcSum,
                        Extra,
                        Discount,
                        NumCheck};
                this.Rows.Add(rowInvoiceMasterRow);
                return rowInvoiceMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow FindByID(int ID) {
                return ((InvoiceMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoiceMasterDataTable cln = ((InvoiceMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoiceMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnDate = base.Columns["Date"];
                this.columnOrganisationRef = base.Columns["OrganisationRef"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnRemoteReceiptMasterRef = base.Columns["RemoteReceiptMasterRef"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnSum = base.Columns["Sum"];
                this.columnNds = base.Columns["Nds"];
                this.columnNote = base.Columns["Note"];
                this.columnPeriodsRef = base.Columns["PeriodsRef"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnRecalcSum = base.Columns["RecalcSum"];
                this.columnExtra = base.Columns["Extra"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnNumCheck = base.Columns["NumCheck"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnOrganisationRef = new System.Data.DataColumn("OrganisationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationRef);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnRemoteReceiptMasterRef = new System.Data.DataColumn("RemoteReceiptMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteReceiptMasterRef);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnSum = new System.Data.DataColumn("Sum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSum);
                this.columnNds = new System.Data.DataColumn("Nds", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNds);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnPeriodsRef = new System.Data.DataColumn("PeriodsRef", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodsRef);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnRecalcSum = new System.Data.DataColumn("RecalcSum", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecalcSum);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.columnDiscount = new System.Data.DataColumn("Discount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnNumCheck = new System.Data.DataColumn("NumCheck", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumCheck);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNumber.AutoIncrement = true;
                this.columnNumber.AutoIncrementSeed = -1;
                this.columnNumber.AutoIncrementStep = -1;
                this.columnNumber.AllowDBNull = false;
                this.columnOrganisationRef.AllowDBNull = false;
                this.columnOrganisationRef.DefaultValue = ((int)(0));
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnDocumentTypeRef.DefaultValue = ((int)(0));
                this.columnRemoteReceiptMasterRef.AllowDBNull = false;
                this.columnRemoteReceiptMasterRef.DefaultValue = ((int)(0));
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnIsReadOnly.DefaultValue = ((bool)(false));
                this.columnSum.AllowDBNull = false;
                this.columnSum.DefaultValue = ((decimal)(0m));
                this.columnNds.AllowDBNull = false;
                this.columnNds.DefaultValue = ((decimal)(0m));
                this.columnNote.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)("\"\""));
                this.columnNote.MaxLength = 50;
                this.columnPeriodsRef.AllowDBNull = false;
                this.columnPeriodsRef.DefaultValue = ((decimal)(0m));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnRecalcSum.DefaultValue = ((bool)(true));
                this.columnNumCheck.DefaultValue = ((int)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow NewInvoiceMasterRow() {
                return ((InvoiceMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoiceMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoiceMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceMasterRowChanged != null)) {
                    this.InvoiceMasterRowChanged(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceMasterRowChanging != null)) {
                    this.InvoiceMasterRowChanging(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceMasterRowDeleted != null)) {
                    this.InvoiceMasterRowDeleted(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceMasterRowDeleting != null)) {
                    this.InvoiceMasterRowDeleting(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceMasterRow(InvoiceMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnInvoiceMasterRef;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnDiscountSum;
            
            private System.Data.DataColumn columnPurchaseNDS;
            
            private System.Data.DataColumn columnPriceRetail;
            
            private System.Data.DataColumn columnRetailNDS;
            
            private System.Data.DataColumn columnPriceRetailNDS;
            
            private System.Data.DataColumn columnLocalReceiptDetailRef;
            
            private System.Data.DataColumn columnRemoteInvoiceDetailRef;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnRetailSum;
            
            private System.Data.DataColumn columnExtra;
            
            private System.Data.DataColumn columnDiscount;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnArticle;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnNumCheck;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnCalcSum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailDataTable(bool initExpressions) {
                this.TableName = "InvoiceDetail";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceMasterRefColumn {
                get {
                    return this.columnInvoiceMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountSumColumn {
                get {
                    return this.columnDiscountSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchaseNDSColumn {
                get {
                    return this.columnPurchaseNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailColumn {
                get {
                    return this.columnPriceRetail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailNDSColumn {
                get {
                    return this.columnRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailNDSColumn {
                get {
                    return this.columnPriceRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocalReceiptDetailRefColumn {
                get {
                    return this.columnLocalReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceDetailRefColumn {
                get {
                    return this.columnRemoteInvoiceDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailSumColumn {
                get {
                    return this.columnRetailSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArticleColumn {
                get {
                    return this.columnArticle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumCheckColumn {
                get {
                    return this.columnNumCheck;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalcSumColumn {
                get {
                    return this.columnCalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow this[int index] {
                get {
                    return ((InvoiceDetailRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowChanging;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowChanged;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowDeleting;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceDetailRow(InvoiceDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow AddInvoiceDetailRow(
                        InvoiceMasterRow parentInvoiceMasterRowByFK_InvoiceDetail_InvoiceMaster, 
                        decimal Quantity, 
                        decimal PricePurchase, 
                        decimal DiscountSum, 
                        decimal PurchaseNDS, 
                        decimal PriceRetail, 
                        decimal RetailNDS, 
                        decimal PriceRetailNDS, 
                        RemainsRow parentRemainsRowByRemains_InvoiceDetail, 
                        int RemoteInvoiceDetailRef, 
                        string Note, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        decimal RetailSum, 
                        decimal Extra, 
                        decimal Discount, 
                        int DocumentTypeRef, 
                        int Article, 
                        ProductRow parentProductRowByInvoiceDetail_Product, 
                        string Series, 
                        System.DateTime UseByDate, 
                        string ManufacturerName, 
                        string ProductName, 
                        int NumCheck, 
                        System.DateTime Date, 
                        decimal CalcSum) {
                InvoiceDetailRow rowInvoiceDetailRow = ((InvoiceDetailRow)(this.NewRow()));
                rowInvoiceDetailRow.ItemArray = new object[] {
                        null,
                        parentInvoiceMasterRowByFK_InvoiceDetail_InvoiceMaster[0],
                        Quantity,
                        PricePurchase,
                        DiscountSum,
                        PurchaseNDS,
                        PriceRetail,
                        RetailNDS,
                        PriceRetailNDS,
                        parentRemainsRowByRemains_InvoiceDetail[13],
                        RemoteInvoiceDetailRef,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion,
                        RetailSum,
                        Extra,
                        Discount,
                        DocumentTypeRef,
                        Article,
                        parentProductRowByInvoiceDetail_Product[0],
                        Series,
                        UseByDate,
                        ManufacturerName,
                        ProductName,
                        NumCheck,
                        Date,
                        CalcSum};
                this.Rows.Add(rowInvoiceDetailRow);
                return rowInvoiceDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow FindByID(int ID) {
                return ((InvoiceDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoiceDetailDataTable cln = ((InvoiceDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoiceDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnInvoiceMasterRef = base.Columns["InvoiceMasterRef"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnDiscountSum = base.Columns["DiscountSum"];
                this.columnPurchaseNDS = base.Columns["PurchaseNDS"];
                this.columnPriceRetail = base.Columns["PriceRetail"];
                this.columnRetailNDS = base.Columns["RetailNDS"];
                this.columnPriceRetailNDS = base.Columns["PriceRetailNDS"];
                this.columnLocalReceiptDetailRef = base.Columns["LocalReceiptDetailRef"];
                this.columnRemoteInvoiceDetailRef = base.Columns["RemoteInvoiceDetailRef"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnRetailSum = base.Columns["RetailSum"];
                this.columnExtra = base.Columns["Extra"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnArticle = base.Columns["Article"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnNumCheck = base.Columns["NumCheck"];
                this.columnDate = base.Columns["Date"];
                this.columnCalcSum = base.Columns["CalcSum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnInvoiceMasterRef = new System.Data.DataColumn("InvoiceMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceMasterRef);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnDiscountSum = new System.Data.DataColumn("DiscountSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscountSum);
                this.columnPurchaseNDS = new System.Data.DataColumn("PurchaseNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseNDS);
                this.columnPriceRetail = new System.Data.DataColumn("PriceRetail", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetail);
                this.columnRetailNDS = new System.Data.DataColumn("RetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailNDS);
                this.columnPriceRetailNDS = new System.Data.DataColumn("PriceRetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetailNDS);
                this.columnLocalReceiptDetailRef = new System.Data.DataColumn("LocalReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalReceiptDetailRef);
                this.columnRemoteInvoiceDetailRef = new System.Data.DataColumn("RemoteInvoiceDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceDetailRef);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnRetailSum = new System.Data.DataColumn("RetailSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailSum);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.columnDiscount = new System.Data.DataColumn("Discount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnArticle = new System.Data.DataColumn("Article", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticle);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnNumCheck = new System.Data.DataColumn("NumCheck", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumCheck);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnCalcSum = new System.Data.DataColumn("CalcSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcSum);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnInvoiceMasterRef.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = ((decimal)(0m));
                this.columnPricePurchase.DefaultValue = ((decimal)(0m));
                this.columnLocalReceiptDetailRef.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)(""));
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnDiscount.AllowDBNull = false;
                this.columnDiscount.DefaultValue = ((decimal)(0m));
                this.columnDocumentTypeRef.ReadOnly = true;
                this.columnArticle.AllowDBNull = false;
                this.columnArticle.DefaultValue = ((int)(0));
                this.columnProductRef.ReadOnly = true;
                this.columnSeries.ReadOnly = true;
                this.columnUseByDate.ReadOnly = true;
                this.columnManufacturerName.ReadOnly = true;
                this.columnProductName.ReadOnly = true;
                this.columnNumCheck.ReadOnly = true;
                this.columnDate.ReadOnly = true;
                this.columnCalcSum.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow NewInvoiceDetailRow() {
                return ((InvoiceDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoiceDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoiceDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DocumentTypeRefColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).DocumentTypeRef";
                this.ProductRefColumn.Expression = "Parent(Remains_InvoiceDetail).ProductRef";
                this.SeriesColumn.Expression = "Parent(Remains_InvoiceDetail).Series";
                this.UseByDateColumn.Expression = "Parent(Remains_InvoiceDetail).UseByDate";
                this.ManufacturerNameColumn.Expression = "Parent(Remains_InvoiceDetail).ManufacturerName";
                this.ProductNameColumn.Expression = "Parent(InvoiceDetail_Product).Name";
                this.NumCheckColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).NumCheck";
                this.DateColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).Date";
                this.CalcSumColumn.Expression = "Quantity*PriceRetailNDS";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceDetailRowChanged != null)) {
                    this.InvoiceDetailRowChanged(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceDetailRowChanging != null)) {
                    this.InvoiceDetailRowChanging(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceDetailRowDeleted != null)) {
                    this.InvoiceDetailRowDeleted(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceDetailRowDeleting != null)) {
                    this.InvoiceDetailRowDeleting(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceDetailRow(InvoiceDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PeriodsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnStartDate;
            
            private System.Data.DataColumn columnClosedDate;
            
            private System.Data.DataColumn columnisClosed;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsDataTable() {
                this.TableName = "Periods";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PeriodsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PeriodsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClosedDateColumn {
                get {
                    return this.columnClosedDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isClosedColumn {
                get {
                    return this.columnisClosed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow this[int index] {
                get {
                    return ((PeriodsRow)(this.Rows[index]));
                }
            }
            
            public event PeriodsRowChangeEventHandler PeriodsRowChanging;
            
            public event PeriodsRowChangeEventHandler PeriodsRowChanged;
            
            public event PeriodsRowChangeEventHandler PeriodsRowDeleting;
            
            public event PeriodsRowChangeEventHandler PeriodsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPeriodsRow(PeriodsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow AddPeriodsRow(System.DateTime StartDate, System.DateTime ClosedDate, bool isClosed, byte[] RowVersion) {
                PeriodsRow rowPeriodsRow = ((PeriodsRow)(this.NewRow()));
                rowPeriodsRow.ItemArray = new object[] {
                        null,
                        StartDate,
                        ClosedDate,
                        isClosed,
                        RowVersion};
                this.Rows.Add(rowPeriodsRow);
                return rowPeriodsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow FindByID(int ID) {
                return ((PeriodsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PeriodsDataTable cln = ((PeriodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PeriodsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnClosedDate = base.Columns["ClosedDate"];
                this.columnisClosed = base.Columns["isClosed"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnStartDate = new System.Data.DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnClosedDate = new System.Data.DataColumn("ClosedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosedDate);
                this.columnisClosed = new System.Data.DataColumn("isClosed", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisClosed);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnStartDate.AllowDBNull = false;
                this.columnClosedDate.AllowDBNull = false;
                this.columnisClosed.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow NewPeriodsRow() {
                return ((PeriodsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PeriodsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PeriodsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PeriodsRowChanged != null)) {
                    this.PeriodsRowChanged(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PeriodsRowChanging != null)) {
                    this.PeriodsRowChanging(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PeriodsRowDeleted != null)) {
                    this.PeriodsRowDeleted(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PeriodsRowDeleting != null)) {
                    this.PeriodsRowDeleting(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePeriodsRow(PeriodsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PeriodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnReceiptMasterRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnPurchSum;
            
            private System.Data.DataColumn columnPurchNDS;
            
            private System.Data.DataColumn columnSalesNDS;
            
            private System.Data.DataColumn columnSalesPrice;
            
            private System.Data.DataColumn columnSalesSum;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            private System.Data.DataColumn columnExtra;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnCountryName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailDataTable(bool initExpressions) {
                this.TableName = "ReceiptDetail";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptMasterRefColumn {
                get {
                    return this.columnReceiptMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchSumColumn {
                get {
                    return this.columnPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchNDSColumn {
                get {
                    return this.columnPurchNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesNDSColumn {
                get {
                    return this.columnSalesNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesPriceColumn {
                get {
                    return this.columnSalesPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesSumColumn {
                get {
                    return this.columnSalesSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow this[int index] {
                get {
                    return ((ReceiptDetailRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowChanging;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowChanged;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowDeleting;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptDetailRow(ReceiptDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow AddReceiptDetailRow(
                        ReceiptMasterRow parentReceiptMasterRowByFK_ReceiptDetail_ReceiptMaster, 
                        ProductRow parentProductRowByProduct_ReceiptDetail, 
                        string Series, 
                        System.DateTime UseByDate, 
                        decimal Quantity, 
                        decimal PricePurchase, 
                        decimal PurchSum, 
                        decimal PurchNDS, 
                        decimal SalesNDS, 
                        decimal SalesPrice, 
                        decimal SalesSum, 
                        string Note, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        int ManufacturerRef, 
                        decimal Extra, 
                        int DocumentTypeRef, 
                        string ProductName, 
                        string ManufacturerName, 
                        string CountryName) {
                ReceiptDetailRow rowReceiptDetailRow = ((ReceiptDetailRow)(this.NewRow()));
                rowReceiptDetailRow.ItemArray = new object[] {
                        null,
                        parentReceiptMasterRowByFK_ReceiptDetail_ReceiptMaster[0],
                        parentProductRowByProduct_ReceiptDetail[0],
                        Series,
                        UseByDate,
                        Quantity,
                        PricePurchase,
                        PurchSum,
                        PurchNDS,
                        SalesNDS,
                        SalesPrice,
                        SalesSum,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion,
                        ManufacturerRef,
                        Extra,
                        DocumentTypeRef,
                        ProductName,
                        ManufacturerName,
                        CountryName};
                this.Rows.Add(rowReceiptDetailRow);
                return rowReceiptDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow FindByID(int ID) {
                return ((ReceiptDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptDetailDataTable cln = ((ReceiptDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnReceiptMasterRef = base.Columns["ReceiptMasterRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnPurchSum = base.Columns["PurchSum"];
                this.columnPurchNDS = base.Columns["PurchNDS"];
                this.columnSalesNDS = base.Columns["SalesNDS"];
                this.columnSalesPrice = base.Columns["SalesPrice"];
                this.columnSalesSum = base.Columns["SalesSum"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
                this.columnExtra = base.Columns["Extra"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnCountryName = base.Columns["CountryName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnReceiptMasterRef = new System.Data.DataColumn("ReceiptMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptMasterRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnPurchSum = new System.Data.DataColumn("PurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchSum);
                this.columnPurchNDS = new System.Data.DataColumn("PurchNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchNDS);
                this.columnSalesNDS = new System.Data.DataColumn("SalesNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesNDS);
                this.columnSalesPrice = new System.Data.DataColumn("SalesPrice", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesPrice);
                this.columnSalesSum = new System.Data.DataColumn("SalesSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSum);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnCountryName = new System.Data.DataColumn("CountryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnReceiptMasterRef.AllowDBNull = false;
                this.columnProductRef.AllowDBNull = false;
                this.columnSeries.AllowDBNull = false;
                this.columnSeries.MaxLength = 15;
                this.columnUseByDate.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnPricePurchase.AllowDBNull = false;
                this.columnPurchSum.AllowDBNull = false;
                this.columnPurchNDS.AllowDBNull = false;
                this.columnSalesNDS.AllowDBNull = false;
                this.columnSalesPrice.AllowDBNull = false;
                this.columnSalesSum.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnManufacturerRef.AllowDBNull = false;
                this.columnExtra.AllowDBNull = false;
                this.columnDocumentTypeRef.ReadOnly = true;
                this.columnProductName.ReadOnly = true;
                this.columnManufacturerName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow NewReceiptDetailRow() {
                return ((ReceiptDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DocumentTypeRefColumn.Expression = "Parent(FK_ReceiptDetail_ReceiptMaster).DocumentTypeRef";
                this.ProductNameColumn.Expression = "Parent(Product_ReceiptDetail).Name";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptDetailRowChanged != null)) {
                    this.ReceiptDetailRowChanged(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptDetailRowChanging != null)) {
                    this.ReceiptDetailRowChanging(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptDetailRowDeleted != null)) {
                    this.ReceiptDetailRowDeleted(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptDetailRowDeleting != null)) {
                    this.ReceiptDetailRowDeleting(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptDetailRow(ReceiptDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnSenderStockRef;
            
            private System.Data.DataColumn columnSalesSum;
            
            private System.Data.DataColumn columnPurchSum;
            
            private System.Data.DataColumn columnPurchNDS;
            
            private System.Data.DataColumn columnSalesNDS;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnRecalcSum;
            
            private System.Data.DataColumn columnPeriodsRef;
            
            private System.Data.DataColumn columnExtra;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterDataTable() {
                this.TableName = "ReceiptMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderStockRefColumn {
                get {
                    return this.columnSenderStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesSumColumn {
                get {
                    return this.columnSalesSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchSumColumn {
                get {
                    return this.columnPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchNDSColumn {
                get {
                    return this.columnPurchNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesNDSColumn {
                get {
                    return this.columnSalesNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecalcSumColumn {
                get {
                    return this.columnRecalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PeriodsRefColumn {
                get {
                    return this.columnPeriodsRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow this[int index] {
                get {
                    return ((ReceiptMasterRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowChanging;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowChanged;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowDeleting;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptMasterRow(ReceiptMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow AddReceiptMasterRow(
                        int Number, 
                        string Note, 
                        System.DateTime DocDate, 
                        DocumentTypeRow parentDocumentTypeRowByFK_ReceiptMaster_DocumentType, 
                        StockRow parentStockRowByFK_ReceiptMaster_Stock, 
                        StockRow parentStockRowByFK_ReceiptMaster_Stock1, 
                        decimal SalesSum, 
                        decimal PurchSum, 
                        decimal PurchNDS, 
                        decimal SalesNDS, 
                        bool IsReadOnly, 
                        string AuthorCreate, 
                        System.DateTime DateLastModif, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        bool RecalcSum, 
                        int PeriodsRef, 
                        decimal Extra) {
                ReceiptMasterRow rowReceiptMasterRow = ((ReceiptMasterRow)(this.NewRow()));
                rowReceiptMasterRow.ItemArray = new object[] {
                        null,
                        Number,
                        Note,
                        DocDate,
                        parentDocumentTypeRowByFK_ReceiptMaster_DocumentType[0],
                        parentStockRowByFK_ReceiptMaster_Stock[0],
                        parentStockRowByFK_ReceiptMaster_Stock1[0],
                        SalesSum,
                        PurchSum,
                        PurchNDS,
                        SalesNDS,
                        IsReadOnly,
                        AuthorCreate,
                        DateLastModif,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        RecalcSum,
                        PeriodsRef,
                        Extra};
                this.Rows.Add(rowReceiptMasterRow);
                return rowReceiptMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow FindByID(int ID) {
                return ((ReceiptMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptMasterDataTable cln = ((ReceiptMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnNote = base.Columns["Note"];
                this.columnDocDate = base.Columns["DocDate"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnSenderStockRef = base.Columns["SenderStockRef"];
                this.columnSalesSum = base.Columns["SalesSum"];
                this.columnPurchSum = base.Columns["PurchSum"];
                this.columnPurchNDS = base.Columns["PurchNDS"];
                this.columnSalesNDS = base.Columns["SalesNDS"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnRecalcSum = base.Columns["RecalcSum"];
                this.columnPeriodsRef = base.Columns["PeriodsRef"];
                this.columnExtra = base.Columns["Extra"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnSenderStockRef = new System.Data.DataColumn("SenderStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderStockRef);
                this.columnSalesSum = new System.Data.DataColumn("SalesSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSum);
                this.columnPurchSum = new System.Data.DataColumn("PurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchSum);
                this.columnPurchNDS = new System.Data.DataColumn("PurchNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchNDS);
                this.columnSalesNDS = new System.Data.DataColumn("SalesNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesNDS);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnRecalcSum = new System.Data.DataColumn("RecalcSum", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecalcSum);
                this.columnPeriodsRef = new System.Data.DataColumn("PeriodsRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodsRef);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 255;
                this.columnDocDate.AllowDBNull = false;
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnMainStockRef.AllowDBNull = false;
                this.columnSenderStockRef.AllowDBNull = false;
                this.columnSalesSum.AllowDBNull = false;
                this.columnPurchSum.AllowDBNull = false;
                this.columnPurchNDS.AllowDBNull = false;
                this.columnSalesNDS.AllowDBNull = false;
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnRecalcSum.AllowDBNull = false;
                this.columnPeriodsRef.AllowDBNull = false;
                this.columnExtra.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow NewReceiptMasterRow() {
                return ((ReceiptMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptMasterRowChanged != null)) {
                    this.ReceiptMasterRowChanged(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptMasterRowChanging != null)) {
                    this.ReceiptMasterRowChanging(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptMasterRowDeleted != null)) {
                    this.ReceiptMasterRowDeleted(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptMasterRowDeleting != null)) {
                    this.ReceiptMasterRowDeleting(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptMasterRow(ReceiptMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptRemainsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnReceiptDetailRef;
            
            private System.Data.DataColumn columnQuantityReceipt;
            
            private System.Data.DataColumn columnQuantityRemains;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsDataTable() {
                this.TableName = "ReceiptRemains";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptRemainsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptRemainsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptDetailRefColumn {
                get {
                    return this.columnReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityReceiptColumn {
                get {
                    return this.columnQuantityReceipt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityRemainsColumn {
                get {
                    return this.columnQuantityRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow this[int index] {
                get {
                    return ((ReceiptRemainsRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowChanging;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowChanged;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowDeleting;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptRemainsRow(ReceiptRemainsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow AddReceiptRemainsRow(int ReceiptDetailRef, decimal QuantityReceipt, decimal QuantityRemains, System.DateTime DateLastModif, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                ReceiptRemainsRow rowReceiptRemainsRow = ((ReceiptRemainsRow)(this.NewRow()));
                rowReceiptRemainsRow.ItemArray = new object[] {
                        ReceiptDetailRef,
                        QuantityReceipt,
                        QuantityRemains,
                        DateLastModif,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowReceiptRemainsRow);
                return rowReceiptRemainsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow FindByReceiptDetailRef(int ReceiptDetailRef) {
                return ((ReceiptRemainsRow)(this.Rows.Find(new object[] {
                            ReceiptDetailRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptRemainsDataTable cln = ((ReceiptRemainsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptRemainsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReceiptDetailRef = base.Columns["ReceiptDetailRef"];
                this.columnQuantityReceipt = base.Columns["QuantityReceipt"];
                this.columnQuantityRemains = base.Columns["QuantityRemains"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReceiptDetailRef = new System.Data.DataColumn("ReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDetailRef);
                this.columnQuantityReceipt = new System.Data.DataColumn("QuantityReceipt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityReceipt);
                this.columnQuantityRemains = new System.Data.DataColumn("QuantityRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityRemains);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReceiptDetailRef}, true));
                this.columnReceiptDetailRef.AllowDBNull = false;
                this.columnReceiptDetailRef.Unique = true;
                this.columnQuantityReceipt.AllowDBNull = false;
                this.columnQuantityRemains.AllowDBNull = false;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow NewReceiptRemainsRow() {
                return ((ReceiptRemainsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptRemainsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptRemainsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptRemainsRowChanged != null)) {
                    this.ReceiptRemainsRowChanged(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptRemainsRowChanging != null)) {
                    this.ReceiptRemainsRowChanging(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptRemainsRowDeleted != null)) {
                    this.ReceiptRemainsRowDeleted(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptRemainsRowDeleting != null)) {
                    this.ReceiptRemainsRowDeleting(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptRemainsRow(ReceiptRemainsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptRemainsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnSmallName;
            
            private System.Data.DataColumn columnPriceManufact;
            
            private System.Data.DataColumn columnUnitRef;
            
            private System.Data.DataColumn columnPackingRef;
            
            private System.Data.DataColumn columnStorageConditionRef;
            
            private System.Data.DataColumn columnSubstanceRef;
            
            private System.Data.DataColumn columnFarmGrouplevel2Ref;
            
            private System.Data.DataColumn columnIsRecept;
            
            private System.Data.DataColumn columnIsOneRecept;
            
            private System.Data.DataColumn columnIsHide;
            
            private System.Data.DataColumn columnMinDivisor;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnFarmGroupName;
            
            private System.Data.DataColumn columnPackingName;
            
            private System.Data.DataColumn columnStorageConditionName;
            
            private System.Data.DataColumn columnFarmGroupLevel2;
            
            private System.Data.DataColumn columnUnitName;
            
            private System.Data.DataColumn columnSubstanceName;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnOldName;
            
            private System.Data.DataColumn columnOldKod;
            
            private System.Data.DataColumn columnOldKol;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductDataTable() {
                this.TableName = "Product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SmallNameColumn {
                get {
                    return this.columnSmallName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceManufactColumn {
                get {
                    return this.columnPriceManufact;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitRefColumn {
                get {
                    return this.columnUnitRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingRefColumn {
                get {
                    return this.columnPackingRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionRefColumn {
                get {
                    return this.columnStorageConditionRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceRefColumn {
                get {
                    return this.columnSubstanceRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGrouplevel2RefColumn {
                get {
                    return this.columnFarmGrouplevel2Ref;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReceptColumn {
                get {
                    return this.columnIsRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsOneReceptColumn {
                get {
                    return this.columnIsOneRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsHideColumn {
                get {
                    return this.columnIsHide;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinDivisorColumn {
                get {
                    return this.columnMinDivisor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupNameColumn {
                get {
                    return this.columnFarmGroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingNameColumn {
                get {
                    return this.columnPackingName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionNameColumn {
                get {
                    return this.columnStorageConditionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupLevel2Column {
                get {
                    return this.columnFarmGroupLevel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceNameColumn {
                get {
                    return this.columnSubstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldNameColumn {
                get {
                    return this.columnOldName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldKodColumn {
                get {
                    return this.columnOldKod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldKolColumn {
                get {
                    return this.columnOldKol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow this[int index] {
                get {
                    return ((ProductRow)(this.Rows[index]));
                }
            }
            
            public event ProductRowChangeEventHandler ProductRowChanging;
            
            public event ProductRowChangeEventHandler ProductRowChanged;
            
            public event ProductRowChangeEventHandler ProductRowDeleting;
            
            public event ProductRowChangeEventHandler ProductRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductRow(ProductRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow AddProductRow(
                        int ID, 
                        string Name, 
                        string SmallName, 
                        decimal PriceManufact, 
                        int UnitRef, 
                        int PackingRef, 
                        int StorageConditionRef, 
                        int SubstanceRef, 
                        int FarmGrouplevel2Ref, 
                        bool IsRecept, 
                        bool IsOneRecept, 
                        bool IsHide, 
                        short MinDivisor, 
                        bool IsNDS, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string FarmGroupName, 
                        string PackingName, 
                        string StorageConditionName, 
                        string FarmGroupLevel2, 
                        string UnitName, 
                        string SubstanceName, 
                        System.DateTime DateLastModif, 
                        string Note, 
                        string OldName, 
                        int OldKod, 
                        int OldKol) {
                ProductRow rowProductRow = ((ProductRow)(this.NewRow()));
                rowProductRow.ItemArray = new object[] {
                        ID,
                        Name,
                        SmallName,
                        PriceManufact,
                        UnitRef,
                        PackingRef,
                        StorageConditionRef,
                        SubstanceRef,
                        FarmGrouplevel2Ref,
                        IsRecept,
                        IsOneRecept,
                        IsHide,
                        MinDivisor,
                        IsNDS,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        FarmGroupName,
                        PackingName,
                        StorageConditionName,
                        FarmGroupLevel2,
                        UnitName,
                        SubstanceName,
                        DateLastModif,
                        Note,
                        OldName,
                        OldKod,
                        OldKol};
                this.Rows.Add(rowProductRow);
                return rowProductRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow FindByID(int ID) {
                return ((ProductRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductDataTable cln = ((ProductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnSmallName = base.Columns["SmallName"];
                this.columnPriceManufact = base.Columns["PriceManufact"];
                this.columnUnitRef = base.Columns["UnitRef"];
                this.columnPackingRef = base.Columns["PackingRef"];
                this.columnStorageConditionRef = base.Columns["StorageConditionRef"];
                this.columnSubstanceRef = base.Columns["SubstanceRef"];
                this.columnFarmGrouplevel2Ref = base.Columns["FarmGrouplevel2Ref"];
                this.columnIsRecept = base.Columns["IsRecept"];
                this.columnIsOneRecept = base.Columns["IsOneRecept"];
                this.columnIsHide = base.Columns["IsHide"];
                this.columnMinDivisor = base.Columns["MinDivisor"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnFarmGroupName = base.Columns["FarmGroupName"];
                this.columnPackingName = base.Columns["PackingName"];
                this.columnStorageConditionName = base.Columns["StorageConditionName"];
                this.columnFarmGroupLevel2 = base.Columns["FarmGroupLevel2"];
                this.columnUnitName = base.Columns["UnitName"];
                this.columnSubstanceName = base.Columns["SubstanceName"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnNote = base.Columns["Note"];
                this.columnOldName = base.Columns["OldName"];
                this.columnOldKod = base.Columns["OldKod"];
                this.columnOldKol = base.Columns["OldKol"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnSmallName = new System.Data.DataColumn("SmallName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmallName);
                this.columnPriceManufact = new System.Data.DataColumn("PriceManufact", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceManufact);
                this.columnUnitRef = new System.Data.DataColumn("UnitRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitRef);
                this.columnPackingRef = new System.Data.DataColumn("PackingRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingRef);
                this.columnStorageConditionRef = new System.Data.DataColumn("StorageConditionRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionRef);
                this.columnSubstanceRef = new System.Data.DataColumn("SubstanceRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceRef);
                this.columnFarmGrouplevel2Ref = new System.Data.DataColumn("FarmGrouplevel2Ref", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGrouplevel2Ref);
                this.columnIsRecept = new System.Data.DataColumn("IsRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecept);
                this.columnIsOneRecept = new System.Data.DataColumn("IsOneRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOneRecept);
                this.columnIsHide = new System.Data.DataColumn("IsHide", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHide);
                this.columnMinDivisor = new System.Data.DataColumn("MinDivisor", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDivisor);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnFarmGroupName = new System.Data.DataColumn("FarmGroupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupName);
                this.columnPackingName = new System.Data.DataColumn("PackingName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingName);
                this.columnStorageConditionName = new System.Data.DataColumn("StorageConditionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionName);
                this.columnFarmGroupLevel2 = new System.Data.DataColumn("FarmGroupLevel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupLevel2);
                this.columnUnitName = new System.Data.DataColumn("UnitName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitName);
                this.columnSubstanceName = new System.Data.DataColumn("SubstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceName);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnOldName = new System.Data.DataColumn("OldName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldName);
                this.columnOldKod = new System.Data.DataColumn("OldKod", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldKod);
                this.columnOldKol = new System.Data.DataColumn("OldKol", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldKol);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 255;
                this.columnSmallName.AllowDBNull = false;
                this.columnSmallName.MaxLength = 25;
                this.columnPriceManufact.AllowDBNull = false;
                this.columnUnitRef.AllowDBNull = false;
                this.columnPackingRef.AllowDBNull = false;
                this.columnStorageConditionRef.AllowDBNull = false;
                this.columnSubstanceRef.AllowDBNull = false;
                this.columnFarmGrouplevel2Ref.AllowDBNull = false;
                this.columnIsRecept.AllowDBNull = false;
                this.columnIsOneRecept.AllowDBNull = false;
                this.columnIsHide.AllowDBNull = false;
                this.columnMinDivisor.AllowDBNull = false;
                this.columnIsNDS.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnFarmGroupName.AllowDBNull = false;
                this.columnFarmGroupName.MaxLength = 50;
                this.columnPackingName.AllowDBNull = false;
                this.columnPackingName.MaxLength = 50;
                this.columnStorageConditionName.AllowDBNull = false;
                this.columnStorageConditionName.MaxLength = 50;
                this.columnFarmGroupLevel2.AllowDBNull = false;
                this.columnFarmGroupLevel2.MaxLength = 50;
                this.columnUnitName.AllowDBNull = false;
                this.columnUnitName.MaxLength = 10;
                this.columnSubstanceName.AllowDBNull = false;
                this.columnSubstanceName.MaxLength = 50;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnOldName.AllowDBNull = false;
                this.columnOldName.MaxLength = 100;
                this.columnOldKod.AllowDBNull = false;
                this.columnOldKol.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow NewProductRow() {
                return ((ProductRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductRowChanged != null)) {
                    this.ProductRowChanged(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductRowChanging != null)) {
                    this.ProductRowChanging(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductRowDeleted != null)) {
                    this.ProductRowDeleted(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductRowDeleting != null)) {
                    this.ProductRowDeleting(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductRow(ProductRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RemainsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            private System.Data.DataColumn columnCountryName;
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnQuantityRemains;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnReceiptDetailRef;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnSumRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemainsDataTable(bool initExpressions) {
                this.TableName = "Remains";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemainsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RemainsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityRemainsColumn {
                get {
                    return this.columnQuantityRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptDetailRefColumn {
                get {
                    return this.columnReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumRemainsColumn {
                get {
                    return this.columnSumRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow this[int index] {
                get {
                    return ((RemainsRow)(this.Rows[index]));
                }
            }
            
            public event RemainsRowChangeEventHandler RemainsRowChanging;
            
            public event RemainsRowChangeEventHandler RemainsRowChanged;
            
            public event RemainsRowChangeEventHandler RemainsRowDeleting;
            
            public event RemainsRowChangeEventHandler RemainsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRemainsRow(RemainsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow AddRemainsRow(
                        ProductRow parentProductRowByProduct_Remains, 
                        string Series, 
                        System.DateTime UseByDate, 
                        decimal PricePurchase, 
                        decimal Quantity, 
                        System.DateTime DateLastModif, 
                        string AuthorLastModif, 
                        string ManufacturerName, 
                        int ManufacturerRef, 
                        string CountryName, 
                        System.DateTime DocDate, 
                        decimal QuantityRemains, 
                        int MainStockRef, 
                        int ReceiptDetailRef, 
                        string ProductName, 
                        decimal SumRemains) {
                RemainsRow rowRemainsRow = ((RemainsRow)(this.NewRow()));
                rowRemainsRow.ItemArray = new object[] {
                        parentProductRowByProduct_Remains[0],
                        Series,
                        UseByDate,
                        PricePurchase,
                        Quantity,
                        DateLastModif,
                        AuthorLastModif,
                        ManufacturerName,
                        ManufacturerRef,
                        CountryName,
                        DocDate,
                        QuantityRemains,
                        MainStockRef,
                        ReceiptDetailRef,
                        ProductName,
                        SumRemains};
                this.Rows.Add(rowRemainsRow);
                return rowRemainsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow FindByReceiptDetailRef(int ReceiptDetailRef) {
                return ((RemainsRow)(this.Rows.Find(new object[] {
                            ReceiptDetailRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RemainsDataTable cln = ((RemainsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RemainsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnDocDate = base.Columns["DocDate"];
                this.columnQuantityRemains = base.Columns["QuantityRemains"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnReceiptDetailRef = base.Columns["ReceiptDetailRef"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnSumRemains = base.Columns["SumRemains"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.columnCountryName = new System.Data.DataColumn("CountryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnQuantityRemains = new System.Data.DataColumn("QuantityRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityRemains);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnReceiptDetailRef = new System.Data.DataColumn("ReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDetailRef);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnSumRemains = new System.Data.DataColumn("SumRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumRemains);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReceiptDetailRef}, true));
                this.columnProductRef.AllowDBNull = false;
                this.columnSeries.AllowDBNull = false;
                this.columnSeries.MaxLength = 15;
                this.columnUseByDate.AllowDBNull = false;
                this.columnPricePurchase.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnManufacturerName.AllowDBNull = false;
                this.columnManufacturerRef.AllowDBNull = false;
                this.columnCountryName.AllowDBNull = false;
                this.columnCountryName.MaxLength = 50;
                this.columnDocDate.AllowDBNull = false;
                this.columnQuantityRemains.AllowDBNull = false;
                this.columnMainStockRef.AllowDBNull = false;
                this.columnReceiptDetailRef.AllowDBNull = false;
                this.columnReceiptDetailRef.Unique = true;
                this.columnProductName.ReadOnly = true;
                this.columnSumRemains.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow NewRemainsRow() {
                return ((RemainsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RemainsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RemainsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ProductNameColumn.Expression = "Parent(Product_Remains).Name";
                this.SumRemainsColumn.Expression = "QuantityRemains*PricePurchase";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RemainsRowChanged != null)) {
                    this.RemainsRowChanged(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RemainsRowChanging != null)) {
                    this.RemainsRowChanging(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RemainsRowDeleted != null)) {
                    this.RemainsRowDeleted(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RemainsRowDeleting != null)) {
                    this.RemainsRowDeleting(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRemainsRow(RemainsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RemainsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnTradePutletRef;
            
            private System.Data.DataColumn columnisLocal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDataTable() {
                this.TableName = "Stock";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePutletRefColumn {
                get {
                    return this.columnTradePutletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isLocalColumn {
                get {
                    return this.columnisLocal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow this[int index] {
                get {
                    return ((StockRow)(this.Rows[index]));
                }
            }
            
            public event StockRowChangeEventHandler StockRowChanging;
            
            public event StockRowChangeEventHandler StockRowChanged;
            
            public event StockRowChangeEventHandler StockRowDeleting;
            
            public event StockRowChangeEventHandler StockRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockRow(StockRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow AddStockRow(string Name, bool IsNDS, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, int TradePutletRef, int isLocal) {
                StockRow rowStockRow = ((StockRow)(this.NewRow()));
                rowStockRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsNDS,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        TradePutletRef,
                        isLocal};
                this.Rows.Add(rowStockRow);
                return rowStockRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow FindByID(int ID) {
                return ((StockRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StockDataTable cln = ((StockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StockDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnTradePutletRef = base.Columns["TradePutletRef"];
                this.columnisLocal = base.Columns["isLocal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnTradePutletRef = new System.Data.DataColumn("TradePutletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePutletRef);
                this.columnisLocal = new System.Data.DataColumn("isLocal", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisLocal);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsNDS.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnTradePutletRef.AllowDBNull = false;
                this.columnisLocal.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow NewStockRow() {
                return ((StockRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StockRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StockRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockRowChanged != null)) {
                    this.StockRowChanged(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockRowChanging != null)) {
                    this.StockRowChanging(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockRowDeleted != null)) {
                    this.StockRowDeleted(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockRowDeleting != null)) {
                    this.StockRowDeleting(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockRow(StockRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LocalSettingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnNDS;
            
            private System.Data.DataColumn columnMainTradePutletRef;
            
            private System.Data.DataColumn columnPrDiscount;
            
            private System.Data.DataColumn columnPrinter;
            
            private System.Data.DataColumn columnNum;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingDataTable() {
                this.TableName = "LocalSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LocalSettingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LocalSettingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NDSColumn {
                get {
                    return this.columnNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainTradePutletRefColumn {
                get {
                    return this.columnMainTradePutletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrDiscountColumn {
                get {
                    return this.columnPrDiscount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrinterColumn {
                get {
                    return this.columnPrinter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumColumn {
                get {
                    return this.columnNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingRow this[int index] {
                get {
                    return ((LocalSettingRow)(this.Rows[index]));
                }
            }
            
            public event LocalSettingRowChangeEventHandler LocalSettingRowChanging;
            
            public event LocalSettingRowChangeEventHandler LocalSettingRowChanged;
            
            public event LocalSettingRowChangeEventHandler LocalSettingRowDeleting;
            
            public event LocalSettingRowChangeEventHandler LocalSettingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLocalSettingRow(LocalSettingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingRow AddLocalSettingRow(int id, int NDS, int MainTradePutletRef, int PrDiscount, string Printer, short Num, string FullName, int Password, string Name) {
                LocalSettingRow rowLocalSettingRow = ((LocalSettingRow)(this.NewRow()));
                rowLocalSettingRow.ItemArray = new object[] {
                        id,
                        NDS,
                        MainTradePutletRef,
                        PrDiscount,
                        Printer,
                        Num,
                        FullName,
                        Password,
                        Name};
                this.Rows.Add(rowLocalSettingRow);
                return rowLocalSettingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingRow FindByNum(short Num) {
                return ((LocalSettingRow)(this.Rows.Find(new object[] {
                            Num})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LocalSettingDataTable cln = ((LocalSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LocalSettingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnNDS = base.Columns["NDS"];
                this.columnMainTradePutletRef = base.Columns["MainTradePutletRef"];
                this.columnPrDiscount = base.Columns["PrDiscount"];
                this.columnPrinter = base.Columns["Printer"];
                this.columnNum = base.Columns["Num"];
                this.columnFullName = base.Columns["FullName"];
                this.columnPassword = base.Columns["Password"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnNDS = new System.Data.DataColumn("NDS", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNDS);
                this.columnMainTradePutletRef = new System.Data.DataColumn("MainTradePutletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainTradePutletRef);
                this.columnPrDiscount = new System.Data.DataColumn("PrDiscount", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrDiscount);
                this.columnPrinter = new System.Data.DataColumn("Printer", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrinter);
                this.columnNum = new System.Data.DataColumn("Num", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNum);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNum}, true));
                this.columnid.AllowDBNull = false;
                this.columnNDS.AllowDBNull = false;
                this.columnMainTradePutletRef.AllowDBNull = false;
                this.columnPrDiscount.AllowDBNull = false;
                this.columnPrinter.AllowDBNull = false;
                this.columnPrinter.MaxLength = 50;
                this.columnNum.AllowDBNull = false;
                this.columnNum.Unique = true;
                this.columnFullName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingRow NewLocalSettingRow() {
                return ((LocalSettingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LocalSettingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LocalSettingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LocalSettingRowChanged != null)) {
                    this.LocalSettingRowChanged(this, new LocalSettingRowChangeEvent(((LocalSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LocalSettingRowChanging != null)) {
                    this.LocalSettingRowChanging(this, new LocalSettingRowChangeEvent(((LocalSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LocalSettingRowDeleted != null)) {
                    this.LocalSettingRowDeleted(this, new LocalSettingRowChangeEvent(((LocalSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LocalSettingRowDeleting != null)) {
                    this.LocalSettingRowDeleting(this, new LocalSettingRowChangeEvent(((LocalSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLocalSettingRow(LocalSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LocalSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrdersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTradePupletRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnDateOrder;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPrice;
            
            private System.Data.DataColumn columnReserved;
            
            private System.Data.DataColumn columnQuantityNow;
            
            private System.Data.DataColumn columnisClose;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnRowVersion;
            
            private static System.DateTime columnDateOrder_defaultValue = System.DateTime.Parse("01/01/2001 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersDataTable() {
                this.TableName = "Orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrdersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePupletRefColumn {
                get {
                    return this.columnTradePupletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOrderColumn {
                get {
                    return this.columnDateOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReservedColumn {
                get {
                    return this.columnReserved;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityNowColumn {
                get {
                    return this.columnQuantityNow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isCloseColumn {
                get {
                    return this.columnisClose;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow AddOrdersRow(int TradePupletRef, ProductRow parentProductRowByProduct_Orders, System.DateTime DateOrder, decimal Quantity, decimal Price, decimal Reserved, decimal QuantityNow, bool isClose, string Note, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, System.DateTime DateLastModif, byte[] RowVersion) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                rowOrdersRow.ItemArray = new object[] {
                        null,
                        TradePupletRef,
                        parentProductRowByProduct_Orders[0],
                        DateOrder,
                        Quantity,
                        Price,
                        Reserved,
                        QuantityNow,
                        isClose,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        DateLastModif,
                        RowVersion};
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow FindByID(int ID) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTradePupletRef = base.Columns["TradePupletRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnDateOrder = base.Columns["DateOrder"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPrice = base.Columns["Price"];
                this.columnReserved = base.Columns["Reserved"];
                this.columnQuantityNow = base.Columns["QuantityNow"];
                this.columnisClose = base.Columns["isClose"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTradePupletRef = new System.Data.DataColumn("TradePupletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePupletRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnDateOrder = new System.Data.DataColumn("DateOrder", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOrder);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPrice = new System.Data.DataColumn("Price", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnReserved = new System.Data.DataColumn("Reserved", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved);
                this.columnQuantityNow = new System.Data.DataColumn("QuantityNow", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityNow);
                this.columnisClose = new System.Data.DataColumn("isClose", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisClose);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnTradePupletRef.DefaultValue = ((int)(0));
                this.columnProductRef.AllowDBNull = false;
                this.columnProductRef.DefaultValue = ((int)(0));
                this.columnDateOrder.DefaultValue = ((System.DateTime)(OrdersDataTable.columnDateOrder_defaultValue));
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = ((decimal)(1m));
                this.columnPrice.DefaultValue = ((decimal)(0m));
                this.columnReserved.DefaultValue = ((decimal)(0m));
                this.columnQuantityNow.DefaultValue = ((decimal)(0m));
                this.columnisClose.AllowDBNull = false;
                this.columnisClose.DefaultValue = ((bool)(false));
                this.columnNote.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)("\'\'"));
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class inventoryMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnrowversion;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnIsClose;
            
            private System.Data.DataColumn columnAuthorLatModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterDataTable() {
                this.TableName = "inventoryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal inventoryMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected inventoryMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn rowversionColumn {
                get {
                    return this.columnrowversion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsCloseColumn {
                get {
                    return this.columnIsClose;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLatModifColumn {
                get {
                    return this.columnAuthorLatModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRow this[int index] {
                get {
                    return ((inventoryMasterRow)(this.Rows[index]));
                }
            }
            
            public event inventoryMasterRowChangeEventHandler inventoryMasterRowChanging;
            
            public event inventoryMasterRowChangeEventHandler inventoryMasterRowChanged;
            
            public event inventoryMasterRowChangeEventHandler inventoryMasterRowDeleting;
            
            public event inventoryMasterRowChangeEventHandler inventoryMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinventoryMasterRow(inventoryMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRow AddinventoryMasterRow(System.DateTime Date, string Note, byte[] rowversion, string AuthorCreate, bool IsClose, string AuthorLatModif, System.DateTime DateLastModif) {
                inventoryMasterRow rowinventoryMasterRow = ((inventoryMasterRow)(this.NewRow()));
                rowinventoryMasterRow.ItemArray = new object[] {
                        null,
                        Date,
                        Note,
                        rowversion,
                        AuthorCreate,
                        IsClose,
                        AuthorLatModif,
                        DateLastModif};
                this.Rows.Add(rowinventoryMasterRow);
                return rowinventoryMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRow FindByID(int ID) {
                return ((inventoryMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                inventoryMasterDataTable cln = ((inventoryMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new inventoryMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDate = base.Columns["Date"];
                this.columnNote = base.Columns["Note"];
                this.columnrowversion = base.Columns["rowversion"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnIsClose = base.Columns["IsClose"];
                this.columnAuthorLatModif = base.Columns["AuthorLatModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnrowversion = new System.Data.DataColumn("rowversion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowversion);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnIsClose = new System.Data.DataColumn("IsClose", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsClose);
                this.columnAuthorLatModif = new System.Data.DataColumn("AuthorLatModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLatModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnDate.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnrowversion.ReadOnly = true;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnIsClose.AllowDBNull = false;
                this.columnIsClose.DefaultValue = ((bool)(false));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRow NewinventoryMasterRow() {
                return ((inventoryMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new inventoryMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(inventoryMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.inventoryMasterRowChanged != null)) {
                    this.inventoryMasterRowChanged(this, new inventoryMasterRowChangeEvent(((inventoryMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.inventoryMasterRowChanging != null)) {
                    this.inventoryMasterRowChanging(this, new inventoryMasterRowChangeEvent(((inventoryMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.inventoryMasterRowDeleted != null)) {
                    this.inventoryMasterRowDeleted(this, new inventoryMasterRowChangeEvent(((inventoryMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.inventoryMasterRowDeleting != null)) {
                    this.inventoryMasterRowDeleting(this, new inventoryMasterRowChangeEvent(((inventoryMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinventoryMasterRow(inventoryMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "inventoryMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class inventoryDetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            private System.Data.DataColumn columnPrice;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnQuantityFact;
            
            private System.Data.DataColumn columnrowversion;
            
            private System.Data.DataColumn columninventoryMasterRef;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnIsRecept;
            
            private System.Data.DataColumn columnIsOneRecept;
            
            private System.Data.DataColumn columnMinDivisor;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnFarmGroupName;
            
            private System.Data.DataColumn columnPackingName;
            
            private System.Data.DataColumn columnStorageConditionName;
            
            private System.Data.DataColumn columnFarmGroupLevel2;
            
            private System.Data.DataColumn columnUnitName;
            
            private System.Data.DataColumn columnSubstanceName;
            
            private System.Data.DataColumn columnOldKol;
            
            private System.Data.DataColumn columnOldName;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnSumFact;
            
            private System.Data.DataColumn columnSumRem;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDiff;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal inventoryDetailsDataTable(bool initExpressions) {
                this.TableName = "inventoryDetails";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal inventoryDetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected inventoryDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityFactColumn {
                get {
                    return this.columnQuantityFact;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn rowversionColumn {
                get {
                    return this.columnrowversion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn inventoryMasterRefColumn {
                get {
                    return this.columninventoryMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReceptColumn {
                get {
                    return this.columnIsRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsOneReceptColumn {
                get {
                    return this.columnIsOneRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinDivisorColumn {
                get {
                    return this.columnMinDivisor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupNameColumn {
                get {
                    return this.columnFarmGroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingNameColumn {
                get {
                    return this.columnPackingName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionNameColumn {
                get {
                    return this.columnStorageConditionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupLevel2Column {
                get {
                    return this.columnFarmGroupLevel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceNameColumn {
                get {
                    return this.columnSubstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldKolColumn {
                get {
                    return this.columnOldKol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldNameColumn {
                get {
                    return this.columnOldName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumFactColumn {
                get {
                    return this.columnSumFact;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumRemColumn {
                get {
                    return this.columnSumRem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiffColumn {
                get {
                    return this.columnDiff;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRow this[int index] {
                get {
                    return ((inventoryDetailsRow)(this.Rows[index]));
                }
            }
            
            public event inventoryDetailsRowChangeEventHandler inventoryDetailsRowChanging;
            
            public event inventoryDetailsRowChangeEventHandler inventoryDetailsRowChanged;
            
            public event inventoryDetailsRowChangeEventHandler inventoryDetailsRowDeleting;
            
            public event inventoryDetailsRowChangeEventHandler inventoryDetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinventoryDetailsRow(inventoryDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRow AddinventoryDetailsRow(
                        int ProductRef, 
                        int ManufacturerRef, 
                        decimal Price, 
                        decimal Quantity, 
                        string Series, 
                        System.DateTime UseByDate, 
                        decimal QuantityFact, 
                        byte[] rowversion, 
                        inventoryMasterRow parentinventoryMasterRowByFK_inventoryMaster_inventoryDetails, 
                        string ManufacturerName, 
                        string ProductName, 
                        bool IsRecept, 
                        bool IsOneRecept, 
                        short MinDivisor, 
                        bool IsNDS, 
                        string FarmGroupName, 
                        string PackingName, 
                        string StorageConditionName, 
                        string FarmGroupLevel2, 
                        string UnitName, 
                        string SubstanceName, 
                        int OldKol, 
                        string OldName, 
                        string Note, 
                        decimal SumFact, 
                        decimal SumRem, 
                        string AuthorLastModif, 
                        System.DateTime DateLastModif, 
                        string Diff) {
                inventoryDetailsRow rowinventoryDetailsRow = ((inventoryDetailsRow)(this.NewRow()));
                rowinventoryDetailsRow.ItemArray = new object[] {
                        null,
                        ProductRef,
                        ManufacturerRef,
                        Price,
                        Quantity,
                        Series,
                        UseByDate,
                        QuantityFact,
                        rowversion,
                        parentinventoryMasterRowByFK_inventoryMaster_inventoryDetails[0],
                        ManufacturerName,
                        ProductName,
                        IsRecept,
                        IsOneRecept,
                        MinDivisor,
                        IsNDS,
                        FarmGroupName,
                        PackingName,
                        StorageConditionName,
                        FarmGroupLevel2,
                        UnitName,
                        SubstanceName,
                        OldKol,
                        OldName,
                        Note,
                        SumFact,
                        SumRem,
                        AuthorLastModif,
                        DateLastModif,
                        Diff};
                this.Rows.Add(rowinventoryDetailsRow);
                return rowinventoryDetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRow FindByID(int ID) {
                return ((inventoryDetailsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                inventoryDetailsDataTable cln = ((inventoryDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new inventoryDetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
                this.columnPrice = base.Columns["Price"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnQuantityFact = base.Columns["QuantityFact"];
                this.columnrowversion = base.Columns["rowversion"];
                this.columninventoryMasterRef = base.Columns["inventoryMasterRef"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnIsRecept = base.Columns["IsRecept"];
                this.columnIsOneRecept = base.Columns["IsOneRecept"];
                this.columnMinDivisor = base.Columns["MinDivisor"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnFarmGroupName = base.Columns["FarmGroupName"];
                this.columnPackingName = base.Columns["PackingName"];
                this.columnStorageConditionName = base.Columns["StorageConditionName"];
                this.columnFarmGroupLevel2 = base.Columns["FarmGroupLevel2"];
                this.columnUnitName = base.Columns["UnitName"];
                this.columnSubstanceName = base.Columns["SubstanceName"];
                this.columnOldKol = base.Columns["OldKol"];
                this.columnOldName = base.Columns["OldName"];
                this.columnNote = base.Columns["Note"];
                this.columnSumFact = base.Columns["SumFact"];
                this.columnSumRem = base.Columns["SumRem"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDiff = base.Columns["Diff"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.columnPrice = new System.Data.DataColumn("Price", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnQuantityFact = new System.Data.DataColumn("QuantityFact", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityFact);
                this.columnrowversion = new System.Data.DataColumn("rowversion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowversion);
                this.columninventoryMasterRef = new System.Data.DataColumn("inventoryMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columninventoryMasterRef);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnIsRecept = new System.Data.DataColumn("IsRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecept);
                this.columnIsOneRecept = new System.Data.DataColumn("IsOneRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOneRecept);
                this.columnMinDivisor = new System.Data.DataColumn("MinDivisor", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDivisor);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnFarmGroupName = new System.Data.DataColumn("FarmGroupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupName);
                this.columnPackingName = new System.Data.DataColumn("PackingName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingName);
                this.columnStorageConditionName = new System.Data.DataColumn("StorageConditionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionName);
                this.columnFarmGroupLevel2 = new System.Data.DataColumn("FarmGroupLevel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupLevel2);
                this.columnUnitName = new System.Data.DataColumn("UnitName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitName);
                this.columnSubstanceName = new System.Data.DataColumn("SubstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceName);
                this.columnOldKol = new System.Data.DataColumn("OldKol", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldKol);
                this.columnOldName = new System.Data.DataColumn("OldName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldName);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnSumFact = new System.Data.DataColumn("SumFact", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFact);
                this.columnSumRem = new System.Data.DataColumn("SumRem", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumRem);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDiff = new System.Data.DataColumn("Diff", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiff);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnSeries.MaxLength = 15;
                this.columnrowversion.ReadOnly = true;
                this.columninventoryMasterRef.AllowDBNull = false;
                this.columnManufacturerName.MaxLength = 50;
                this.columnProductName.MaxLength = 255;
                this.columnIsRecept.AllowDBNull = false;
                this.columnIsOneRecept.AllowDBNull = false;
                this.columnMinDivisor.AllowDBNull = false;
                this.columnIsNDS.AllowDBNull = false;
                this.columnFarmGroupName.AllowDBNull = false;
                this.columnFarmGroupName.MaxLength = 50;
                this.columnPackingName.AllowDBNull = false;
                this.columnPackingName.MaxLength = 50;
                this.columnStorageConditionName.AllowDBNull = false;
                this.columnStorageConditionName.MaxLength = 50;
                this.columnFarmGroupLevel2.AllowDBNull = false;
                this.columnFarmGroupLevel2.MaxLength = 50;
                this.columnUnitName.AllowDBNull = false;
                this.columnUnitName.MaxLength = 10;
                this.columnSubstanceName.AllowDBNull = false;
                this.columnSubstanceName.MaxLength = 50;
                this.columnOldKol.AllowDBNull = false;
                this.columnOldName.AllowDBNull = false;
                this.columnOldName.MaxLength = 100;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnSumFact.ReadOnly = true;
                this.columnSumRem.ReadOnly = true;
                this.columnDateLastModif.ReadOnly = true;
                this.columnDiff.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRow NewinventoryDetailsRow() {
                return ((inventoryDetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new inventoryDetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(inventoryDetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.SumFactColumn.Expression = "Price*QuantityFact";
                this.SumRemColumn.Expression = "Quantity*Price";
                this.DiffColumn.Expression = "Quantity-QuantityFact";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.inventoryDetailsRowChanged != null)) {
                    this.inventoryDetailsRowChanged(this, new inventoryDetailsRowChangeEvent(((inventoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.inventoryDetailsRowChanging != null)) {
                    this.inventoryDetailsRowChanging(this, new inventoryDetailsRowChangeEvent(((inventoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.inventoryDetailsRowDeleted != null)) {
                    this.inventoryDetailsRowDeleted(this, new inventoryDetailsRowChangeEvent(((inventoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.inventoryDetailsRowDeleting != null)) {
                    this.inventoryDetailsRowDeleting(this, new inventoryDetailsRowChangeEvent(((inventoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinventoryDetailsRow(inventoryDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "inventoryDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CashRow : System.Data.DataRow {
            
            private CashDataTable tableCash;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CashRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCash = ((CashDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCash.IDColumn]));
                }
                set {
                    this[this.tableCash.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumZ {
                get {
                    return ((int)(this[this.tableCash.NumZColumn]));
                }
                set {
                    this[this.tableCash.NumZColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((System.DateTime)(this[this.tableCash.DateColumn]));
                }
                set {
                    this[this.tableCash.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BalanceBegin {
                get {
                    return ((decimal)(this[this.tableCash.BalanceBeginColumn]));
                }
                set {
                    this[this.tableCash.BalanceBeginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OfIncome {
                get {
                    return ((decimal)(this[this.tableCash.OfIncomeColumn]));
                }
                set {
                    this[this.tableCash.OfIncomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OfExpend {
                get {
                    return ((decimal)(this[this.tableCash.OfExpendColumn]));
                }
                set {
                    this[this.tableCash.OfExpendColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Income {
                get {
                    return ((decimal)(this[this.tableCash.IncomeColumn]));
                }
                set {
                    this[this.tableCash.IncomeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Expend {
                get {
                    return ((decimal)(this[this.tableCash.ExpendColumn]));
                }
                set {
                    this[this.tableCash.ExpendColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BalanceEnd {
                get {
                    return ((decimal)(this[this.tableCash.BalanceEndColumn]));
                }
                set {
                    this[this.tableCash.BalanceEndColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClosed {
                get {
                    return ((bool)(this[this.tableCash.IsClosedColumn]));
                }
                set {
                    this[this.tableCash.IsClosedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableCash.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Cash\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCash.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCash.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableCash.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DocumentTypeRow : System.Data.DataRow {
            
            private DocumentTypeDataTable tableDocumentType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocumentType = ((DocumentTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableDocumentType.IDColumn]));
                }
                set {
                    this[this.tableDocumentType.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableDocumentType.NameColumn]));
                }
                set {
                    this[this.tableDocumentType.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInternal {
                get {
                    return ((bool)(this[this.tableDocumentType.IsInternalColumn]));
                }
                set {
                    this[this.tableDocumentType.IsInternalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableDocumentType.AuthorCreateColumn]));
                }
                set {
                    this[this.tableDocumentType.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableDocumentType.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableDocumentType.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableDocumentType.DateLastModifColumn]));
                }
                set {
                    this[this.tableDocumentType.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableDocumentType.DateCreateColumn]));
                }
                set {
                    this[this.tableDocumentType.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableDocumentType.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'DocumentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocumentType.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDocumentType.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableDocumentType.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRows() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_DocumentType"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceMasterRow : System.Data.DataRow {
            
            private InvoiceMasterDataTable tableInvoiceMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceMaster = ((InvoiceMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableInvoiceMaster.IDColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableInvoiceMaster.NumberColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceMaster.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.OrganisationRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.OrganisationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteReceiptMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteReceiptMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteReceiptMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableInvoiceMaster.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Sum {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.SumColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.SumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Nds {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.NdsColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NdsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableInvoiceMaster.NoteColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PeriodsRef {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.PeriodsRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.PeriodsRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceMaster.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceMaster.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceMaster.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceMaster.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableInvoiceMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecalcSum {
                get {
                    try {
                        return ((bool)(this[this.tableInvoiceMaster.RecalcSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecalcSum\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.RecalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceMaster.ExtraColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Extra\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Discount {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceMaster.DiscountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Discount\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.DiscountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumCheck {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceMaster.NumCheckColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumCheck\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.NumCheckColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableInvoiceMaster.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableInvoiceMaster.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableInvoiceMaster.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableInvoiceMaster.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableInvoiceMaster.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableInvoiceMaster.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableInvoiceMaster.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableInvoiceMaster.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableInvoiceMaster.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableInvoiceMaster.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInvoiceMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableInvoiceMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecalcSumNull() {
                return this.IsNull(this.tableInvoiceMaster.RecalcSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecalcSumNull() {
                this[this.tableInvoiceMaster.RecalcSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraNull() {
                return this.IsNull(this.tableInvoiceMaster.ExtraColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraNull() {
                this[this.tableInvoiceMaster.ExtraColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountNull() {
                return this.IsNull(this.tableInvoiceMaster.DiscountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountNull() {
                this[this.tableInvoiceMaster.DiscountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumCheckNull() {
                return this.IsNull(this.tableInvoiceMaster.NumCheckColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumCheckNull() {
                this[this.tableInvoiceMaster.NumCheckColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceDetail_InvoiceMaster"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceDetailRow : System.Data.DataRow {
            
            private InvoiceDetailDataTable tableInvoiceDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceDetail = ((InvoiceDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableInvoiceDetail.IDColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.InvoiceMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.InvoiceMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.QuantityColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.PricePurchaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PricePurchase\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DiscountSum {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.DiscountSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscountSum\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DiscountSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchaseNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.PurchaseNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchaseNDS\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.PurchaseNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetail {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.PriceRetailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PriceRetail\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.PriceRetailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.RetailNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RetailNDS\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.RetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetailNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.PriceRetailNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PriceRetailNDS\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.PriceRetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalReceiptDetailRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.LocalReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.LocalReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceDetailRef {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RemoteInvoiceDetailRef\' in table \'InvoiceDetail\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.NoteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Note\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceDetail.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceDetail.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableInvoiceDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailSum {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.RetailSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RetailSum\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.RetailSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.ExtraColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Extra\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Discount {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.DiscountColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.DiscountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetail.DocumentTypeRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DocumentTypeRef\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Article {
                get {
                    return ((int)(this[this.tableInvoiceDetail.ArticleColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.ArticleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetail.ProductRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductRef\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.SeriesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Series\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceDetail.UseByDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseByDate\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.ManufacturerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumCheck {
                get {
                    try {
                        return ((int)(this[this.tableInvoiceDetail.NumCheckColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumCheck\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.NumCheckColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceDetail.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CalcSum {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.CalcSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CalcSum\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.CalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow InvoiceMasterRow {
                get {
                    return ((InvoiceMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceDetail_InvoiceMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceDetail_InvoiceMaster"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow RemainsRow {
                get {
                    return ((RemainsRow)(this.GetParentRow(this.Table.ParentRelations["Remains_InvoiceDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Remains_InvoiceDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow ReceiptRemainsRow {
                get {
                    return ((ReceiptRemainsRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceDetail_ReceiptRemains"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceDetail_ReceiptRemains"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["InvoiceDetail_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["InvoiceDetail_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPricePurchaseNull() {
                return this.IsNull(this.tableInvoiceDetail.PricePurchaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPricePurchaseNull() {
                this[this.tableInvoiceDetail.PricePurchaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountSumNull() {
                return this.IsNull(this.tableInvoiceDetail.DiscountSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountSumNull() {
                this[this.tableInvoiceDetail.DiscountSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaseNDSNull() {
                return this.IsNull(this.tableInvoiceDetail.PurchaseNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchaseNDSNull() {
                this[this.tableInvoiceDetail.PurchaseNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceRetailNull() {
                return this.IsNull(this.tableInvoiceDetail.PriceRetailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceRetailNull() {
                this[this.tableInvoiceDetail.PriceRetailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetailNDSNull() {
                return this.IsNull(this.tableInvoiceDetail.RetailNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetailNDSNull() {
                this[this.tableInvoiceDetail.RetailNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceRetailNDSNull() {
                return this.IsNull(this.tableInvoiceDetail.PriceRetailNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceRetailNDSNull() {
                this[this.tableInvoiceDetail.PriceRetailNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemoteInvoiceDetailRefNull() {
                return this.IsNull(this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemoteInvoiceDetailRefNull() {
                this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableInvoiceDetail.NoteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableInvoiceDetail.NoteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableInvoiceDetail.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableInvoiceDetail.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableInvoiceDetail.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableInvoiceDetail.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableInvoiceDetail.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableInvoiceDetail.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableInvoiceDetail.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableInvoiceDetail.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInvoiceDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableInvoiceDetail.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetailSumNull() {
                return this.IsNull(this.tableInvoiceDetail.RetailSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetailSumNull() {
                this[this.tableInvoiceDetail.RetailSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraNull() {
                return this.IsNull(this.tableInvoiceDetail.ExtraColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraNull() {
                this[this.tableInvoiceDetail.ExtraColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeRefNull() {
                return this.IsNull(this.tableInvoiceDetail.DocumentTypeRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeRefNull() {
                this[this.tableInvoiceDetail.DocumentTypeRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductRefNull() {
                return this.IsNull(this.tableInvoiceDetail.ProductRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductRefNull() {
                this[this.tableInvoiceDetail.ProductRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNull() {
                return this.IsNull(this.tableInvoiceDetail.SeriesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNull() {
                this[this.tableInvoiceDetail.SeriesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseByDateNull() {
                return this.IsNull(this.tableInvoiceDetail.UseByDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseByDateNull() {
                this[this.tableInvoiceDetail.UseByDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableInvoiceDetail.ManufacturerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableInvoiceDetail.ManufacturerNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableInvoiceDetail.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableInvoiceDetail.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumCheckNull() {
                return this.IsNull(this.tableInvoiceDetail.NumCheckColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumCheckNull() {
                this[this.tableInvoiceDetail.NumCheckColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableInvoiceDetail.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableInvoiceDetail.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcSumNull() {
                return this.IsNull(this.tableInvoiceDetail.CalcSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcSumNull() {
                this[this.tableInvoiceDetail.CalcSumColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PeriodsRow : System.Data.DataRow {
            
            private PeriodsDataTable tablePeriods;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PeriodsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePeriods = ((PeriodsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePeriods.IDColumn]));
                }
                set {
                    this[this.tablePeriods.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((System.DateTime)(this[this.tablePeriods.StartDateColumn]));
                }
                set {
                    this[this.tablePeriods.StartDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClosedDate {
                get {
                    return ((System.DateTime)(this[this.tablePeriods.ClosedDateColumn]));
                }
                set {
                    this[this.tablePeriods.ClosedDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isClosed {
                get {
                    return ((bool)(this[this.tablePeriods.isClosedColumn]));
                }
                set {
                    this[this.tablePeriods.isClosedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tablePeriods.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Periods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePeriods.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePeriods.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tablePeriods.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptDetailRow : System.Data.DataRow {
            
            private ReceiptDetailDataTable tableReceiptDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptDetail = ((ReceiptDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptDetail.IDColumn]));
                }
                set {
                    this[this.tableReceiptDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptMasterRef {
                get {
                    return ((int)(this[this.tableReceiptDetail.ReceiptMasterRefColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ReceiptMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tableReceiptDetail.ProductRefColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    return ((string)(this[this.tableReceiptDetail.SeriesColumn]));
                }
                set {
                    this[this.tableReceiptDetail.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptDetail.UseByDateColumn]));
                }
                set {
                    this[this.tableReceiptDetail.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.QuantityColumn]));
                }
                set {
                    this[this.tableReceiptDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.PricePurchaseColumn]));
                }
                set {
                    this[this.tableReceiptDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchSum {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.PurchSumColumn]));
                }
                set {
                    this[this.tableReceiptDetail.PurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchNDS {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.PurchNDSColumn]));
                }
                set {
                    this[this.tableReceiptDetail.PurchNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesNDS {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.SalesNDSColumn]));
                }
                set {
                    this[this.tableReceiptDetail.SalesNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesPrice {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.SalesPriceColumn]));
                }
                set {
                    this[this.tableReceiptDetail.SalesPriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesSum {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.SalesSumColumn]));
                }
                set {
                    this[this.tableReceiptDetail.SalesSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableReceiptDetail.NoteColumn]));
                }
                set {
                    this[this.tableReceiptDetail.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableReceiptDetail.AuthorCreateColumn]));
                }
                set {
                    this[this.tableReceiptDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableReceiptDetail.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableReceiptDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableReceiptDetail.DateLastModifColumn]));
                }
                set {
                    this[this.tableReceiptDetail.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptDetail.DateCreateColumn]));
                }
                set {
                    this[this.tableReceiptDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerRef {
                get {
                    return ((int)(this[this.tableReceiptDetail.ManufacturerRefColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.ExtraColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptDetail.DocumentTypeRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DocumentTypeRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    return ((string)(this[this.tableReceiptDetail.ManufacturerNameColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.CountryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CountryName\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.CountryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow ReceiptMasterRow {
                get {
                    return ((ReceiptMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptDetail_ReceiptMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptDetail_ReceiptMaster"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow RemainsRow {
                get {
                    return ((RemainsRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptDetail_Remains"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptDetail_Remains"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptDetail.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeRefNull() {
                return this.IsNull(this.tableReceiptDetail.DocumentTypeRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeRefNull() {
                this[this.tableReceiptDetail.DocumentTypeRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableReceiptDetail.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableReceiptDetail.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tableReceiptDetail.CountryNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tableReceiptDetail.CountryNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptMasterRow : System.Data.DataRow {
            
            private ReceiptMasterDataTable tableReceiptMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptMaster = ((ReceiptMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptMaster.IDColumn]));
                }
                set {
                    this[this.tableReceiptMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableReceiptMaster.NumberColumn]));
                }
                set {
                    this[this.tableReceiptMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableReceiptMaster.NoteColumn]));
                }
                set {
                    this[this.tableReceiptMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptMaster.DocDateColumn]));
                }
                set {
                    this[this.tableReceiptMaster.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.MainStockRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderStockRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.SenderStockRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SenderStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesSum {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.SalesSumColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SalesSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchSum {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.PurchSumColumn]));
                }
                set {
                    this[this.tableReceiptMaster.PurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchNDS {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.PurchNDSColumn]));
                }
                set {
                    this[this.tableReceiptMaster.PurchNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesNDS {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.SalesNDSColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SalesNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableReceiptMaster.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableReceiptMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableReceiptMaster.AuthorCreateColumn]));
                }
                set {
                    this[this.tableReceiptMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableReceiptMaster.DateLastModifColumn]));
                }
                set {
                    this[this.tableReceiptMaster.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableReceiptMaster.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableReceiptMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptMaster.DateCreateColumn]));
                }
                set {
                    this[this.tableReceiptMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecalcSum {
                get {
                    return ((bool)(this[this.tableReceiptMaster.RecalcSumColumn]));
                }
                set {
                    this[this.tableReceiptMaster.RecalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PeriodsRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.PeriodsRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.PeriodsRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.ExtraColumn]));
                }
                set {
                    this[this.tableReceiptMaster.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow DocumentTypeRow {
                get {
                    return ((DocumentTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_DocumentType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_DocumentType"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_ReceiptMaster_Stock {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Stock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Stock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_ReceiptMaster_Stock1 {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Stock1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Stock1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptDetail_ReceiptMaster"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptRemainsRow : System.Data.DataRow {
            
            private ReceiptRemainsDataTable tableReceiptRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptRemainsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptRemains = ((ReceiptRemainsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptDetailRef {
                get {
                    return ((int)(this[this.tableReceiptRemains.ReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableReceiptRemains.ReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityReceipt {
                get {
                    return ((decimal)(this[this.tableReceiptRemains.QuantityReceiptColumn]));
                }
                set {
                    this[this.tableReceiptRemains.QuantityReceiptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityRemains {
                get {
                    return ((decimal)(this[this.tableReceiptRemains.QuantityRemainsColumn]));
                }
                set {
                    this[this.tableReceiptRemains.QuantityRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableReceiptRemains.DateLastModifColumn]));
                }
                set {
                    this[this.tableReceiptRemains.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableReceiptRemains.AuthorCreateColumn]));
                }
                set {
                    this[this.tableReceiptRemains.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableReceiptRemains.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableReceiptRemains.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptRemains.DateCreateColumn]));
                }
                set {
                    this[this.tableReceiptRemains.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptRemains.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptRemains.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptRemains.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptRemains.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceDetail_ReceiptRemains"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductRow : System.Data.DataRow {
            
            private ProductDataTable tableProduct;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct = ((ProductDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProduct.IDColumn]));
                }
                set {
                    this[this.tableProduct.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProduct.NameColumn]));
                }
                set {
                    this[this.tableProduct.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmallName {
                get {
                    return ((string)(this[this.tableProduct.SmallNameColumn]));
                }
                set {
                    this[this.tableProduct.SmallNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceManufact {
                get {
                    return ((decimal)(this[this.tableProduct.PriceManufactColumn]));
                }
                set {
                    this[this.tableProduct.PriceManufactColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitRef {
                get {
                    return ((int)(this[this.tableProduct.UnitRefColumn]));
                }
                set {
                    this[this.tableProduct.UnitRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackingRef {
                get {
                    return ((int)(this[this.tableProduct.PackingRefColumn]));
                }
                set {
                    this[this.tableProduct.PackingRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StorageConditionRef {
                get {
                    return ((int)(this[this.tableProduct.StorageConditionRefColumn]));
                }
                set {
                    this[this.tableProduct.StorageConditionRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubstanceRef {
                get {
                    return ((int)(this[this.tableProduct.SubstanceRefColumn]));
                }
                set {
                    this[this.tableProduct.SubstanceRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FarmGrouplevel2Ref {
                get {
                    return ((int)(this[this.tableProduct.FarmGrouplevel2RefColumn]));
                }
                set {
                    this[this.tableProduct.FarmGrouplevel2RefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecept {
                get {
                    return ((bool)(this[this.tableProduct.IsReceptColumn]));
                }
                set {
                    this[this.tableProduct.IsReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneRecept {
                get {
                    return ((bool)(this[this.tableProduct.IsOneReceptColumn]));
                }
                set {
                    this[this.tableProduct.IsOneReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHide {
                get {
                    return ((bool)(this[this.tableProduct.IsHideColumn]));
                }
                set {
                    this[this.tableProduct.IsHideColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MinDivisor {
                get {
                    return ((short)(this[this.tableProduct.MinDivisorColumn]));
                }
                set {
                    this[this.tableProduct.MinDivisorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableProduct.IsNDSColumn]));
                }
                set {
                    this[this.tableProduct.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableProduct.AuthorCreateColumn]));
                }
                set {
                    this[this.tableProduct.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableProduct.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableProduct.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableProduct.DateCreateColumn]));
                }
                set {
                    this[this.tableProduct.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableProduct.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupName {
                get {
                    return ((string)(this[this.tableProduct.FarmGroupNameColumn]));
                }
                set {
                    this[this.tableProduct.FarmGroupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackingName {
                get {
                    return ((string)(this[this.tableProduct.PackingNameColumn]));
                }
                set {
                    this[this.tableProduct.PackingNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StorageConditionName {
                get {
                    return ((string)(this[this.tableProduct.StorageConditionNameColumn]));
                }
                set {
                    this[this.tableProduct.StorageConditionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupLevel2 {
                get {
                    return ((string)(this[this.tableProduct.FarmGroupLevel2Column]));
                }
                set {
                    this[this.tableProduct.FarmGroupLevel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitName {
                get {
                    return ((string)(this[this.tableProduct.UnitNameColumn]));
                }
                set {
                    this[this.tableProduct.UnitNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubstanceName {
                get {
                    return ((string)(this[this.tableProduct.SubstanceNameColumn]));
                }
                set {
                    this[this.tableProduct.SubstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableProduct.DateLastModifColumn]));
                }
                set {
                    this[this.tableProduct.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableProduct.NoteColumn]));
                }
                set {
                    this[this.tableProduct.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldName {
                get {
                    return ((string)(this[this.tableProduct.OldNameColumn]));
                }
                set {
                    this[this.tableProduct.OldNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldKod {
                get {
                    return ((int)(this[this.tableProduct.OldKodColumn]));
                }
                set {
                    this[this.tableProduct.OldKodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldKol {
                get {
                    return ((int)(this[this.tableProduct.OldKolColumn]));
                }
                set {
                    this[this.tableProduct.OldKolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableProduct.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableProduct.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["Product_ReceiptDetail"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["InvoiceDetail_Product"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(base.GetChildRows(this.Table.ChildRelations["Product_Orders"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow[] GetRemainsRows() {
                return ((RemainsRow[])(base.GetChildRows(this.Table.ChildRelations["Product_Remains"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RemainsRow : System.Data.DataRow {
            
            private RemainsDataTable tableRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemainsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRemains = ((RemainsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tableRemains.ProductRefColumn]));
                }
                set {
                    this[this.tableRemains.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    return ((string)(this[this.tableRemains.SeriesColumn]));
                }
                set {
                    this[this.tableRemains.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    return ((System.DateTime)(this[this.tableRemains.UseByDateColumn]));
                }
                set {
                    this[this.tableRemains.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableRemains.PricePurchaseColumn]));
                }
                set {
                    this[this.tableRemains.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableRemains.QuantityColumn]));
                }
                set {
                    this[this.tableRemains.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableRemains.DateLastModifColumn]));
                }
                set {
                    this[this.tableRemains.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableRemains.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableRemains.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    return ((string)(this[this.tableRemains.ManufacturerNameColumn]));
                }
                set {
                    this[this.tableRemains.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerRef {
                get {
                    return ((int)(this[this.tableRemains.ManufacturerRefColumn]));
                }
                set {
                    this[this.tableRemains.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    return ((string)(this[this.tableRemains.CountryNameColumn]));
                }
                set {
                    this[this.tableRemains.CountryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    return ((System.DateTime)(this[this.tableRemains.DocDateColumn]));
                }
                set {
                    this[this.tableRemains.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityRemains {
                get {
                    return ((decimal)(this[this.tableRemains.QuantityRemainsColumn]));
                }
                set {
                    this[this.tableRemains.QuantityRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    return ((int)(this[this.tableRemains.MainStockRefColumn]));
                }
                set {
                    this[this.tableRemains.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptDetailRef {
                get {
                    return ((int)(this[this.tableRemains.ReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableRemains.ReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableRemains.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumRemains {
                get {
                    try {
                        return ((decimal)(this[this.tableRemains.SumRemainsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SumRemains\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.SumRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_Remains"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_Remains"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableRemains.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableRemains.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumRemainsNull() {
                return this.IsNull(this.tableRemains.SumRemainsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumRemainsNull() {
                this[this.tableRemains.SumRemainsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["Remains_InvoiceDetail"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptDetail_Remains"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockRow : System.Data.DataRow {
            
            private StockDataTable tableStock;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStock = ((StockDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableStock.IDColumn]));
                }
                set {
                    this[this.tableStock.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableStock.NameColumn]));
                }
                set {
                    this[this.tableStock.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableStock.IsNDSColumn]));
                }
                set {
                    this[this.tableStock.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableStock.AuthorCreateColumn]));
                }
                set {
                    this[this.tableStock.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableStock.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableStock.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableStock.DateCreateColumn]));
                }
                set {
                    this[this.tableStock.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableStock.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Stock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStock.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePutletRef {
                get {
                    return ((int)(this[this.tableStock.TradePutletRefColumn]));
                }
                set {
                    this[this.tableStock.TradePutletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isLocal {
                get {
                    try {
                        return ((int)(this[this.tableStock.isLocalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'isLocal\' in table \'Stock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStock.isLocalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableStock.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableStock.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisLocalNull() {
                return this.IsNull(this.tableStock.isLocalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisLocalNull() {
                this[this.tableStock.isLocalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRowsByFK_ReceiptMaster_Stock() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Stock"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRowsByFK_ReceiptMaster_Stock1() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Stock1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LocalSettingRow : System.Data.DataRow {
            
            private LocalSettingDataTable tableLocalSetting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LocalSettingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLocalSetting = ((LocalSettingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableLocalSetting.idColumn]));
                }
                set {
                    this[this.tableLocalSetting.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NDS {
                get {
                    return ((int)(this[this.tableLocalSetting.NDSColumn]));
                }
                set {
                    this[this.tableLocalSetting.NDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainTradePutletRef {
                get {
                    return ((int)(this[this.tableLocalSetting.MainTradePutletRefColumn]));
                }
                set {
                    this[this.tableLocalSetting.MainTradePutletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrDiscount {
                get {
                    return ((int)(this[this.tableLocalSetting.PrDiscountColumn]));
                }
                set {
                    this[this.tableLocalSetting.PrDiscountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Printer {
                get {
                    return ((string)(this[this.tableLocalSetting.PrinterColumn]));
                }
                set {
                    this[this.tableLocalSetting.PrinterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Num {
                get {
                    return ((short)(this[this.tableLocalSetting.NumColumn]));
                }
                set {
                    this[this.tableLocalSetting.NumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    return ((string)(this[this.tableLocalSetting.FullNameColumn]));
                }
                set {
                    this[this.tableLocalSetting.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Password {
                get {
                    try {
                        return ((int)(this[this.tableLocalSetting.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'LocalSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocalSetting.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLocalSetting.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'LocalSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLocalSetting.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableLocalSetting.PasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableLocalSetting.PasswordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLocalSetting.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLocalSetting.NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrdersRow : System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOrders.IDColumn]));
                }
                set {
                    this[this.tableOrders.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePupletRef {
                get {
                    try {
                        return ((int)(this[this.tableOrders.TradePupletRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TradePupletRef\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.TradePupletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tableOrders.ProductRefColumn]));
                }
                set {
                    this[this.tableOrders.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOrder {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.DateOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateOrder\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DateOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableOrders.QuantityColumn]));
                }
                set {
                    this[this.tableOrders.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableOrders.PriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Price\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.PriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Reserved {
                get {
                    try {
                        return ((decimal)(this[this.tableOrders.ReservedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reserved\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.ReservedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityNow {
                get {
                    try {
                        return ((decimal)(this[this.tableOrders.QuantityNowColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuantityNow\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.QuantityNowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isClose {
                get {
                    return ((bool)(this[this.tableOrders.isCloseColumn]));
                }
                set {
                    this[this.tableOrders.isCloseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableOrders.NoteColumn]));
                }
                set {
                    this[this.tableOrders.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableOrders.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableOrders.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableOrders.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_Orders"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTradePupletRefNull() {
                return this.IsNull(this.tableOrders.TradePupletRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTradePupletRefNull() {
                this[this.tableOrders.TradePupletRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOrderNull() {
                return this.IsNull(this.tableOrders.DateOrderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOrderNull() {
                this[this.tableOrders.DateOrderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableOrders.PriceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableOrders.PriceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReservedNull() {
                return this.IsNull(this.tableOrders.ReservedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReservedNull() {
                this[this.tableOrders.ReservedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNowNull() {
                return this.IsNull(this.tableOrders.QuantityNowColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNowNull() {
                this[this.tableOrders.QuantityNowColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableOrders.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableOrders.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableOrders.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableOrders.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableOrders.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableOrders.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableOrders.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableOrders.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableOrders.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableOrders.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class inventoryMasterRow : System.Data.DataRow {
            
            private inventoryMasterDataTable tableinventoryMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal inventoryMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinventoryMaster = ((inventoryMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableinventoryMaster.IDColumn]));
                }
                set {
                    this[this.tableinventoryMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((System.DateTime)(this[this.tableinventoryMaster.DateColumn]));
                }
                set {
                    this[this.tableinventoryMaster.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableinventoryMaster.NoteColumn]));
                }
                set {
                    this[this.tableinventoryMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] rowversion {
                get {
                    try {
                        return ((byte[])(this[this.tableinventoryMaster.rowversionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'rowversion\' in table \'inventoryMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryMaster.rowversionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableinventoryMaster.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'inventoryMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClose {
                get {
                    return ((bool)(this[this.tableinventoryMaster.IsCloseColumn]));
                }
                set {
                    this[this.tableinventoryMaster.IsCloseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLatModif {
                get {
                    try {
                        return ((string)(this[this.tableinventoryMaster.AuthorLatModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLatModif\' in table \'inventoryMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryMaster.AuthorLatModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableinventoryMaster.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'inventoryMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryMaster.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowversionNull() {
                return this.IsNull(this.tableinventoryMaster.rowversionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowversionNull() {
                this[this.tableinventoryMaster.rowversionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableinventoryMaster.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableinventoryMaster.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLatModifNull() {
                return this.IsNull(this.tableinventoryMaster.AuthorLatModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLatModifNull() {
                this[this.tableinventoryMaster.AuthorLatModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableinventoryMaster.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableinventoryMaster.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRow[] GetinventoryDetailsRows() {
                return ((inventoryDetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_inventoryMaster_inventoryDetails"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class inventoryDetailsRow : System.Data.DataRow {
            
            private inventoryDetailsDataTable tableinventoryDetails;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal inventoryDetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinventoryDetails = ((inventoryDetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableinventoryDetails.IDColumn]));
                }
                set {
                    this[this.tableinventoryDetails.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    try {
                        return ((int)(this[this.tableinventoryDetails.ProductRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductRef\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerRef {
                get {
                    try {
                        return ((int)(this[this.tableinventoryDetails.ManufacturerRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerRef\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    try {
                        return ((decimal)(this[this.tableinventoryDetails.PriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Price\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.PriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableinventoryDetails.QuantityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Quantity\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    try {
                        return ((string)(this[this.tableinventoryDetails.SeriesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Series\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableinventoryDetails.UseByDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseByDate\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityFact {
                get {
                    try {
                        return ((decimal)(this[this.tableinventoryDetails.QuantityFactColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'QuantityFact\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.QuantityFactColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] rowversion {
                get {
                    try {
                        return ((byte[])(this[this.tableinventoryDetails.rowversionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'rowversion\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.rowversionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inventoryMasterRef {
                get {
                    return ((int)(this[this.tableinventoryDetails.inventoryMasterRefColumn]));
                }
                set {
                    this[this.tableinventoryDetails.inventoryMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableinventoryDetails.ManufacturerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableinventoryDetails.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecept {
                get {
                    return ((bool)(this[this.tableinventoryDetails.IsReceptColumn]));
                }
                set {
                    this[this.tableinventoryDetails.IsReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneRecept {
                get {
                    return ((bool)(this[this.tableinventoryDetails.IsOneReceptColumn]));
                }
                set {
                    this[this.tableinventoryDetails.IsOneReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MinDivisor {
                get {
                    return ((short)(this[this.tableinventoryDetails.MinDivisorColumn]));
                }
                set {
                    this[this.tableinventoryDetails.MinDivisorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableinventoryDetails.IsNDSColumn]));
                }
                set {
                    this[this.tableinventoryDetails.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupName {
                get {
                    return ((string)(this[this.tableinventoryDetails.FarmGroupNameColumn]));
                }
                set {
                    this[this.tableinventoryDetails.FarmGroupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackingName {
                get {
                    return ((string)(this[this.tableinventoryDetails.PackingNameColumn]));
                }
                set {
                    this[this.tableinventoryDetails.PackingNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StorageConditionName {
                get {
                    return ((string)(this[this.tableinventoryDetails.StorageConditionNameColumn]));
                }
                set {
                    this[this.tableinventoryDetails.StorageConditionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupLevel2 {
                get {
                    return ((string)(this[this.tableinventoryDetails.FarmGroupLevel2Column]));
                }
                set {
                    this[this.tableinventoryDetails.FarmGroupLevel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitName {
                get {
                    return ((string)(this[this.tableinventoryDetails.UnitNameColumn]));
                }
                set {
                    this[this.tableinventoryDetails.UnitNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubstanceName {
                get {
                    return ((string)(this[this.tableinventoryDetails.SubstanceNameColumn]));
                }
                set {
                    this[this.tableinventoryDetails.SubstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldKol {
                get {
                    return ((int)(this[this.tableinventoryDetails.OldKolColumn]));
                }
                set {
                    this[this.tableinventoryDetails.OldKolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldName {
                get {
                    return ((string)(this[this.tableinventoryDetails.OldNameColumn]));
                }
                set {
                    this[this.tableinventoryDetails.OldNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableinventoryDetails.NoteColumn]));
                }
                set {
                    this[this.tableinventoryDetails.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumFact {
                get {
                    try {
                        return ((decimal)(this[this.tableinventoryDetails.SumFactColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SumFact\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.SumFactColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumRem {
                get {
                    try {
                        return ((decimal)(this[this.tableinventoryDetails.SumRemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SumRem\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.SumRemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableinventoryDetails.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableinventoryDetails.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Diff {
                get {
                    try {
                        return ((string)(this[this.tableinventoryDetails.DiffColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Diff\' in table \'inventoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinventoryDetails.DiffColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRow inventoryMasterRow {
                get {
                    return ((inventoryMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_inventoryMaster_inventoryDetails"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_inventoryMaster_inventoryDetails"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductRefNull() {
                return this.IsNull(this.tableinventoryDetails.ProductRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductRefNull() {
                this[this.tableinventoryDetails.ProductRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerRefNull() {
                return this.IsNull(this.tableinventoryDetails.ManufacturerRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerRefNull() {
                this[this.tableinventoryDetails.ManufacturerRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableinventoryDetails.PriceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableinventoryDetails.PriceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableinventoryDetails.QuantityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableinventoryDetails.QuantityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNull() {
                return this.IsNull(this.tableinventoryDetails.SeriesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNull() {
                this[this.tableinventoryDetails.SeriesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseByDateNull() {
                return this.IsNull(this.tableinventoryDetails.UseByDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseByDateNull() {
                this[this.tableinventoryDetails.UseByDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityFactNull() {
                return this.IsNull(this.tableinventoryDetails.QuantityFactColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityFactNull() {
                this[this.tableinventoryDetails.QuantityFactColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowversionNull() {
                return this.IsNull(this.tableinventoryDetails.rowversionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowversionNull() {
                this[this.tableinventoryDetails.rowversionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableinventoryDetails.ManufacturerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableinventoryDetails.ManufacturerNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableinventoryDetails.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableinventoryDetails.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFactNull() {
                return this.IsNull(this.tableinventoryDetails.SumFactColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFactNull() {
                this[this.tableinventoryDetails.SumFactColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumRemNull() {
                return this.IsNull(this.tableinventoryDetails.SumRemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumRemNull() {
                this[this.tableinventoryDetails.SumRemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableinventoryDetails.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableinventoryDetails.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableinventoryDetails.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableinventoryDetails.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiffNull() {
                return this.IsNull(this.tableinventoryDetails.DiffColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiffNull() {
                this[this.tableinventoryDetails.DiffColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CashRowChangeEvent : System.EventArgs {
            
            private CashRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashRowChangeEvent(CashRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CashRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DocumentTypeRowChangeEvent : System.EventArgs {
            
            private DocumentTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRowChangeEvent(DocumentTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceMasterRowChangeEvent : System.EventArgs {
            
            private InvoiceMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRowChangeEvent(InvoiceMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceDetailRowChangeEvent : System.EventArgs {
            
            private InvoiceDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRowChangeEvent(InvoiceDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PeriodsRowChangeEvent : System.EventArgs {
            
            private PeriodsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRowChangeEvent(PeriodsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptDetailRowChangeEvent : System.EventArgs {
            
            private ReceiptDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRowChangeEvent(ReceiptDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptMasterRowChangeEvent : System.EventArgs {
            
            private ReceiptMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRowChangeEvent(ReceiptMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptRemainsRowChangeEvent : System.EventArgs {
            
            private ReceiptRemainsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRowChangeEvent(ReceiptRemainsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductRowChangeEvent : System.EventArgs {
            
            private ProductRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRowChangeEvent(ProductRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RemainsRowChangeEvent : System.EventArgs {
            
            private RemainsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRowChangeEvent(RemainsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockRowChangeEvent : System.EventArgs {
            
            private StockRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRowChangeEvent(StockRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LocalSettingRowChangeEvent : System.EventArgs {
            
            private LocalSettingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingRowChangeEvent(LocalSettingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LocalSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrdersRowChangeEvent : System.EventArgs {
            
            private OrdersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRowChangeEvent(OrdersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class inventoryMasterRowChangeEvent : System.EventArgs {
            
            private inventoryMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRowChangeEvent(inventoryMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class inventoryDetailsRowChangeEvent : System.EventArgs {
            
            private inventoryDetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRowChangeEvent(inventoryDetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public inventoryDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RetailTradeOrders.MDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CashTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CashTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Cash";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("NumZ", "NumZ");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("BalanceBegin", "BalanceBegin");
            tableMapping.ColumnMappings.Add("OfIncome", "OfIncome");
            tableMapping.ColumnMappings.Add("OfExpend", "OfExpend");
            tableMapping.ColumnMappings.Add("Income", "Income");
            tableMapping.ColumnMappings.Add("Expend", "Expend");
            tableMapping.ColumnMappings.Add("BalanceEnd", "BalanceEnd");
            tableMapping.ColumnMappings.Add("IsClosed", "IsClosed");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "CashDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "CashInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumZ", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "NumZ", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BalanceBegin", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "BalanceBegin", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OfIncome", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "OfIncome", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OfExpend", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "OfExpend", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Income", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "Income", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Expend", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "Expend", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BalanceEnd", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "BalanceEnd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsClosed", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsClosed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "CashUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumZ", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "NumZ", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BalanceBegin", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "BalanceBegin", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OfIncome", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "OfIncome", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OfExpend", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "OfExpend", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Income", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "Income", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Expend", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "Expend", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BalanceEnd", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "BalanceEnd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsClosed", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsClosed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "CashSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ClosePeriod";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@NewNumZ", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.CashSelectByNumCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numz", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.CashDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.CashDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.CashDataTable dataTable = new MDataSet.CashDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByNumZ(MDataSet.CashDataTable dataTable, System.Nullable<int> Numz) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Numz.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Numz.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.CashDataTable GetDataByNumZ(System.Nullable<int> Numz) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Numz.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Numz.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.CashDataTable dataTable = new MDataSet.CashDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.CashDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Cash");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> NumZ, System.Nullable<System.DateTime> Date, System.Nullable<decimal> BalanceBegin, System.Nullable<decimal> OfIncome, System.Nullable<decimal> OfExpend, System.Nullable<decimal> Income, System.Nullable<decimal> Expend, System.Nullable<decimal> BalanceEnd, System.Nullable<bool> IsClosed) {
            if ((NumZ.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(NumZ.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((BalanceBegin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(BalanceBegin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((OfIncome.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(OfIncome.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((OfExpend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(OfExpend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Income.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(Income.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Expend.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(Expend.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((BalanceEnd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(BalanceEnd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IsClosed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(IsClosed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> NumZ, System.Nullable<System.DateTime> Date, System.Nullable<decimal> BalanceBegin, System.Nullable<decimal> OfIncome, System.Nullable<decimal> OfExpend, System.Nullable<decimal> Income, System.Nullable<decimal> Expend, System.Nullable<decimal> BalanceEnd, System.Nullable<bool> IsClosed, System.Nullable<int> Original_ID, byte[] Original_RowVersion, System.Nullable<int> ID) {
            if ((NumZ.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(NumZ.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((BalanceBegin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(BalanceBegin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((OfIncome.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(OfIncome.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((OfExpend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(OfExpend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Income.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Income.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Expend.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Expend.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((BalanceEnd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(BalanceEnd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IsClosed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(IsClosed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ClosePeriod(System.Nullable<int> NewNumZ) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((NewNumZ.HasValue == true)) {
                command.Parameters[1].Value = ((int)(NewNumZ.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DocumentTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocumentTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DocumentType";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsInternal", "IsInternal");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DocumentType] WHERE (([ID] = @Original_ID) AND ([RowVersion] =" +
                " @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DocumentType] ([Name], [IsInternal], [AuthorCreate], [AuthorLastModif], [DateLastModif], [DateCreate]) VALUES (@Name, @IsInternal, @AuthorCreate, @AuthorLastModif, @DateLastModif, @DateCreate);
SELECT ID, Name, IsInternal, AuthorCreate, AuthorLastModif, DateLastModif, DateCreate, RowVersion FROM DocumentType WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsInternal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsInternal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DocumentType] SET [Name] = @Name, [IsInternal] = @IsInternal, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateLastModif] = @DateLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, IsInternal, AuthorCreate, AuthorLastModif, DateLastModif, DateCreate, RowVersion FROM DocumentType WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsInternal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsInternal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, IsInternal, AuthorCreate, AuthorLastModif, DateLastModif, DateCr" +
                "eate, RowVersion FROM dbo.DocumentType";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.DocumentTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.DocumentTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.DocumentTypeDataTable dataTable = new MDataSet.DocumentTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.DocumentTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DocumentType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(IsInternal));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DateLastModif));
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(IsInternal));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DateLastModif));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvoiceMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvoiceMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("OrganisationRef", "OrganisationRef");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("RemoteReceiptMasterRef", "RemoteReceiptMasterRef");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("Sum", "Sum");
            tableMapping.ColumnMappings.Add("Nds", "Nds");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("PeriodsRef", "PeriodsRef");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("RecalcSum", "RecalcSum");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            tableMapping.ColumnMappings.Add("NumCheck", "NumCheck");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.InvoiceMasterDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.InvoiceMasterInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.InvoiceMasterUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.InvoiceMasterSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InvoiceMasterSelectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.InvoiceMasterSelectByPeriodNumCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.invoiceMasterSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.InvoiceMasterMakeToReturn";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@idInvoiceMaster", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "InvoiceMasterMove";
            this._commandCollection[5].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@invoicemasterId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumCheck", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "NumCheck", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Discount", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "Discount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.InvoiceMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.InvoiceMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.InvoiceMasterDataTable dataTable, System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceMasterDataTable GetDataByPeriod(System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriodNum(MDataSet.InvoiceMasterDataTable dataTable, System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceMasterDataTable GetDataByPeriodNum(System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.InvoiceMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceMasterDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.InvoiceMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvoiceMaster");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InvoiceMasterMakeToReturn(System.Nullable<int> idInvoiceMaster) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((idInvoiceMaster.HasValue == true)) {
                command.Parameters[1].Value = ((int)(idInvoiceMaster.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InvoiceMasterMove(System.Nullable<int> invoicemasterId, System.Nullable<int> NumCheck, System.Nullable<decimal> Discount) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((invoicemasterId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(invoicemasterId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((NumCheck.HasValue == true)) {
                command.Parameters[2].Value = ((int)(NumCheck.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Discount.HasValue == true)) {
                command.Parameters[3].Value = ((decimal)(Discount.Value));
            }
            else {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvoiceDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvoiceDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("InvoiceMasterRef", "InvoiceMasterRef");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("DiscountSum", "DiscountSum");
            tableMapping.ColumnMappings.Add("PurchaseNDS", "PurchaseNDS");
            tableMapping.ColumnMappings.Add("PriceRetail", "PriceRetail");
            tableMapping.ColumnMappings.Add("RetailNDS", "RetailNDS");
            tableMapping.ColumnMappings.Add("PriceRetailNDS", "PriceRetailNDS");
            tableMapping.ColumnMappings.Add("LocalReceiptDetailRef", "LocalReceiptDetailRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceDetailRef", "RemoteInvoiceDetailRef");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("RetailSum", "RetailSum");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            tableMapping.ColumnMappings.Add("Article", "Article");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.InvoiceDetailDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "InvoiceDetailInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "InvoiceMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 5, System.Data.ParameterDirection.Input, 5, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Article", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "Article", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LocalReceiptDetailRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "LocalReceiptDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "InvoiceDetailUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 5, System.Data.ParameterDirection.Input, 5, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Article", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "Article", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.InvoiceDetailSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InvoiceDetailSelectByIdCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.InvoiceDetailSelectByInvoiceMasterRef";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.InvoiceDetailselectByPeriodCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.InvoiceDetailSelectNewCommand";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.InvoiceDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.InvoiceDetailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillById(MDataSet.InvoiceDetailDataTable dataTable, System.Nullable<int> Id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataById(System.Nullable<int> Id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInvoiceMasterRef(MDataSet.InvoiceDetailDataTable dataTable, System.Nullable<int> InvoiceMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((InvoiceMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(InvoiceMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataByInvoiceMasterRef(System.Nullable<int> InvoiceMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((InvoiceMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(InvoiceMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.InvoiceDetailDataTable dataTable, System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataByPeriod(System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.InvoiceDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.InvoiceDetailDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvoiceDetail");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PeriodsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeriodsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Periods";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("ClosedDate", "ClosedDate");
            tableMapping.ColumnMappings.Add("isClosed", "isClosed");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Periods] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Ori" +
                "ginal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Periods] ([StartDate], [ClosedDate], [isClosed]) VALUES (@Star" +
                "tDate, @ClosedDate, @isClosed);\r\nSELECT ID, StartDate, ClosedDate, isClosed, Row" +
                "Version FROM Periods WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ClosedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ClosedDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@isClosed", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isClosed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Periods] SET [StartDate] = @StartDate, [ClosedDate] = @ClosedDate, [isClosed] = @isClosed WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, StartDate, ClosedDate, isClosed, RowVersion FROM Periods WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ClosedDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ClosedDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@isClosed", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isClosed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, StartDate, ClosedDate, isClosed, RowVersion FROM dbo.Periods";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.PeriodsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.PeriodsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.PeriodsDataTable dataTable = new MDataSet.PeriodsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.PeriodsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Periods");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime StartDate, System.DateTime ClosedDate, bool isClosed) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(StartDate));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(ClosedDate));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(isClosed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime StartDate, System.DateTime ClosedDate, bool isClosed, int Original_ID, byte[] Original_RowVersion, int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(StartDate));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(ClosedDate));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(isClosed));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ReceiptMasterRef", "ReceiptMasterRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("Series", "Series");
            tableMapping.ColumnMappings.Add("UseByDate", "UseByDate");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("PurchSum", "PurchSum");
            tableMapping.ColumnMappings.Add("PurchNDS", "PurchNDS");
            tableMapping.ColumnMappings.Add("SalesNDS", "SalesNDS");
            tableMapping.ColumnMappings.Add("SalesPrice", "SalesPrice");
            tableMapping.ColumnMappings.Add("SalesSum", "SalesSum");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            tableMapping.ColumnMappings.Add("ManufacturerName", "ManufacturerName");
            tableMapping.ColumnMappings.Add("CountryName", "CountryName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ReceiptDetailSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ReceiptDetailselectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ReceiptDetailSelectByReceiptMasterRefCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptDetailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.ReceiptDetailDataTable dataTable, System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptDetailDataTable GetDataByPeriod(System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByReceiptMasterRef(MDataSet.ReceiptDetailDataTable dataTable, System.Nullable<int> ReceiptMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptDetailDataTable GetDataByReceiptMasterRef(System.Nullable<int> ReceiptMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DocDate", "DocDate");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("SenderStockRef", "SenderStockRef");
            tableMapping.ColumnMappings.Add("SalesSum", "SalesSum");
            tableMapping.ColumnMappings.Add("PurchSum", "PurchSum");
            tableMapping.ColumnMappings.Add("PurchNDS", "PurchNDS");
            tableMapping.ColumnMappings.Add("SalesNDS", "SalesNDS");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("RecalcSum", "RecalcSum");
            tableMapping.ColumnMappings.Add("PeriodsRef", "PeriodsRef");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ReceiptMasterSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ReceiptMasterSelectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ReceiptMasterSelectByPeriodNumCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.ReceiptMasterSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.ReceiptMasterMakeToNew";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@idReceiptMaster", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.ReceiptMasterMove";
            this._commandCollection[5].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@receiptmasterId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.ReceiptMasterDataTable dataTable, System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptMasterDataTable GetDataByPeriod(System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriodNum(MDataSet.ReceiptMasterDataTable dataTable, System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptMasterDataTable GetDataByPeriodNum(System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.ReceiptMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptMasterDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ReceiptMasterMakeToNew(System.Nullable<int> idReceiptMaster) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((idReceiptMaster.HasValue == true)) {
                command.Parameters[1].Value = ((int)(idReceiptMaster.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ReceiptMasterMove(System.Nullable<int> receiptmasterId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((receiptmasterId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(receiptmasterId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptRemainsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptRemainsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptRemains";
            tableMapping.ColumnMappings.Add("ReceiptDetailRef", "ReceiptDetailRef");
            tableMapping.ColumnMappings.Add("QuantityReceipt", "QuantityReceipt");
            tableMapping.ColumnMappings.Add("QuantityRemains", "QuantityRemains");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ReceiptRemains] WHERE (([ReceiptDetailRef] = @Original_Receipt" +
                "DetailRef) AND ([RowVersion] = @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ReceiptDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptDetailRef", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ReceiptRemains] ([ReceiptDetailRef], [QuantityReceipt], [QuantityRemains], [DateLastModif], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@ReceiptDetailRef, @QuantityReceipt, @QuantityRemains, @DateLastModif, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ReceiptDetailRef, QuantityReceipt, QuantityRemains, DateLastModif, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM ReceiptRemains WHERE (ReceiptDetailRef = @ReceiptDetailRef)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityReceipt", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityReceipt", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityRemains", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityRemains", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ReceiptRemains] SET [ReceiptDetailRef] = @ReceiptDetailRef, [QuantityReceipt] = @QuantityReceipt, [QuantityRemains] = @QuantityRemains, [DateLastModif] = @DateLastModif, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ReceiptDetailRef] = @Original_ReceiptDetailRef) AND ([RowVersion] = @Original_RowVersion));
SELECT ReceiptDetailRef, QuantityReceipt, QuantityRemains, DateLastModif, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM ReceiptRemains WHERE (ReceiptDetailRef = @ReceiptDetailRef)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityReceipt", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityReceipt", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityRemains", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityRemains", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ReceiptDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptDetailRef", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ReceiptDetailRef, QuantityReceipt, QuantityRemains, DateLastModif, AuthorC" +
                "reate, AuthorLastModif, DateCreate, RowVersion FROM dbo.ReceiptRemains";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptRemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptRemainsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptRemainsDataTable dataTable = new MDataSet.ReceiptRemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptRemainsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptRemains");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ReceiptDetailRef, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ReceiptDetailRef));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ReceiptDetailRef, decimal QuantityReceipt, decimal QuantityRemains, System.DateTime DateLastModif, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ReceiptDetailRef));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(QuantityReceipt));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(QuantityRemains));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateLastModif));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ReceiptDetailRef, decimal QuantityReceipt, decimal QuantityRemains, System.DateTime DateLastModif, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ReceiptDetailRef, byte[] Original_RowVersion) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ReceiptDetailRef));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(QuantityReceipt));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(QuantityRemains));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateLastModif));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ReceiptDetailRef));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProductTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Product";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("SmallName", "SmallName");
            tableMapping.ColumnMappings.Add("PriceManufact", "PriceManufact");
            tableMapping.ColumnMappings.Add("UnitRef", "UnitRef");
            tableMapping.ColumnMappings.Add("PackingRef", "PackingRef");
            tableMapping.ColumnMappings.Add("StorageConditionRef", "StorageConditionRef");
            tableMapping.ColumnMappings.Add("SubstanceRef", "SubstanceRef");
            tableMapping.ColumnMappings.Add("FarmGrouplevel2Ref", "FarmGrouplevel2Ref");
            tableMapping.ColumnMappings.Add("IsRecept", "IsRecept");
            tableMapping.ColumnMappings.Add("IsOneRecept", "IsOneRecept");
            tableMapping.ColumnMappings.Add("IsHide", "IsHide");
            tableMapping.ColumnMappings.Add("MinDivisor", "MinDivisor");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("FarmGroupName", "FarmGroupName");
            tableMapping.ColumnMappings.Add("PackingName", "PackingName");
            tableMapping.ColumnMappings.Add("StorageConditionName", "StorageConditionName");
            tableMapping.ColumnMappings.Add("FarmGroupLevel2", "FarmGroupLevel2");
            tableMapping.ColumnMappings.Add("UnitName", "UnitName");
            tableMapping.ColumnMappings.Add("SubstanceName", "SubstanceName");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("OldName", "OldName");
            tableMapping.ColumnMappings.Add("OldKod", "OldKod");
            tableMapping.ColumnMappings.Add("OldKol", "OldKol");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "ProductSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ProductSelectAllCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ProductSelectById";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.ProductSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.ProductSelectOrdersCommand";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ProductDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAll(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ProductDataTable GetDataAll() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillById(MDataSet.ProductDataTable dataTable, System.Nullable<int> ProductRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ProductRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ProductRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ProductDataTable GetDataById(System.Nullable<int> ProductRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ProductRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ProductRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ProductDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillOrders(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ProductDataTable GetDataOrders() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RemainsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RemainsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Remains";
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("Series", "Series");
            tableMapping.ColumnMappings.Add("UseByDate", "UseByDate");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            tableMapping.ColumnMappings.Add("ManufacturerName", "ManufacturerName");
            tableMapping.ColumnMappings.Add("CountryName", "CountryName");
            tableMapping.ColumnMappings.Add("DocDate", "DocDate");
            tableMapping.ColumnMappings.Add("QuantityRemains", "QuantityRemains");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("ReceiptDetailRef", "ReceiptDetailRef");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "RemainsSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.RemainsSelectByInvoiceMasterID";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.RemainsSelectByIdCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.RemainsSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.RemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.RemainsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInvoiceMasterID(MDataSet.RemainsDataTable dataTable, System.Nullable<int> id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.RemainsDataTable GetDataByInvoiceMasterID(System.Nullable<int> id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByReceiptDetailRef(MDataSet.RemainsDataTable dataTable, System.Nullable<int> id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.RemainsDataTable GetDataByReceiptDetailRef(System.Nullable<int> id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.RemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.RemainsDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StockTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Stock";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("TradePutletRef", "TradePutletRef");
            tableMapping.ColumnMappings.Add("isLocal", "isLocal");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.StockSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.StockDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.StockDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.StockDataTable dataTable = new MDataSet.StockDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LocalSettingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LocalSettingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LocalSetting";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("NDS", "NDS");
            tableMapping.ColumnMappings.Add("MainTradePutletRef", "MainTradePutletRef");
            tableMapping.ColumnMappings.Add("PrDiscount", "PrDiscount");
            tableMapping.ColumnMappings.Add("Printer", "Printer");
            tableMapping.ColumnMappings.Add("Num", "Num");
            tableMapping.ColumnMappings.Add("FullName", "FullName");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "LocalSettingSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.LocalSettingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.LocalSettingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.LocalSettingDataTable dataTable = new MDataSet.LocalSettingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OrdersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrdersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Orders";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TradePupletRef", "TradePupletRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("DateOrder", "DateOrder");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Price", "Price");
            tableMapping.ColumnMappings.Add("Reserved", "Reserved");
            tableMapping.ColumnMappings.Add("QuantityNow", "QuantityNow");
            tableMapping.ColumnMappings.Add("isClose", "isClose");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "OrdersDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "OrdersInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ProductRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "OrdersUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "OrdersSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.OrdersSelectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.OrdersAuto";
            (this._commandCollection[2] as System.Data.SqlClient.SqlCommand).CommandTimeout =Convert.ToInt32(Properties.Settings.Default.CommandTimeout);
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.OrdersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.OrdersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.OrdersDataTable dataTable = new MDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByStartPeriod(MDataSet.OrdersDataTable dataTable, System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.OrdersDataTable GetDataByStartPeriod(System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.OrdersDataTable dataTable = new MDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.OrdersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Orders");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int OrdersAuto() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class inventoryMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public inventoryMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "inventoryMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("rowversion", "rowversion");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("IsClose", "IsClose");
            tableMapping.ColumnMappings.Add("AuthorLatModif", "AuthorLatModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[inventoryMaster] WHERE (([ID] = @Original_ID) AND ([rowversion" +
                "] = @Original_rowversion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rowversion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "rowversion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "inventoryMasterInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "inventoryMasterUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rowversion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "rowversion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsClose", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsClose", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "inventoryMasterSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.inventoryMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.inventoryMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.inventoryMasterDataTable dataTable = new MDataSet.inventoryMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.inventoryMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "inventoryMaster");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_rowversion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_rowversion == null)) {
                throw new System.ArgumentNullException("Original_rowversion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_rowversion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<System.DateTime> Date, string Note) {
            if ((Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Note == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Note));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Note, System.Nullable<int> Original_ID, byte[] Original_rowversion, System.Nullable<int> ID, bool IsClose) {
            if ((Note == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Note));
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_rowversion == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(Original_rowversion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(IsClose));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class inventoryDetailsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public inventoryDetailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "inventoryDetails";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            tableMapping.ColumnMappings.Add("Price", "Price");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Series", "Series");
            tableMapping.ColumnMappings.Add("UseByDate", "UseByDate");
            tableMapping.ColumnMappings.Add("QuantityFact", "QuantityFact");
            tableMapping.ColumnMappings.Add("rowversion", "rowversion");
            tableMapping.ColumnMappings.Add("inventoryMasterRef", "inventoryMasterRef");
            tableMapping.ColumnMappings.Add("ManufacturerName", "ManufacturerName");
            tableMapping.ColumnMappings.Add("ProductName", "ProductName");
            tableMapping.ColumnMappings.Add("IsRecept", "IsRecept");
            tableMapping.ColumnMappings.Add("IsOneRecept", "IsOneRecept");
            tableMapping.ColumnMappings.Add("MinDivisor", "MinDivisor");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("FarmGroupName", "FarmGroupName");
            tableMapping.ColumnMappings.Add("PackingName", "PackingName");
            tableMapping.ColumnMappings.Add("StorageConditionName", "StorageConditionName");
            tableMapping.ColumnMappings.Add("FarmGroupLevel2", "FarmGroupLevel2");
            tableMapping.ColumnMappings.Add("UnitName", "UnitName");
            tableMapping.ColumnMappings.Add("SubstanceName", "SubstanceName");
            tableMapping.ColumnMappings.Add("OldKol", "OldKol");
            tableMapping.ColumnMappings.Add("OldName", "OldName");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.inventoryDetailsUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityFact", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "QuantityFact", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "rowversion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTradeOrders.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.inventoryDetailsSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.inventoryDetailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.inventoryDetailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.inventoryDetailsDataTable dataTable = new MDataSet.inventoryDetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.inventoryDetailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "inventoryDetails");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
}

#pragma warning restore 1591