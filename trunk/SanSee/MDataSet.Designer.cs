//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SanSee {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MDataSet : System.Data.DataSet {
        
        private SPR_CountryDataTable tableSPR_Country;
        
        private SPR_EIDataTable tableSPR_EI;
        
        private SPR_Farm_GroupDataTable tableSPR_Farm_Group;
        
        private SPR_FarmG_level2DataTable tableSPR_FarmG_level2;
        
        private SPR_FormDataTable tableSPR_Form;
        
        private SPR_IzgDataTable tableSPR_Izg;
        
        private SPR_Place_storageDataTable tableSPR_Place_storage;
        
        private SPR_REGDataTable tableSPR_REG;
        
        private SPR_SubstanceDataTable tableSPR_Substance;
        
        private SPR_TOVDataTable tableSPR_TOV;
        
        private System.Data.DataRelation relationFK_SPR_IZG_SPR_Country;
        
        private System.Data.DataRelation relationFK_SPR_TOV_SPR_EI;
        
        private System.Data.DataRelation relationFK_SPR_TOV_SPR_Farm_Group;
        
        private System.Data.DataRelation relationFK_SPR_TOV_SPR_FarmG_level21;
        
        private System.Data.DataRelation relationFK_SPR_TOV_SPR_Form;
        
        private System.Data.DataRelation relationFK_SPR_TOV_SPR_Place_storage;
        
        private System.Data.DataRelation relationFK_SPR_TOV_SPR_Substance;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SPR_Country"] != null)) {
                    base.Tables.Add(new SPR_CountryDataTable(ds.Tables["SPR_Country"]));
                }
                if ((ds.Tables["SPR_EI"] != null)) {
                    base.Tables.Add(new SPR_EIDataTable(ds.Tables["SPR_EI"]));
                }
                if ((ds.Tables["SPR_Farm_Group"] != null)) {
                    base.Tables.Add(new SPR_Farm_GroupDataTable(ds.Tables["SPR_Farm_Group"]));
                }
                if ((ds.Tables["SPR_FarmG_level2"] != null)) {
                    base.Tables.Add(new SPR_FarmG_level2DataTable(ds.Tables["SPR_FarmG_level2"]));
                }
                if ((ds.Tables["SPR_Form"] != null)) {
                    base.Tables.Add(new SPR_FormDataTable(ds.Tables["SPR_Form"]));
                }
                if ((ds.Tables["SPR_Izg"] != null)) {
                    base.Tables.Add(new SPR_IzgDataTable(ds.Tables["SPR_Izg"]));
                }
                if ((ds.Tables["SPR_Place_storage"] != null)) {
                    base.Tables.Add(new SPR_Place_storageDataTable(ds.Tables["SPR_Place_storage"]));
                }
                if ((ds.Tables["SPR_REG"] != null)) {
                    base.Tables.Add(new SPR_REGDataTable(ds.Tables["SPR_REG"]));
                }
                if ((ds.Tables["SPR_Substance"] != null)) {
                    base.Tables.Add(new SPR_SubstanceDataTable(ds.Tables["SPR_Substance"]));
                }
                if ((ds.Tables["SPR_TOV"] != null)) {
                    base.Tables.Add(new SPR_TOVDataTable(ds.Tables["SPR_TOV"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_CountryDataTable SPR_Country {
            get {
                return this.tableSPR_Country;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_EIDataTable SPR_EI {
            get {
                return this.tableSPR_EI;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_Farm_GroupDataTable SPR_Farm_Group {
            get {
                return this.tableSPR_Farm_Group;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_FarmG_level2DataTable SPR_FarmG_level2 {
            get {
                return this.tableSPR_FarmG_level2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_FormDataTable SPR_Form {
            get {
                return this.tableSPR_Form;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_IzgDataTable SPR_Izg {
            get {
                return this.tableSPR_Izg;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_Place_storageDataTable SPR_Place_storage {
            get {
                return this.tableSPR_Place_storage;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_REGDataTable SPR_REG {
            get {
                return this.tableSPR_REG;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_SubstanceDataTable SPR_Substance {
            get {
                return this.tableSPR_Substance;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SPR_TOVDataTable SPR_TOV {
            get {
                return this.tableSPR_TOV;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MDataSet cln = ((MDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SPR_Country"] != null)) {
                    base.Tables.Add(new SPR_CountryDataTable(ds.Tables["SPR_Country"]));
                }
                if ((ds.Tables["SPR_EI"] != null)) {
                    base.Tables.Add(new SPR_EIDataTable(ds.Tables["SPR_EI"]));
                }
                if ((ds.Tables["SPR_Farm_Group"] != null)) {
                    base.Tables.Add(new SPR_Farm_GroupDataTable(ds.Tables["SPR_Farm_Group"]));
                }
                if ((ds.Tables["SPR_FarmG_level2"] != null)) {
                    base.Tables.Add(new SPR_FarmG_level2DataTable(ds.Tables["SPR_FarmG_level2"]));
                }
                if ((ds.Tables["SPR_Form"] != null)) {
                    base.Tables.Add(new SPR_FormDataTable(ds.Tables["SPR_Form"]));
                }
                if ((ds.Tables["SPR_Izg"] != null)) {
                    base.Tables.Add(new SPR_IzgDataTable(ds.Tables["SPR_Izg"]));
                }
                if ((ds.Tables["SPR_Place_storage"] != null)) {
                    base.Tables.Add(new SPR_Place_storageDataTable(ds.Tables["SPR_Place_storage"]));
                }
                if ((ds.Tables["SPR_REG"] != null)) {
                    base.Tables.Add(new SPR_REGDataTable(ds.Tables["SPR_REG"]));
                }
                if ((ds.Tables["SPR_Substance"] != null)) {
                    base.Tables.Add(new SPR_SubstanceDataTable(ds.Tables["SPR_Substance"]));
                }
                if ((ds.Tables["SPR_TOV"] != null)) {
                    base.Tables.Add(new SPR_TOVDataTable(ds.Tables["SPR_TOV"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSPR_Country = ((SPR_CountryDataTable)(base.Tables["SPR_Country"]));
            if ((initTable == true)) {
                if ((this.tableSPR_Country != null)) {
                    this.tableSPR_Country.InitVars();
                }
            }
            this.tableSPR_EI = ((SPR_EIDataTable)(base.Tables["SPR_EI"]));
            if ((initTable == true)) {
                if ((this.tableSPR_EI != null)) {
                    this.tableSPR_EI.InitVars();
                }
            }
            this.tableSPR_Farm_Group = ((SPR_Farm_GroupDataTable)(base.Tables["SPR_Farm_Group"]));
            if ((initTable == true)) {
                if ((this.tableSPR_Farm_Group != null)) {
                    this.tableSPR_Farm_Group.InitVars();
                }
            }
            this.tableSPR_FarmG_level2 = ((SPR_FarmG_level2DataTable)(base.Tables["SPR_FarmG_level2"]));
            if ((initTable == true)) {
                if ((this.tableSPR_FarmG_level2 != null)) {
                    this.tableSPR_FarmG_level2.InitVars();
                }
            }
            this.tableSPR_Form = ((SPR_FormDataTable)(base.Tables["SPR_Form"]));
            if ((initTable == true)) {
                if ((this.tableSPR_Form != null)) {
                    this.tableSPR_Form.InitVars();
                }
            }
            this.tableSPR_Izg = ((SPR_IzgDataTable)(base.Tables["SPR_Izg"]));
            if ((initTable == true)) {
                if ((this.tableSPR_Izg != null)) {
                    this.tableSPR_Izg.InitVars();
                }
            }
            this.tableSPR_Place_storage = ((SPR_Place_storageDataTable)(base.Tables["SPR_Place_storage"]));
            if ((initTable == true)) {
                if ((this.tableSPR_Place_storage != null)) {
                    this.tableSPR_Place_storage.InitVars();
                }
            }
            this.tableSPR_REG = ((SPR_REGDataTable)(base.Tables["SPR_REG"]));
            if ((initTable == true)) {
                if ((this.tableSPR_REG != null)) {
                    this.tableSPR_REG.InitVars();
                }
            }
            this.tableSPR_Substance = ((SPR_SubstanceDataTable)(base.Tables["SPR_Substance"]));
            if ((initTable == true)) {
                if ((this.tableSPR_Substance != null)) {
                    this.tableSPR_Substance.InitVars();
                }
            }
            this.tableSPR_TOV = ((SPR_TOVDataTable)(base.Tables["SPR_TOV"]));
            if ((initTable == true)) {
                if ((this.tableSPR_TOV != null)) {
                    this.tableSPR_TOV.InitVars();
                }
            }
            this.relationFK_SPR_IZG_SPR_Country = this.Relations["FK_SPR_IZG_SPR_Country"];
            this.relationFK_SPR_TOV_SPR_EI = this.Relations["FK_SPR_TOV_SPR_EI"];
            this.relationFK_SPR_TOV_SPR_Farm_Group = this.Relations["FK_SPR_TOV_SPR_Farm_Group"];
            this.relationFK_SPR_TOV_SPR_FarmG_level21 = this.Relations["FK_SPR_TOV_SPR_FarmG_level21"];
            this.relationFK_SPR_TOV_SPR_Form = this.Relations["FK_SPR_TOV_SPR_Form"];
            this.relationFK_SPR_TOV_SPR_Place_storage = this.Relations["FK_SPR_TOV_SPR_Place_storage"];
            this.relationFK_SPR_TOV_SPR_Substance = this.Relations["FK_SPR_TOV_SPR_Substance"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSPR_Country = new SPR_CountryDataTable();
            base.Tables.Add(this.tableSPR_Country);
            this.tableSPR_EI = new SPR_EIDataTable();
            base.Tables.Add(this.tableSPR_EI);
            this.tableSPR_Farm_Group = new SPR_Farm_GroupDataTable();
            base.Tables.Add(this.tableSPR_Farm_Group);
            this.tableSPR_FarmG_level2 = new SPR_FarmG_level2DataTable();
            base.Tables.Add(this.tableSPR_FarmG_level2);
            this.tableSPR_Form = new SPR_FormDataTable();
            base.Tables.Add(this.tableSPR_Form);
            this.tableSPR_Izg = new SPR_IzgDataTable();
            base.Tables.Add(this.tableSPR_Izg);
            this.tableSPR_Place_storage = new SPR_Place_storageDataTable();
            base.Tables.Add(this.tableSPR_Place_storage);
            this.tableSPR_REG = new SPR_REGDataTable();
            base.Tables.Add(this.tableSPR_REG);
            this.tableSPR_Substance = new SPR_SubstanceDataTable();
            base.Tables.Add(this.tableSPR_Substance);
            this.tableSPR_TOV = new SPR_TOVDataTable();
            base.Tables.Add(this.tableSPR_TOV);
            this.relationFK_SPR_IZG_SPR_Country = new System.Data.DataRelation("FK_SPR_IZG_SPR_Country", new System.Data.DataColumn[] {
                        this.tableSPR_Country.ID_countryColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_Izg.IDF_CountryColumn}, false);
            this.Relations.Add(this.relationFK_SPR_IZG_SPR_Country);
            this.relationFK_SPR_TOV_SPR_EI = new System.Data.DataRelation("FK_SPR_TOV_SPR_EI", new System.Data.DataColumn[] {
                        this.tableSPR_EI.ID_EIColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.IDF_EIColumn}, false);
            this.Relations.Add(this.relationFK_SPR_TOV_SPR_EI);
            this.relationFK_SPR_TOV_SPR_Farm_Group = new System.Data.DataRelation("FK_SPR_TOV_SPR_Farm_Group", new System.Data.DataColumn[] {
                        this.tableSPR_Farm_Group.ID_FGColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.IDF_FGColumn}, false);
            this.Relations.Add(this.relationFK_SPR_TOV_SPR_Farm_Group);
            this.relationFK_SPR_TOV_SPR_FarmG_level21 = new System.Data.DataRelation("FK_SPR_TOV_SPR_FarmG_level21", new System.Data.DataColumn[] {
                        this.tableSPR_FarmG_level2.ID_FG2Column}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.IDF_FG2Column}, false);
            this.Relations.Add(this.relationFK_SPR_TOV_SPR_FarmG_level21);
            this.relationFK_SPR_TOV_SPR_Form = new System.Data.DataRelation("FK_SPR_TOV_SPR_Form", new System.Data.DataColumn[] {
                        this.tableSPR_Form.ID_FormColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.IDF_FormColumn}, false);
            this.Relations.Add(this.relationFK_SPR_TOV_SPR_Form);
            this.relationFK_SPR_TOV_SPR_Place_storage = new System.Data.DataRelation("FK_SPR_TOV_SPR_Place_storage", new System.Data.DataColumn[] {
                        this.tableSPR_Place_storage.ID_PlaceColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.IDF_PlaceColumn}, false);
            this.Relations.Add(this.relationFK_SPR_TOV_SPR_Place_storage);
            this.relationFK_SPR_TOV_SPR_Substance = new System.Data.DataRelation("FK_SPR_TOV_SPR_Substance", new System.Data.DataColumn[] {
                        this.tableSPR_Substance.ID_SbcColumn}, new System.Data.DataColumn[] {
                        this.tableSPR_TOV.IDF_SbcColumn}, false);
            this.Relations.Add(this.relationFK_SPR_TOV_SPR_Substance);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_Country() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_EI() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_Farm_Group() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_FarmG_level2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_Form() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_Izg() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_Place_storage() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_REG() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_Substance() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSPR_TOV() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MDataSet ds = new MDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void SPR_CountryRowChangeEventHandler(object sender, SPR_CountryRowChangeEvent e);
        
        public delegate void SPR_EIRowChangeEventHandler(object sender, SPR_EIRowChangeEvent e);
        
        public delegate void SPR_Farm_GroupRowChangeEventHandler(object sender, SPR_Farm_GroupRowChangeEvent e);
        
        public delegate void SPR_FarmG_level2RowChangeEventHandler(object sender, SPR_FarmG_level2RowChangeEvent e);
        
        public delegate void SPR_FormRowChangeEventHandler(object sender, SPR_FormRowChangeEvent e);
        
        public delegate void SPR_IzgRowChangeEventHandler(object sender, SPR_IzgRowChangeEvent e);
        
        public delegate void SPR_Place_storageRowChangeEventHandler(object sender, SPR_Place_storageRowChangeEvent e);
        
        public delegate void SPR_REGRowChangeEventHandler(object sender, SPR_REGRowChangeEvent e);
        
        public delegate void SPR_SubstanceRowChangeEventHandler(object sender, SPR_SubstanceRowChangeEvent e);
        
        public delegate void SPR_TOVRowChangeEventHandler(object sender, SPR_TOVRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_CountryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_country;
            
            private System.Data.DataColumn columnName_country;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryDataTable() {
                this.TableName = "SPR_Country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_CountryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_CountryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_countryColumn {
                get {
                    return this.columnID_country;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_countryColumn {
                get {
                    return this.columnName_country;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRow this[int index] {
                get {
                    return ((SPR_CountryRow)(this.Rows[index]));
                }
            }
            
            public event SPR_CountryRowChangeEventHandler SPR_CountryRowChanging;
            
            public event SPR_CountryRowChangeEventHandler SPR_CountryRowChanged;
            
            public event SPR_CountryRowChangeEventHandler SPR_CountryRowDeleting;
            
            public event SPR_CountryRowChangeEventHandler SPR_CountryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_CountryRow(SPR_CountryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRow AddSPR_CountryRow(string Name_country, byte[] RW) {
                SPR_CountryRow rowSPR_CountryRow = ((SPR_CountryRow)(this.NewRow()));
                rowSPR_CountryRow.ItemArray = new object[] {
                        null,
                        Name_country,
                        RW};
                this.Rows.Add(rowSPR_CountryRow);
                return rowSPR_CountryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRow FindByID_country(int ID_country) {
                return ((SPR_CountryRow)(this.Rows.Find(new object[] {
                            ID_country})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_CountryDataTable cln = ((SPR_CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_CountryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_country = base.Columns["ID_country"];
                this.columnName_country = base.Columns["Name_country"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_country = new System.Data.DataColumn("ID_country", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_country);
                this.columnName_country = new System.Data.DataColumn("Name_country", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_country);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_country}, true));
                this.columnID_country.AutoIncrement = true;
                this.columnID_country.AutoIncrementStep = -1;
                this.columnID_country.AllowDBNull = false;
                this.columnID_country.ReadOnly = true;
                this.columnID_country.Unique = true;
                this.columnName_country.MaxLength = 20;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRow NewSPR_CountryRow() {
                return ((SPR_CountryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_CountryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_CountryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_CountryRowChanged != null)) {
                    this.SPR_CountryRowChanged(this, new SPR_CountryRowChangeEvent(((SPR_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_CountryRowChanging != null)) {
                    this.SPR_CountryRowChanging(this, new SPR_CountryRowChangeEvent(((SPR_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_CountryRowDeleted != null)) {
                    this.SPR_CountryRowDeleted(this, new SPR_CountryRowChangeEvent(((SPR_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_CountryRowDeleting != null)) {
                    this.SPR_CountryRowDeleting(this, new SPR_CountryRowChangeEvent(((SPR_CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_CountryRow(SPR_CountryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_CountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_EIDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_EI;
            
            private System.Data.DataColumn columnName_Ei;
            
            private System.Data.DataColumn columnDel;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIDataTable() {
                this.TableName = "SPR_EI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_EIDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_EIDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_EIColumn {
                get {
                    return this.columnID_EI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_EiColumn {
                get {
                    return this.columnName_Ei;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DelColumn {
                get {
                    return this.columnDel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRow this[int index] {
                get {
                    return ((SPR_EIRow)(this.Rows[index]));
                }
            }
            
            public event SPR_EIRowChangeEventHandler SPR_EIRowChanging;
            
            public event SPR_EIRowChangeEventHandler SPR_EIRowChanged;
            
            public event SPR_EIRowChangeEventHandler SPR_EIRowDeleting;
            
            public event SPR_EIRowChangeEventHandler SPR_EIRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_EIRow(SPR_EIRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRow AddSPR_EIRow(string Name_Ei, bool Del, byte[] RW) {
                SPR_EIRow rowSPR_EIRow = ((SPR_EIRow)(this.NewRow()));
                rowSPR_EIRow.ItemArray = new object[] {
                        null,
                        Name_Ei,
                        Del,
                        RW};
                this.Rows.Add(rowSPR_EIRow);
                return rowSPR_EIRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRow FindByID_EI(int ID_EI) {
                return ((SPR_EIRow)(this.Rows.Find(new object[] {
                            ID_EI})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_EIDataTable cln = ((SPR_EIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_EIDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_EI = base.Columns["ID_EI"];
                this.columnName_Ei = base.Columns["Name_Ei"];
                this.columnDel = base.Columns["Del"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_EI = new System.Data.DataColumn("ID_EI", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_EI);
                this.columnName_Ei = new System.Data.DataColumn("Name_Ei", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Ei);
                this.columnDel = new System.Data.DataColumn("Del", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDel);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_EI}, true));
                this.columnID_EI.AutoIncrement = true;
                this.columnID_EI.AutoIncrementStep = -1;
                this.columnID_EI.AllowDBNull = false;
                this.columnID_EI.Unique = true;
                this.columnName_Ei.MaxLength = 5;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRow NewSPR_EIRow() {
                return ((SPR_EIRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_EIRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_EIRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_EIRowChanged != null)) {
                    this.SPR_EIRowChanged(this, new SPR_EIRowChangeEvent(((SPR_EIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_EIRowChanging != null)) {
                    this.SPR_EIRowChanging(this, new SPR_EIRowChangeEvent(((SPR_EIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_EIRowDeleted != null)) {
                    this.SPR_EIRowDeleted(this, new SPR_EIRowChangeEvent(((SPR_EIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_EIRowDeleting != null)) {
                    this.SPR_EIRowDeleting(this, new SPR_EIRowChangeEvent(((SPR_EIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_EIRow(SPR_EIRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_EIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_Farm_GroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_FG;
            
            private System.Data.DataColumn columnNAME_FG;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupDataTable() {
                this.TableName = "SPR_Farm_Group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_Farm_GroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_Farm_GroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_FGColumn {
                get {
                    return this.columnID_FG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAME_FGColumn {
                get {
                    return this.columnNAME_FG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRow this[int index] {
                get {
                    return ((SPR_Farm_GroupRow)(this.Rows[index]));
                }
            }
            
            public event SPR_Farm_GroupRowChangeEventHandler SPR_Farm_GroupRowChanging;
            
            public event SPR_Farm_GroupRowChangeEventHandler SPR_Farm_GroupRowChanged;
            
            public event SPR_Farm_GroupRowChangeEventHandler SPR_Farm_GroupRowDeleting;
            
            public event SPR_Farm_GroupRowChangeEventHandler SPR_Farm_GroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_Farm_GroupRow(SPR_Farm_GroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRow AddSPR_Farm_GroupRow(string NAME_FG, byte[] RW) {
                SPR_Farm_GroupRow rowSPR_Farm_GroupRow = ((SPR_Farm_GroupRow)(this.NewRow()));
                rowSPR_Farm_GroupRow.ItemArray = new object[] {
                        null,
                        NAME_FG,
                        RW};
                this.Rows.Add(rowSPR_Farm_GroupRow);
                return rowSPR_Farm_GroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRow FindByID_FG(int ID_FG) {
                return ((SPR_Farm_GroupRow)(this.Rows.Find(new object[] {
                            ID_FG})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_Farm_GroupDataTable cln = ((SPR_Farm_GroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_Farm_GroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_FG = base.Columns["ID_FG"];
                this.columnNAME_FG = base.Columns["NAME_FG"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_FG = new System.Data.DataColumn("ID_FG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_FG);
                this.columnNAME_FG = new System.Data.DataColumn("NAME_FG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME_FG);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_FG}, true));
                this.columnID_FG.AutoIncrement = true;
                this.columnID_FG.AutoIncrementStep = -1;
                this.columnID_FG.AllowDBNull = false;
                this.columnID_FG.Unique = true;
                this.columnNAME_FG.MaxLength = 30;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRow NewSPR_Farm_GroupRow() {
                return ((SPR_Farm_GroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_Farm_GroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_Farm_GroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_Farm_GroupRowChanged != null)) {
                    this.SPR_Farm_GroupRowChanged(this, new SPR_Farm_GroupRowChangeEvent(((SPR_Farm_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_Farm_GroupRowChanging != null)) {
                    this.SPR_Farm_GroupRowChanging(this, new SPR_Farm_GroupRowChangeEvent(((SPR_Farm_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_Farm_GroupRowDeleted != null)) {
                    this.SPR_Farm_GroupRowDeleted(this, new SPR_Farm_GroupRowChangeEvent(((SPR_Farm_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_Farm_GroupRowDeleting != null)) {
                    this.SPR_Farm_GroupRowDeleting(this, new SPR_Farm_GroupRowChangeEvent(((SPR_Farm_GroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_Farm_GroupRow(SPR_Farm_GroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_Farm_GroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_FarmG_level2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_FG2;
            
            private System.Data.DataColumn columnName_FG2;
            
            private System.Data.DataColumn columnIDF1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2DataTable() {
                this.TableName = "SPR_FarmG_level2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_FarmG_level2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_FarmG_level2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_FG2Column {
                get {
                    return this.columnID_FG2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_FG2Column {
                get {
                    return this.columnName_FG2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF1Column {
                get {
                    return this.columnIDF1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2Row this[int index] {
                get {
                    return ((SPR_FarmG_level2Row)(this.Rows[index]));
                }
            }
            
            public event SPR_FarmG_level2RowChangeEventHandler SPR_FarmG_level2RowChanging;
            
            public event SPR_FarmG_level2RowChangeEventHandler SPR_FarmG_level2RowChanged;
            
            public event SPR_FarmG_level2RowChangeEventHandler SPR_FarmG_level2RowDeleting;
            
            public event SPR_FarmG_level2RowChangeEventHandler SPR_FarmG_level2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_FarmG_level2Row(SPR_FarmG_level2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2Row AddSPR_FarmG_level2Row(string Name_FG2, int IDF1) {
                SPR_FarmG_level2Row rowSPR_FarmG_level2Row = ((SPR_FarmG_level2Row)(this.NewRow()));
                rowSPR_FarmG_level2Row.ItemArray = new object[] {
                        null,
                        Name_FG2,
                        IDF1};
                this.Rows.Add(rowSPR_FarmG_level2Row);
                return rowSPR_FarmG_level2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2Row FindByID_FG2(int ID_FG2) {
                return ((SPR_FarmG_level2Row)(this.Rows.Find(new object[] {
                            ID_FG2})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_FarmG_level2DataTable cln = ((SPR_FarmG_level2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_FarmG_level2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_FG2 = base.Columns["ID_FG2"];
                this.columnName_FG2 = base.Columns["Name_FG2"];
                this.columnIDF1 = base.Columns["IDF1"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_FG2 = new System.Data.DataColumn("ID_FG2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_FG2);
                this.columnName_FG2 = new System.Data.DataColumn("Name_FG2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_FG2);
                this.columnIDF1 = new System.Data.DataColumn("IDF1", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF1);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_FG2}, true));
                this.columnID_FG2.AutoIncrement = true;
                this.columnID_FG2.AutoIncrementStep = -1;
                this.columnID_FG2.AllowDBNull = false;
                this.columnID_FG2.Unique = true;
                this.columnName_FG2.MaxLength = 50;
                this.columnIDF1.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2Row NewSPR_FarmG_level2Row() {
                return ((SPR_FarmG_level2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_FarmG_level2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_FarmG_level2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_FarmG_level2RowChanged != null)) {
                    this.SPR_FarmG_level2RowChanged(this, new SPR_FarmG_level2RowChangeEvent(((SPR_FarmG_level2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_FarmG_level2RowChanging != null)) {
                    this.SPR_FarmG_level2RowChanging(this, new SPR_FarmG_level2RowChangeEvent(((SPR_FarmG_level2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_FarmG_level2RowDeleted != null)) {
                    this.SPR_FarmG_level2RowDeleted(this, new SPR_FarmG_level2RowChangeEvent(((SPR_FarmG_level2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_FarmG_level2RowDeleting != null)) {
                    this.SPR_FarmG_level2RowDeleting(this, new SPR_FarmG_level2RowChangeEvent(((SPR_FarmG_level2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_FarmG_level2Row(SPR_FarmG_level2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_FarmG_level2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_FormDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_Form;
            
            private System.Data.DataColumn columnName_form;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormDataTable() {
                this.TableName = "SPR_Form";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_FormDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_FormDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_FormColumn {
                get {
                    return this.columnID_Form;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_formColumn {
                get {
                    return this.columnName_form;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRow this[int index] {
                get {
                    return ((SPR_FormRow)(this.Rows[index]));
                }
            }
            
            public event SPR_FormRowChangeEventHandler SPR_FormRowChanging;
            
            public event SPR_FormRowChangeEventHandler SPR_FormRowChanged;
            
            public event SPR_FormRowChangeEventHandler SPR_FormRowDeleting;
            
            public event SPR_FormRowChangeEventHandler SPR_FormRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_FormRow(SPR_FormRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRow AddSPR_FormRow(string Name_form, byte[] RW) {
                SPR_FormRow rowSPR_FormRow = ((SPR_FormRow)(this.NewRow()));
                rowSPR_FormRow.ItemArray = new object[] {
                        null,
                        Name_form,
                        RW};
                this.Rows.Add(rowSPR_FormRow);
                return rowSPR_FormRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRow FindByID_Form(int ID_Form) {
                return ((SPR_FormRow)(this.Rows.Find(new object[] {
                            ID_Form})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_FormDataTable cln = ((SPR_FormDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_FormDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_Form = base.Columns["ID_Form"];
                this.columnName_form = base.Columns["Name_form"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_Form = new System.Data.DataColumn("ID_Form", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_Form);
                this.columnName_form = new System.Data.DataColumn("Name_form", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_form);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_Form}, true));
                this.columnID_Form.AutoIncrement = true;
                this.columnID_Form.AutoIncrementStep = -1;
                this.columnID_Form.AllowDBNull = false;
                this.columnID_Form.ReadOnly = true;
                this.columnID_Form.Unique = true;
                this.columnName_form.MaxLength = 10;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRow NewSPR_FormRow() {
                return ((SPR_FormRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_FormRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_FormRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_FormRowChanged != null)) {
                    this.SPR_FormRowChanged(this, new SPR_FormRowChangeEvent(((SPR_FormRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_FormRowChanging != null)) {
                    this.SPR_FormRowChanging(this, new SPR_FormRowChangeEvent(((SPR_FormRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_FormRowDeleted != null)) {
                    this.SPR_FormRowDeleted(this, new SPR_FormRowChangeEvent(((SPR_FormRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_FormRowDeleting != null)) {
                    this.SPR_FormRowDeleting(this, new SPR_FormRowChangeEvent(((SPR_FormRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_FormRow(SPR_FormRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_FormDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_IzgDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_IZG;
            
            private System.Data.DataColumn columnName_Izg;
            
            private System.Data.DataColumn columnIDF_Country;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgDataTable() {
                this.TableName = "SPR_Izg";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_IzgDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_IzgDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_IZGColumn {
                get {
                    return this.columnID_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_IzgColumn {
                get {
                    return this.columnName_Izg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_CountryColumn {
                get {
                    return this.columnIDF_Country;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRow this[int index] {
                get {
                    return ((SPR_IzgRow)(this.Rows[index]));
                }
            }
            
            public event SPR_IzgRowChangeEventHandler SPR_IzgRowChanging;
            
            public event SPR_IzgRowChangeEventHandler SPR_IzgRowChanged;
            
            public event SPR_IzgRowChangeEventHandler SPR_IzgRowDeleting;
            
            public event SPR_IzgRowChangeEventHandler SPR_IzgRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_IzgRow(SPR_IzgRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRow AddSPR_IzgRow(string Name_Izg, SPR_CountryRow parentSPR_CountryRowByFK_SPR_IZG_SPR_Country, byte[] RW) {
                SPR_IzgRow rowSPR_IzgRow = ((SPR_IzgRow)(this.NewRow()));
                rowSPR_IzgRow.ItemArray = new object[] {
                        null,
                        Name_Izg,
                        parentSPR_CountryRowByFK_SPR_IZG_SPR_Country[0],
                        RW};
                this.Rows.Add(rowSPR_IzgRow);
                return rowSPR_IzgRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRow FindByID_IZG(int ID_IZG) {
                return ((SPR_IzgRow)(this.Rows.Find(new object[] {
                            ID_IZG})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_IzgDataTable cln = ((SPR_IzgDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_IzgDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_IZG = base.Columns["ID_IZG"];
                this.columnName_Izg = base.Columns["Name_Izg"];
                this.columnIDF_Country = base.Columns["IDF_Country"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_IZG = new System.Data.DataColumn("ID_IZG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_IZG);
                this.columnName_Izg = new System.Data.DataColumn("Name_Izg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Izg);
                this.columnIDF_Country = new System.Data.DataColumn("IDF_Country", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_Country);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_IZG}, true));
                this.columnID_IZG.AutoIncrement = true;
                this.columnID_IZG.AutoIncrementStep = -1;
                this.columnID_IZG.AllowDBNull = false;
                this.columnID_IZG.ReadOnly = true;
                this.columnID_IZG.Unique = true;
                this.columnName_Izg.AllowDBNull = false;
                this.columnName_Izg.MaxLength = 50;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRow NewSPR_IzgRow() {
                return ((SPR_IzgRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_IzgRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_IzgRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_IzgRowChanged != null)) {
                    this.SPR_IzgRowChanged(this, new SPR_IzgRowChangeEvent(((SPR_IzgRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_IzgRowChanging != null)) {
                    this.SPR_IzgRowChanging(this, new SPR_IzgRowChangeEvent(((SPR_IzgRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_IzgRowDeleted != null)) {
                    this.SPR_IzgRowDeleted(this, new SPR_IzgRowChangeEvent(((SPR_IzgRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_IzgRowDeleting != null)) {
                    this.SPR_IzgRowDeleting(this, new SPR_IzgRowChangeEvent(((SPR_IzgRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_IzgRow(SPR_IzgRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_IzgDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_Place_storageDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_Place;
            
            private System.Data.DataColumn columnName_Place;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageDataTable() {
                this.TableName = "SPR_Place_storage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_Place_storageDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_Place_storageDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_PlaceColumn {
                get {
                    return this.columnID_Place;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_PlaceColumn {
                get {
                    return this.columnName_Place;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRow this[int index] {
                get {
                    return ((SPR_Place_storageRow)(this.Rows[index]));
                }
            }
            
            public event SPR_Place_storageRowChangeEventHandler SPR_Place_storageRowChanging;
            
            public event SPR_Place_storageRowChangeEventHandler SPR_Place_storageRowChanged;
            
            public event SPR_Place_storageRowChangeEventHandler SPR_Place_storageRowDeleting;
            
            public event SPR_Place_storageRowChangeEventHandler SPR_Place_storageRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_Place_storageRow(SPR_Place_storageRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRow AddSPR_Place_storageRow(string Name_Place, byte[] RW) {
                SPR_Place_storageRow rowSPR_Place_storageRow = ((SPR_Place_storageRow)(this.NewRow()));
                rowSPR_Place_storageRow.ItemArray = new object[] {
                        null,
                        Name_Place,
                        RW};
                this.Rows.Add(rowSPR_Place_storageRow);
                return rowSPR_Place_storageRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRow FindByID_Place(int ID_Place) {
                return ((SPR_Place_storageRow)(this.Rows.Find(new object[] {
                            ID_Place})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_Place_storageDataTable cln = ((SPR_Place_storageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_Place_storageDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_Place = base.Columns["ID_Place"];
                this.columnName_Place = base.Columns["Name_Place"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_Place = new System.Data.DataColumn("ID_Place", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_Place);
                this.columnName_Place = new System.Data.DataColumn("Name_Place", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Place);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_Place}, true));
                this.columnID_Place.AutoIncrement = true;
                this.columnID_Place.AutoIncrementStep = -1;
                this.columnID_Place.AllowDBNull = false;
                this.columnID_Place.Unique = true;
                this.columnName_Place.MaxLength = 50;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRow NewSPR_Place_storageRow() {
                return ((SPR_Place_storageRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_Place_storageRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_Place_storageRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_Place_storageRowChanged != null)) {
                    this.SPR_Place_storageRowChanged(this, new SPR_Place_storageRowChangeEvent(((SPR_Place_storageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_Place_storageRowChanging != null)) {
                    this.SPR_Place_storageRowChanging(this, new SPR_Place_storageRowChangeEvent(((SPR_Place_storageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_Place_storageRowDeleted != null)) {
                    this.SPR_Place_storageRowDeleted(this, new SPR_Place_storageRowChangeEvent(((SPR_Place_storageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_Place_storageRowDeleting != null)) {
                    this.SPR_Place_storageRowDeleting(this, new SPR_Place_storageRowChangeEvent(((SPR_Place_storageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_Place_storageRow(SPR_Place_storageRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_Place_storageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_REGDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_REG;
            
            private System.Data.DataColumn columnIDF_TOV;
            
            private System.Data.DataColumn columnNum_reg;
            
            private System.Data.DataColumn columnDateBegin;
            
            private System.Data.DataColumn columnDateEnd;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGDataTable() {
                this.TableName = "SPR_REG";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_REGDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_REGDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_REGColumn {
                get {
                    return this.columnID_REG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_TOVColumn {
                get {
                    return this.columnIDF_TOV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Num_regColumn {
                get {
                    return this.columnNum_reg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateBeginColumn {
                get {
                    return this.columnDateBegin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateEndColumn {
                get {
                    return this.columnDateEnd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGRow this[int index] {
                get {
                    return ((SPR_REGRow)(this.Rows[index]));
                }
            }
            
            public event SPR_REGRowChangeEventHandler SPR_REGRowChanging;
            
            public event SPR_REGRowChangeEventHandler SPR_REGRowChanged;
            
            public event SPR_REGRowChangeEventHandler SPR_REGRowDeleting;
            
            public event SPR_REGRowChangeEventHandler SPR_REGRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_REGRow(SPR_REGRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGRow AddSPR_REGRow(int IDF_TOV, string Num_reg, System.DateTime DateBegin, System.DateTime DateEnd) {
                SPR_REGRow rowSPR_REGRow = ((SPR_REGRow)(this.NewRow()));
                rowSPR_REGRow.ItemArray = new object[] {
                        null,
                        IDF_TOV,
                        Num_reg,
                        DateBegin,
                        DateEnd};
                this.Rows.Add(rowSPR_REGRow);
                return rowSPR_REGRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGRow FindByID_REG(int ID_REG) {
                return ((SPR_REGRow)(this.Rows.Find(new object[] {
                            ID_REG})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_REGDataTable cln = ((SPR_REGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_REGDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_REG = base.Columns["ID_REG"];
                this.columnIDF_TOV = base.Columns["IDF_TOV"];
                this.columnNum_reg = base.Columns["Num_reg"];
                this.columnDateBegin = base.Columns["DateBegin"];
                this.columnDateEnd = base.Columns["DateEnd"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_REG = new System.Data.DataColumn("ID_REG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_REG);
                this.columnIDF_TOV = new System.Data.DataColumn("IDF_TOV", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_TOV);
                this.columnNum_reg = new System.Data.DataColumn("Num_reg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNum_reg);
                this.columnDateBegin = new System.Data.DataColumn("DateBegin", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateBegin);
                this.columnDateEnd = new System.Data.DataColumn("DateEnd", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateEnd);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_REG}, true));
                this.columnID_REG.AutoIncrement = true;
                this.columnID_REG.AutoIncrementStep = -1;
                this.columnID_REG.AllowDBNull = false;
                this.columnID_REG.Unique = true;
                this.columnIDF_TOV.AllowDBNull = false;
                this.columnNum_reg.AllowDBNull = false;
                this.columnNum_reg.MaxLength = 50;
                this.columnDateBegin.AllowDBNull = false;
                this.columnDateEnd.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGRow NewSPR_REGRow() {
                return ((SPR_REGRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_REGRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_REGRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_REGRowChanged != null)) {
                    this.SPR_REGRowChanged(this, new SPR_REGRowChangeEvent(((SPR_REGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_REGRowChanging != null)) {
                    this.SPR_REGRowChanging(this, new SPR_REGRowChangeEvent(((SPR_REGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_REGRowDeleted != null)) {
                    this.SPR_REGRowDeleted(this, new SPR_REGRowChangeEvent(((SPR_REGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_REGRowDeleting != null)) {
                    this.SPR_REGRowDeleting(this, new SPR_REGRowChangeEvent(((SPR_REGRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_REGRow(SPR_REGRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_REGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_SubstanceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_Sbc;
            
            private System.Data.DataColumn columnNAME_Sbc;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceDataTable() {
                this.TableName = "SPR_Substance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_SubstanceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_SubstanceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_SbcColumn {
                get {
                    return this.columnID_Sbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NAME_SbcColumn {
                get {
                    return this.columnNAME_Sbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRow this[int index] {
                get {
                    return ((SPR_SubstanceRow)(this.Rows[index]));
                }
            }
            
            public event SPR_SubstanceRowChangeEventHandler SPR_SubstanceRowChanging;
            
            public event SPR_SubstanceRowChangeEventHandler SPR_SubstanceRowChanged;
            
            public event SPR_SubstanceRowChangeEventHandler SPR_SubstanceRowDeleting;
            
            public event SPR_SubstanceRowChangeEventHandler SPR_SubstanceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_SubstanceRow(SPR_SubstanceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRow AddSPR_SubstanceRow(string NAME_Sbc, byte[] RW) {
                SPR_SubstanceRow rowSPR_SubstanceRow = ((SPR_SubstanceRow)(this.NewRow()));
                rowSPR_SubstanceRow.ItemArray = new object[] {
                        null,
                        NAME_Sbc,
                        RW};
                this.Rows.Add(rowSPR_SubstanceRow);
                return rowSPR_SubstanceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRow FindByID_Sbc(int ID_Sbc) {
                return ((SPR_SubstanceRow)(this.Rows.Find(new object[] {
                            ID_Sbc})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_SubstanceDataTable cln = ((SPR_SubstanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_SubstanceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_Sbc = base.Columns["ID_Sbc"];
                this.columnNAME_Sbc = base.Columns["NAME_Sbc"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_Sbc = new System.Data.DataColumn("ID_Sbc", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_Sbc);
                this.columnNAME_Sbc = new System.Data.DataColumn("NAME_Sbc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME_Sbc);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_Sbc}, true));
                this.columnID_Sbc.AutoIncrement = true;
                this.columnID_Sbc.AutoIncrementStep = -1;
                this.columnID_Sbc.AllowDBNull = false;
                this.columnID_Sbc.Unique = true;
                this.columnNAME_Sbc.MaxLength = 30;
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRow NewSPR_SubstanceRow() {
                return ((SPR_SubstanceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_SubstanceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_SubstanceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_SubstanceRowChanged != null)) {
                    this.SPR_SubstanceRowChanged(this, new SPR_SubstanceRowChangeEvent(((SPR_SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_SubstanceRowChanging != null)) {
                    this.SPR_SubstanceRowChanging(this, new SPR_SubstanceRowChangeEvent(((SPR_SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_SubstanceRowDeleted != null)) {
                    this.SPR_SubstanceRowDeleted(this, new SPR_SubstanceRowChangeEvent(((SPR_SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_SubstanceRowDeleting != null)) {
                    this.SPR_SubstanceRowDeleting(this, new SPR_SubstanceRowChangeEvent(((SPR_SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_SubstanceRow(SPR_SubstanceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_SubstanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SPR_TOVDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID_TOV;
            
            private System.Data.DataColumn columnName_Tov;
            
            private System.Data.DataColumn columnSmall_Name;
            
            private System.Data.DataColumn columnCena_IZG;
            
            private System.Data.DataColumn columnIDF_EI;
            
            private System.Data.DataColumn columnIDF_Form;
            
            private System.Data.DataColumn columnIDF_Place;
            
            private System.Data.DataColumn columnIDF_Sbc;
            
            private System.Data.DataColumn columnIDF_FG;
            
            private System.Data.DataColumn columnIDF_FG2;
            
            private System.Data.DataColumn columnIS_Recept;
            
            private System.Data.DataColumn columnIS_NDS;
            
            private System.Data.DataColumn columnID_IZG;
            
            private System.Data.DataColumn columnIS_One_Recept;
            
            private System.Data.DataColumn columnRW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVDataTable() {
                this.TableName = "SPR_TOV";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_TOVDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SPR_TOVDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_TOVColumn {
                get {
                    return this.columnID_TOV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Name_TovColumn {
                get {
                    return this.columnName_Tov;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Small_NameColumn {
                get {
                    return this.columnSmall_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Cena_IZGColumn {
                get {
                    return this.columnCena_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_EIColumn {
                get {
                    return this.columnIDF_EI;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_FormColumn {
                get {
                    return this.columnIDF_Form;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_PlaceColumn {
                get {
                    return this.columnIDF_Place;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_SbcColumn {
                get {
                    return this.columnIDF_Sbc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_FGColumn {
                get {
                    return this.columnIDF_FG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDF_FG2Column {
                get {
                    return this.columnIDF_FG2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IS_ReceptColumn {
                get {
                    return this.columnIS_Recept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IS_NDSColumn {
                get {
                    return this.columnIS_NDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ID_IZGColumn {
                get {
                    return this.columnID_IZG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IS_One_ReceptColumn {
                get {
                    return this.columnIS_One_Recept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWColumn {
                get {
                    return this.columnRW;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow this[int index] {
                get {
                    return ((SPR_TOVRow)(this.Rows[index]));
                }
            }
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowChanging;
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowChanged;
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowDeleting;
            
            public event SPR_TOVRowChangeEventHandler SPR_TOVRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSPR_TOVRow(SPR_TOVRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow AddSPR_TOVRow(string Name_Tov, string Small_Name, decimal Cena_IZG, SPR_EIRow parentSPR_EIRowByFK_SPR_TOV_SPR_EI, SPR_FormRow parentSPR_FormRowByFK_SPR_TOV_SPR_Form, SPR_Place_storageRow parentSPR_Place_storageRowByFK_SPR_TOV_SPR_Place_storage, SPR_SubstanceRow parentSPR_SubstanceRowByFK_SPR_TOV_SPR_Substance, SPR_Farm_GroupRow parentSPR_Farm_GroupRowByFK_SPR_TOV_SPR_Farm_Group, SPR_FarmG_level2Row parentSPR_FarmG_level2RowByFK_SPR_TOV_SPR_FarmG_level21, bool IS_Recept, bool IS_NDS, int ID_IZG, bool IS_One_Recept, byte[] RW) {
                SPR_TOVRow rowSPR_TOVRow = ((SPR_TOVRow)(this.NewRow()));
                rowSPR_TOVRow.ItemArray = new object[] {
                        null,
                        Name_Tov,
                        Small_Name,
                        Cena_IZG,
                        parentSPR_EIRowByFK_SPR_TOV_SPR_EI[0],
                        parentSPR_FormRowByFK_SPR_TOV_SPR_Form[0],
                        parentSPR_Place_storageRowByFK_SPR_TOV_SPR_Place_storage[0],
                        parentSPR_SubstanceRowByFK_SPR_TOV_SPR_Substance[0],
                        parentSPR_Farm_GroupRowByFK_SPR_TOV_SPR_Farm_Group[0],
                        parentSPR_FarmG_level2RowByFK_SPR_TOV_SPR_FarmG_level21[0],
                        IS_Recept,
                        IS_NDS,
                        ID_IZG,
                        IS_One_Recept,
                        RW};
                this.Rows.Add(rowSPR_TOVRow);
                return rowSPR_TOVRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow FindByID_TOV(int ID_TOV) {
                return ((SPR_TOVRow)(this.Rows.Find(new object[] {
                            ID_TOV})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SPR_TOVDataTable cln = ((SPR_TOVDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SPR_TOVDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID_TOV = base.Columns["ID_TOV"];
                this.columnName_Tov = base.Columns["Name_Tov"];
                this.columnSmall_Name = base.Columns["Small_Name"];
                this.columnCena_IZG = base.Columns["Cena_IZG"];
                this.columnIDF_EI = base.Columns["IDF_EI"];
                this.columnIDF_Form = base.Columns["IDF_Form"];
                this.columnIDF_Place = base.Columns["IDF_Place"];
                this.columnIDF_Sbc = base.Columns["IDF_Sbc"];
                this.columnIDF_FG = base.Columns["IDF_FG"];
                this.columnIDF_FG2 = base.Columns["IDF_FG2"];
                this.columnIS_Recept = base.Columns["IS_Recept"];
                this.columnIS_NDS = base.Columns["IS_NDS"];
                this.columnID_IZG = base.Columns["ID_IZG"];
                this.columnIS_One_Recept = base.Columns["IS_One_Recept"];
                this.columnRW = base.Columns["RW"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID_TOV = new System.Data.DataColumn("ID_TOV", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TOV);
                this.columnName_Tov = new System.Data.DataColumn("Name_Tov", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName_Tov);
                this.columnSmall_Name = new System.Data.DataColumn("Small_Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmall_Name);
                this.columnCena_IZG = new System.Data.DataColumn("Cena_IZG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCena_IZG);
                this.columnIDF_EI = new System.Data.DataColumn("IDF_EI", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_EI);
                this.columnIDF_Form = new System.Data.DataColumn("IDF_Form", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_Form);
                this.columnIDF_Place = new System.Data.DataColumn("IDF_Place", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_Place);
                this.columnIDF_Sbc = new System.Data.DataColumn("IDF_Sbc", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_Sbc);
                this.columnIDF_FG = new System.Data.DataColumn("IDF_FG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_FG);
                this.columnIDF_FG2 = new System.Data.DataColumn("IDF_FG2", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDF_FG2);
                this.columnIS_Recept = new System.Data.DataColumn("IS_Recept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_Recept);
                this.columnIS_NDS = new System.Data.DataColumn("IS_NDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_NDS);
                this.columnID_IZG = new System.Data.DataColumn("ID_IZG", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_IZG);
                this.columnIS_One_Recept = new System.Data.DataColumn("IS_One_Recept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_One_Recept);
                this.columnRW = new System.Data.DataColumn("RW", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRW);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID_TOV}, true));
                this.columnID_TOV.AutoIncrement = true;
                this.columnID_TOV.AutoIncrementStep = -1;
                this.columnID_TOV.AllowDBNull = false;
                this.columnID_TOV.ReadOnly = true;
                this.columnID_TOV.Unique = true;
                this.columnName_Tov.AllowDBNull = false;
                this.columnName_Tov.MaxLength = 50;
                this.columnSmall_Name.AllowDBNull = false;
                this.columnSmall_Name.MaxLength = 25;
                this.columnIS_Recept.AllowDBNull = false;
                this.columnIS_Recept.DefaultValue = ((bool)(false));
                this.columnIS_NDS.AllowDBNull = false;
                this.columnIS_NDS.DefaultValue = ((bool)(false));
                this.columnRW.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow NewSPR_TOVRow() {
                return ((SPR_TOVRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SPR_TOVRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SPR_TOVRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SPR_TOVRowChanged != null)) {
                    this.SPR_TOVRowChanged(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SPR_TOVRowChanging != null)) {
                    this.SPR_TOVRowChanging(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SPR_TOVRowDeleted != null)) {
                    this.SPR_TOVRowDeleted(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SPR_TOVRowDeleting != null)) {
                    this.SPR_TOVRowDeleting(this, new SPR_TOVRowChangeEvent(((SPR_TOVRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSPR_TOVRow(SPR_TOVRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SPR_TOVDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_CountryRow : System.Data.DataRow {
            
            private SPR_CountryDataTable tableSPR_Country;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_CountryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_Country = ((SPR_CountryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_country {
                get {
                    return ((int)(this[this.tableSPR_Country.ID_countryColumn]));
                }
                set {
                    this[this.tableSPR_Country.ID_countryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_country {
                get {
                    try {
                        return ((string)(this[this.tableSPR_Country.Name_countryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name_country\' in table \'SPR_Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Country.Name_countryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_Country.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Country.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_countryNull() {
                return this.IsNull(this.tableSPR_Country.Name_countryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_countryNull() {
                this[this.tableSPR_Country.Name_countryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_Country.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_Country.RWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRow[] GetSPR_IzgRows() {
                return ((SPR_IzgRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_IZG_SPR_Country"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_EIRow : System.Data.DataRow {
            
            private SPR_EIDataTable tableSPR_EI;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_EIRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_EI = ((SPR_EIDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_EI {
                get {
                    return ((int)(this[this.tableSPR_EI.ID_EIColumn]));
                }
                set {
                    this[this.tableSPR_EI.ID_EIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Ei {
                get {
                    try {
                        return ((string)(this[this.tableSPR_EI.Name_EiColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name_Ei\' in table \'SPR_EI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_EI.Name_EiColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Del {
                get {
                    try {
                        return ((bool)(this[this.tableSPR_EI.DelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Del\' in table \'SPR_EI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_EI.DelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_EI.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_EI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_EI.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_EiNull() {
                return this.IsNull(this.tableSPR_EI.Name_EiColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_EiNull() {
                this[this.tableSPR_EI.Name_EiColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDelNull() {
                return this.IsNull(this.tableSPR_EI.DelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDelNull() {
                this[this.tableSPR_EI.DelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_EI.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_EI.RWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_TOV_SPR_EI"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_Farm_GroupRow : System.Data.DataRow {
            
            private SPR_Farm_GroupDataTable tableSPR_Farm_Group;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_Farm_GroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_Farm_Group = ((SPR_Farm_GroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_FG {
                get {
                    return ((int)(this[this.tableSPR_Farm_Group.ID_FGColumn]));
                }
                set {
                    this[this.tableSPR_Farm_Group.ID_FGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME_FG {
                get {
                    try {
                        return ((string)(this[this.tableSPR_Farm_Group.NAME_FGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME_FG\' in table \'SPR_Farm_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Farm_Group.NAME_FGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_Farm_Group.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_Farm_Group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Farm_Group.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAME_FGNull() {
                return this.IsNull(this.tableSPR_Farm_Group.NAME_FGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAME_FGNull() {
                this[this.tableSPR_Farm_Group.NAME_FGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_Farm_Group.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_Farm_Group.RWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_TOV_SPR_Farm_Group"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_FarmG_level2Row : System.Data.DataRow {
            
            private SPR_FarmG_level2DataTable tableSPR_FarmG_level2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_FarmG_level2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_FarmG_level2 = ((SPR_FarmG_level2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_FG2 {
                get {
                    return ((int)(this[this.tableSPR_FarmG_level2.ID_FG2Column]));
                }
                set {
                    this[this.tableSPR_FarmG_level2.ID_FG2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_FG2 {
                get {
                    try {
                        return ((string)(this[this.tableSPR_FarmG_level2.Name_FG2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name_FG2\' in table \'SPR_FarmG_level2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_FarmG_level2.Name_FG2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF1 {
                get {
                    return ((int)(this[this.tableSPR_FarmG_level2.IDF1Column]));
                }
                set {
                    this[this.tableSPR_FarmG_level2.IDF1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_FG2Null() {
                return this.IsNull(this.tableSPR_FarmG_level2.Name_FG2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_FG2Null() {
                this[this.tableSPR_FarmG_level2.Name_FG2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_TOV_SPR_FarmG_level21"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_FormRow : System.Data.DataRow {
            
            private SPR_FormDataTable tableSPR_Form;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_FormRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_Form = ((SPR_FormDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_Form {
                get {
                    return ((int)(this[this.tableSPR_Form.ID_FormColumn]));
                }
                set {
                    this[this.tableSPR_Form.ID_FormColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_form {
                get {
                    try {
                        return ((string)(this[this.tableSPR_Form.Name_formColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name_form\' in table \'SPR_Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Form.Name_formColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_Form.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Form.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_formNull() {
                return this.IsNull(this.tableSPR_Form.Name_formColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_formNull() {
                this[this.tableSPR_Form.Name_formColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_Form.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_Form.RWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_TOV_SPR_Form"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_IzgRow : System.Data.DataRow {
            
            private SPR_IzgDataTable tableSPR_Izg;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_IzgRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_Izg = ((SPR_IzgDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_IZG {
                get {
                    return ((int)(this[this.tableSPR_Izg.ID_IZGColumn]));
                }
                set {
                    this[this.tableSPR_Izg.ID_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Izg {
                get {
                    return ((string)(this[this.tableSPR_Izg.Name_IzgColumn]));
                }
                set {
                    this[this.tableSPR_Izg.Name_IzgColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_Country {
                get {
                    try {
                        return ((int)(this[this.tableSPR_Izg.IDF_CountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_Country\' in table \'SPR_Izg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Izg.IDF_CountryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_Izg.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_Izg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Izg.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRow SPR_CountryRow {
                get {
                    return ((SPR_CountryRow)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_IZG_SPR_Country"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_IZG_SPR_Country"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_CountryNull() {
                return this.IsNull(this.tableSPR_Izg.IDF_CountryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_CountryNull() {
                this[this.tableSPR_Izg.IDF_CountryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_Izg.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_Izg.RWColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_Place_storageRow : System.Data.DataRow {
            
            private SPR_Place_storageDataTable tableSPR_Place_storage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_Place_storageRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_Place_storage = ((SPR_Place_storageDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_Place {
                get {
                    return ((int)(this[this.tableSPR_Place_storage.ID_PlaceColumn]));
                }
                set {
                    this[this.tableSPR_Place_storage.ID_PlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Place {
                get {
                    try {
                        return ((string)(this[this.tableSPR_Place_storage.Name_PlaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name_Place\' in table \'SPR_Place_storage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Place_storage.Name_PlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_Place_storage.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_Place_storage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Place_storage.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsName_PlaceNull() {
                return this.IsNull(this.tableSPR_Place_storage.Name_PlaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetName_PlaceNull() {
                this[this.tableSPR_Place_storage.Name_PlaceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_Place_storage.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_Place_storage.RWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_TOV_SPR_Place_storage"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_REGRow : System.Data.DataRow {
            
            private SPR_REGDataTable tableSPR_REG;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_REGRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_REG = ((SPR_REGDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_REG {
                get {
                    return ((int)(this[this.tableSPR_REG.ID_REGColumn]));
                }
                set {
                    this[this.tableSPR_REG.ID_REGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_TOV {
                get {
                    return ((int)(this[this.tableSPR_REG.IDF_TOVColumn]));
                }
                set {
                    this[this.tableSPR_REG.IDF_TOVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Num_reg {
                get {
                    return ((string)(this[this.tableSPR_REG.Num_regColumn]));
                }
                set {
                    this[this.tableSPR_REG.Num_regColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateBegin {
                get {
                    return ((System.DateTime)(this[this.tableSPR_REG.DateBeginColumn]));
                }
                set {
                    this[this.tableSPR_REG.DateBeginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateEnd {
                get {
                    return ((System.DateTime)(this[this.tableSPR_REG.DateEndColumn]));
                }
                set {
                    this[this.tableSPR_REG.DateEndColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_SubstanceRow : System.Data.DataRow {
            
            private SPR_SubstanceDataTable tableSPR_Substance;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_SubstanceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_Substance = ((SPR_SubstanceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_Sbc {
                get {
                    return ((int)(this[this.tableSPR_Substance.ID_SbcColumn]));
                }
                set {
                    this[this.tableSPR_Substance.ID_SbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME_Sbc {
                get {
                    try {
                        return ((string)(this[this.tableSPR_Substance.NAME_SbcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NAME_Sbc\' in table \'SPR_Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Substance.NAME_SbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_Substance.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_Substance.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAME_SbcNull() {
                return this.IsNull(this.tableSPR_Substance.NAME_SbcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAME_SbcNull() {
                this[this.tableSPR_Substance.NAME_SbcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_Substance.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_Substance.RWColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow[] GetSPR_TOVRows() {
                return ((SPR_TOVRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SPR_TOV_SPR_Substance"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SPR_TOVRow : System.Data.DataRow {
            
            private SPR_TOVDataTable tableSPR_TOV;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SPR_TOVRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSPR_TOV = ((SPR_TOVDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_TOV {
                get {
                    return ((int)(this[this.tableSPR_TOV.ID_TOVColumn]));
                }
                set {
                    this[this.tableSPR_TOV.ID_TOVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name_Tov {
                get {
                    return ((string)(this[this.tableSPR_TOV.Name_TovColumn]));
                }
                set {
                    this[this.tableSPR_TOV.Name_TovColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Small_Name {
                get {
                    return ((string)(this[this.tableSPR_TOV.Small_NameColumn]));
                }
                set {
                    this[this.tableSPR_TOV.Small_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cena_IZG {
                get {
                    try {
                        return ((decimal)(this[this.tableSPR_TOV.Cena_IZGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cena_IZG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.Cena_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_EI {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.IDF_EIColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_EI\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IDF_EIColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_Form {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.IDF_FormColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_Form\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IDF_FormColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_Place {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.IDF_PlaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_Place\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IDF_PlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_Sbc {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.IDF_SbcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_Sbc\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IDF_SbcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_FG {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.IDF_FGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_FG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IDF_FGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDF_FG2 {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.IDF_FG2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IDF_FG2\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IDF_FG2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IS_Recept {
                get {
                    return ((bool)(this[this.tableSPR_TOV.IS_ReceptColumn]));
                }
                set {
                    this[this.tableSPR_TOV.IS_ReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IS_NDS {
                get {
                    return ((bool)(this[this.tableSPR_TOV.IS_NDSColumn]));
                }
                set {
                    this[this.tableSPR_TOV.IS_NDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID_IZG {
                get {
                    try {
                        return ((int)(this[this.tableSPR_TOV.ID_IZGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID_IZG\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.ID_IZGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IS_One_Recept {
                get {
                    try {
                        return ((bool)(this[this.tableSPR_TOV.IS_One_ReceptColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IS_One_Recept\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.IS_One_ReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RW {
                get {
                    try {
                        return ((byte[])(this[this.tableSPR_TOV.RWColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RW\' in table \'SPR_TOV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSPR_TOV.RWColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRow SPR_EIRow {
                get {
                    return ((SPR_EIRow)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_TOV_SPR_EI"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_TOV_SPR_EI"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRow SPR_Farm_GroupRow {
                get {
                    return ((SPR_Farm_GroupRow)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_TOV_SPR_Farm_Group"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_TOV_SPR_Farm_Group"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2Row SPR_FarmG_level2Row {
                get {
                    return ((SPR_FarmG_level2Row)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_TOV_SPR_FarmG_level21"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_TOV_SPR_FarmG_level21"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRow SPR_FormRow {
                get {
                    return ((SPR_FormRow)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_TOV_SPR_Form"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_TOV_SPR_Form"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRow SPR_Place_storageRow {
                get {
                    return ((SPR_Place_storageRow)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_TOV_SPR_Place_storage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_TOV_SPR_Place_storage"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRow SPR_SubstanceRow {
                get {
                    return ((SPR_SubstanceRow)(this.GetParentRow(this.Table.ParentRelations["FK_SPR_TOV_SPR_Substance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SPR_TOV_SPR_Substance"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCena_IZGNull() {
                return this.IsNull(this.tableSPR_TOV.Cena_IZGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCena_IZGNull() {
                this[this.tableSPR_TOV.Cena_IZGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_EINull() {
                return this.IsNull(this.tableSPR_TOV.IDF_EIColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_EINull() {
                this[this.tableSPR_TOV.IDF_EIColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_FormNull() {
                return this.IsNull(this.tableSPR_TOV.IDF_FormColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_FormNull() {
                this[this.tableSPR_TOV.IDF_FormColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_PlaceNull() {
                return this.IsNull(this.tableSPR_TOV.IDF_PlaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_PlaceNull() {
                this[this.tableSPR_TOV.IDF_PlaceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_SbcNull() {
                return this.IsNull(this.tableSPR_TOV.IDF_SbcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_SbcNull() {
                this[this.tableSPR_TOV.IDF_SbcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_FGNull() {
                return this.IsNull(this.tableSPR_TOV.IDF_FGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_FGNull() {
                this[this.tableSPR_TOV.IDF_FGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDF_FG2Null() {
                return this.IsNull(this.tableSPR_TOV.IDF_FG2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDF_FG2Null() {
                this[this.tableSPR_TOV.IDF_FG2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsID_IZGNull() {
                return this.IsNull(this.tableSPR_TOV.ID_IZGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetID_IZGNull() {
                this[this.tableSPR_TOV.ID_IZGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIS_One_ReceptNull() {
                return this.IsNull(this.tableSPR_TOV.IS_One_ReceptColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIS_One_ReceptNull() {
                this[this.tableSPR_TOV.IS_One_ReceptColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRWNull() {
                return this.IsNull(this.tableSPR_TOV.RWColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRWNull() {
                this[this.tableSPR_TOV.RWColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_CountryRowChangeEvent : System.EventArgs {
            
            private SPR_CountryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRowChangeEvent(SPR_CountryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_EIRowChangeEvent : System.EventArgs {
            
            private SPR_EIRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRowChangeEvent(SPR_EIRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_EIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_Farm_GroupRowChangeEvent : System.EventArgs {
            
            private SPR_Farm_GroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRowChangeEvent(SPR_Farm_GroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Farm_GroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_FarmG_level2RowChangeEvent : System.EventArgs {
            
            private SPR_FarmG_level2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2RowChangeEvent(SPR_FarmG_level2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FarmG_level2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_FormRowChangeEvent : System.EventArgs {
            
            private SPR_FormRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRowChangeEvent(SPR_FormRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_FormRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_IzgRowChangeEvent : System.EventArgs {
            
            private SPR_IzgRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRowChangeEvent(SPR_IzgRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_IzgRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_Place_storageRowChangeEvent : System.EventArgs {
            
            private SPR_Place_storageRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRowChangeEvent(SPR_Place_storageRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_Place_storageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_REGRowChangeEvent : System.EventArgs {
            
            private SPR_REGRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGRowChangeEvent(SPR_REGRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_REGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_SubstanceRowChangeEvent : System.EventArgs {
            
            private SPR_SubstanceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRowChangeEvent(SPR_SubstanceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_SubstanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SPR_TOVRowChangeEvent : System.EventArgs {
            
            private SPR_TOVRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRowChangeEvent(SPR_TOVRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SPR_TOVRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SanSee.MDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_CountryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_CountryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_Country";
            tableMapping.ColumnMappings.Add("ID_country", "ID_country");
            tableMapping.ColumnMappings.Add("Name_country", "Name_country");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPR_Country] WHERE (([ID_country] = @Original_ID_country) AND " +
                "((@IsNull_RW = 1 AND [RW] IS NULL) OR ([RW] = @Original_RW)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_country", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPR_Country] ([Name_country]) VALUES (@Name_country);\r\nSELECT " +
                "ID_country, Name_country, RW FROM SPR_Country WHERE (ID_country = SCOPE_IDENTITY" +
                "())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SPR_Country] SET [Name_country] = @Name_country WHERE (([ID_country] = @Original_ID_country) AND ((@IsNull_RW = 1 AND [RW] IS NULL) OR ([RW] = @Original_RW)));
SELECT ID_country, Name_country, RW FROM SPR_Country WHERE (ID_country = @ID_country)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_country", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_country", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_country", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_country, Name_country, RW FROM dbo.SPR_Country";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_CountryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_CountryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_CountryDataTable dataTable = new MDataSet.SPR_CountryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_CountryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_Country");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_country, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_country));
            if ((Original_RW == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name_country) {
            if ((Name_country == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name_country));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name_country, int Original_ID_country, byte[] Original_RW, int ID_country) {
            if ((Name_country == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name_country));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_ID_country));
            if ((Original_RW == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ID_country));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_EITableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_EITableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_EI";
            tableMapping.ColumnMappings.Add("ID_EI", "ID_EI");
            tableMapping.ColumnMappings.Add("Name_Ei", "Name_Ei");
            tableMapping.ColumnMappings.Add("Del", "Del");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_EIDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_EI", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_EI", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_EIInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Ei", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Ei", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Del", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Del", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_EIUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Ei", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Ei", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Del", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Del", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_EI", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_EI", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EI", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_EI", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_EISelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_EIDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_EIDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_EIDataTable dataTable = new MDataSet.SPR_EIDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_EIDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_EI");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_EI, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_EI));
            if ((Original_RW == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name_Ei, System.Nullable<bool> Del) {
            if ((Name_Ei == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name_Ei));
            }
            if ((Del.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Del.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name_Ei, System.Nullable<bool> Del, int Original_ID_EI, byte[] Original_RW, int ID_EI) {
            if ((Name_Ei == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name_Ei));
            }
            if ((Del.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Del.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_EI));
            if ((Original_RW == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID_EI));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_Farm_GroupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_Farm_GroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_Farm_Group";
            tableMapping.ColumnMappings.Add("ID_FG", "ID_FG");
            tableMapping.ColumnMappings.Add("NAME_FG", "NAME_FG");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_Farm_GroupDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_Farm_GroupInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME_FG", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME_FG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_Farm_GroupUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME_FG", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME_FG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_FG", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_FG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_Farm_GroupSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_Farm_GroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_Farm_GroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_Farm_GroupDataTable dataTable = new MDataSet.SPR_Farm_GroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_Farm_GroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_Farm_Group");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_FG, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_FG));
            if ((Original_RW == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NAME_FG) {
            if ((NAME_FG == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME_FG));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME_FG, int Original_ID_FG, byte[] Original_RW, int ID_FG) {
            if ((NAME_FG == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME_FG));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID_FG));
            if ((Original_RW == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ID_FG));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_FarmG_level2TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_FarmG_level2TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_FarmG_level2";
            tableMapping.ColumnMappings.Add("ID_FG2", "ID_FG2");
            tableMapping.ColumnMappings.Add("Name_FG2", "Name_FG2");
            tableMapping.ColumnMappings.Add("IDF1", "IDF1");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPR_FarmG_level2] WHERE (([ID_FG2] = @Original_ID_FG2) AND ((@" +
                "IsNull_Name_FG2 = 1 AND [Name_FG2] IS NULL) OR ([Name_FG2] = @Original_Name_FG2)" +
                ") AND ([IDF1] = @Original_IDF1))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FG2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Name_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_FG2", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name_FG2", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_FG2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IDF1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF1", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPR_FarmG_level2] ([ID_FG2], [Name_FG2], [IDF1]) VALUES (@ID_F" +
                "G2, @Name_FG2, @IDF1);\r\nSELECT ID_FG2, Name_FG2, IDF1 FROM SPR_FarmG_level2 WHER" +
                "E (ID_FG2 = @ID_FG2)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FG2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_FG2", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_FG2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SPR_FarmG_level2] SET [ID_FG2] = @ID_FG2, [Name_FG2] = @Name_FG2, [IDF1] = @IDF1 WHERE (([ID_FG2] = @Original_ID_FG2) AND ((@IsNull_Name_FG2 = 1 AND [Name_FG2] IS NULL) OR ([Name_FG2] = @Original_Name_FG2)) AND ([IDF1] = @Original_IDF1));
SELECT ID_FG2, Name_FG2, IDF1 FROM SPR_FarmG_level2 WHERE (ID_FG2 = @ID_FG2)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FG2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_FG2", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_FG2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_FG2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Name_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_FG2", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name_FG2", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_FG2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IDF1", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF1", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_FG2, Name_FG2, IDF1 FROM dbo.SPR_FarmG_level2";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     SPR_FarmG_level2.ID_FG2, SPR_FarmG_level2.Name_FG2, SPR_FarmG_level2.I" +
                "DF1, SPR_Farm_Group.NAME_FG\r\nFROM         SPR_FarmG_level2 INNER JOIN\r\n         " +
                "             SPR_Farm_Group ON SPR_FarmG_level2.IDF1 = SPR_Farm_Group.ID_FG";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_FarmG_level2DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_FarmG_level2DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_FarmG_level2DataTable dataTable = new MDataSet.SPR_FarmG_level2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByF1(MDataSet.SPR_FarmG_level2DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.SPR_FarmG_level2DataTable GetDataByF1() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.SPR_FarmG_level2DataTable dataTable = new MDataSet.SPR_FarmG_level2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_FarmG_level2DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_FarmG_level2");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_FG2, string Original_Name_FG2, int Original_IDF1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_FG2));
            if ((Original_Name_FG2 == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Name_FG2));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_IDF1));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_FG2, string Name_FG2, int IDF1) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_FG2));
            if ((Name_FG2 == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name_FG2));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(IDF1));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_FG2, string Name_FG2, int IDF1, int Original_ID_FG2, string Original_Name_FG2, int Original_IDF1) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_FG2));
            if ((Name_FG2 == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name_FG2));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(IDF1));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_FG2));
            if ((Original_Name_FG2 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Name_FG2));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDF1));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_FormTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_FormTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_Form";
            tableMapping.ColumnMappings.Add("ID_Form", "ID_Form");
            tableMapping.ColumnMappings.Add("Name_form", "Name_form");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_FormDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_Form", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_Form", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_FormInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_form", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_form", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_FormUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_form", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_form", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_Form", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_Form", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_Form", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_Form", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_FormSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_FormDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_FormDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_FormDataTable dataTable = new MDataSet.SPR_FormDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_FormDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_Form");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_Form, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_Form));
            if ((Original_RW == null)) {
                throw new System.ArgumentNullException("Original_RW");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name_form) {
            if ((Name_form == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name_form));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name_form, int Original_ID_Form, byte[] Original_RW, int ID_Form) {
            if ((Name_form == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name_form));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID_Form));
            if ((Original_RW == null)) {
                throw new System.ArgumentNullException("Original_RW");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ID_Form));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_IzgTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_IzgTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_Izg";
            tableMapping.ColumnMappings.Add("ID_IZG", "ID_IZG");
            tableMapping.ColumnMappings.Add("Name_Izg", "Name_Izg");
            tableMapping.ColumnMappings.Add("IDF_Country", "IDF_Country");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_IzgDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_IZG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_IZG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_IzgInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Izg", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Izg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_IzgUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Izg", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Izg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Country", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Country", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_IZG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_IZG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_IZG", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_IZG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_IzgSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_IzgDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_IzgDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_IzgDataTable dataTable = new MDataSet.SPR_IzgDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_IzgDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_Izg");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_IZG, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_IZG));
            if ((Original_RW == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name_Izg, System.Nullable<int> IDF_Country) {
            if ((Name_Izg == null)) {
                throw new System.ArgumentNullException("Name_Izg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name_Izg));
            }
            if ((IDF_Country.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(IDF_Country.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name_Izg, System.Nullable<int> IDF_Country, int Original_ID_IZG, byte[] Original_RW, int ID_IZG) {
            if ((Name_Izg == null)) {
                throw new System.ArgumentNullException("Name_Izg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name_Izg));
            }
            if ((IDF_Country.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(IDF_Country.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID_IZG));
            if ((Original_RW == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID_IZG));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_Place_storageTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_Place_storageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_Place_storage";
            tableMapping.ColumnMappings.Add("ID_Place", "ID_Place");
            tableMapping.ColumnMappings.Add("Name_Place", "Name_Place");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_Place_storageDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_Place", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_Place", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_Place_storageInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Place", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Place", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_Place_storageUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Place", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Place", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_Place", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_Place", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_Place", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_Place", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_Place_storageSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_Place_storageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_Place_storageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_Place_storageDataTable dataTable = new MDataSet.SPR_Place_storageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_Place_storageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_Place_storage");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_Place, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_Place));
            if ((Original_RW == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name_Place) {
            if ((Name_Place == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name_Place));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name_Place, int Original_ID_Place, byte[] Original_RW, int ID_Place) {
            if ((Name_Place == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name_Place));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID_Place));
            if ((Original_RW == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ID_Place));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_REGTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_REGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_REG";
            tableMapping.ColumnMappings.Add("ID_REG", "ID_REG");
            tableMapping.ColumnMappings.Add("IDF_TOV", "IDF_TOV");
            tableMapping.ColumnMappings.Add("Num_reg", "Num_reg");
            tableMapping.ColumnMappings.Add("DateBegin", "DateBegin");
            tableMapping.ColumnMappings.Add("DateEnd", "DateEnd");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SPR_REG] WHERE (([ID_REG] = @Original_ID_REG) AND ([IDF_TOV] =" +
                " @Original_IDF_TOV) AND ([Num_reg] = @Original_Num_reg) AND ([DateBegin] = @Orig" +
                "inal_DateBegin) AND ([DateEnd] = @Original_DateEnd))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_REG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_REG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IDF_TOV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_TOV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Num_reg", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Num_reg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateBegin", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateBegin", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateEnd", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateEnd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SPR_REG] ([ID_REG], [IDF_TOV], [Num_reg], [DateBegin], [DateEn" +
                "d]) VALUES (@ID_REG, @IDF_TOV, @Num_reg, @DateBegin, @DateEnd);\r\nSELECT ID_REG, " +
                "IDF_TOV, Num_reg, DateBegin, DateEnd FROM SPR_REG WHERE (ID_REG = @ID_REG)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_REG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_REG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_TOV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_TOV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Num_reg", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Num_reg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateBegin", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateBegin", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateEnd", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateEnd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SPR_REG] SET [ID_REG] = @ID_REG, [IDF_TOV] = @IDF_TOV, [Num_reg] = @Num_reg, [DateBegin] = @DateBegin, [DateEnd] = @DateEnd WHERE (([ID_REG] = @Original_ID_REG) AND ([IDF_TOV] = @Original_IDF_TOV) AND ([Num_reg] = @Original_Num_reg) AND ([DateBegin] = @Original_DateBegin) AND ([DateEnd] = @Original_DateEnd));
SELECT ID_REG, IDF_TOV, Num_reg, DateBegin, DateEnd FROM SPR_REG WHERE (ID_REG = @ID_REG)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_REG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_REG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_TOV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_TOV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Num_reg", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Num_reg", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateBegin", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateBegin", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateEnd", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateEnd", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_REG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_REG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IDF_TOV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_TOV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Num_reg", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Num_reg", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateBegin", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateBegin", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DateEnd", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateEnd", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_REG, IDF_TOV, Num_reg, DateBegin, DateEnd FROM dbo.SPR_REG";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_REGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_REGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_REGDataTable dataTable = new MDataSet.SPR_REGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_REGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_REG");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_REG, int Original_IDF_TOV, string Original_Num_reg, System.DateTime Original_DateBegin, System.DateTime Original_DateEnd) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_REG));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_IDF_TOV));
            if ((Original_Num_reg == null)) {
                throw new System.ArgumentNullException("Original_Num_reg");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Num_reg));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_DateBegin));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DateEnd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_REG, int IDF_TOV, string Num_reg, System.DateTime DateBegin, System.DateTime DateEnd) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_REG));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(IDF_TOV));
            if ((Num_reg == null)) {
                throw new System.ArgumentNullException("Num_reg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Num_reg));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateBegin));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DateEnd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_REG, int IDF_TOV, string Num_reg, System.DateTime DateBegin, System.DateTime DateEnd, int Original_ID_REG, int Original_IDF_TOV, string Original_Num_reg, System.DateTime Original_DateBegin, System.DateTime Original_DateEnd) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_REG));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(IDF_TOV));
            if ((Num_reg == null)) {
                throw new System.ArgumentNullException("Num_reg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Num_reg));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateBegin));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DateEnd));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID_REG));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_IDF_TOV));
            if ((Original_Num_reg == null)) {
                throw new System.ArgumentNullException("Original_Num_reg");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Num_reg));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_DateBegin));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_DateEnd));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_SubstanceTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_SubstanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_Substance";
            tableMapping.ColumnMappings.Add("ID_Sbc", "ID_Sbc");
            tableMapping.ColumnMappings.Add("NAME_Sbc", "NAME_Sbc");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_SubstanceDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_Sbc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_Sbc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_SubstanceInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME_Sbc", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME_Sbc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_SubstanceUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NAME_Sbc", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NAME_Sbc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_Sbc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_Sbc", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RW", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_Sbc", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_Sbc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_SubstanceSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_SubstanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_SubstanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_SubstanceDataTable dataTable = new MDataSet.SPR_SubstanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_SubstanceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_Substance");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_Sbc, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_Sbc));
            if ((Original_RW == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string NAME_Sbc) {
            if ((NAME_Sbc == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME_Sbc));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME_Sbc, int Original_ID_Sbc, byte[] Original_RW, int ID_Sbc) {
            if ((NAME_Sbc == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME_Sbc));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID_Sbc));
            if ((Original_RW == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ID_Sbc));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SPR_TOVTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPR_TOVTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SPR_TOV";
            tableMapping.ColumnMappings.Add("ID_TOV", "ID_TOV");
            tableMapping.ColumnMappings.Add("Name_Tov", "Name_Tov");
            tableMapping.ColumnMappings.Add("Small_Name", "Small_Name");
            tableMapping.ColumnMappings.Add("Cena_IZG", "Cena_IZG");
            tableMapping.ColumnMappings.Add("IDF_EI", "IDF_EI");
            tableMapping.ColumnMappings.Add("IDF_Form", "IDF_Form");
            tableMapping.ColumnMappings.Add("IDF_Place", "IDF_Place");
            tableMapping.ColumnMappings.Add("IDF_Sbc", "IDF_Sbc");
            tableMapping.ColumnMappings.Add("IDF_FG", "IDF_FG");
            tableMapping.ColumnMappings.Add("IDF_FG2", "IDF_FG2");
            tableMapping.ColumnMappings.Add("IS_Recept", "IS_Recept");
            tableMapping.ColumnMappings.Add("IS_NDS", "IS_NDS");
            tableMapping.ColumnMappings.Add("ID_IZG", "ID_IZG");
            tableMapping.ColumnMappings.Add("IS_One_Recept", "IS_One_Recept");
            tableMapping.ColumnMappings.Add("RW", "RW");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SPR_TOVDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_TOV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_TOV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SPR_TOVInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Tov", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Tov", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Small_Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Small_Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cena_IZG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 10, 2, "Cena_IZG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_EI", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_EI", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Form", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Form", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Place", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Place", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Sbc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Sbc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_FG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_FG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_FG2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IS_Recept", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IS_Recept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IS_NDS", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IS_NDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_IZG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_IZG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IS_One_Recept", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IS_One_Recept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SPR_TOVUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name_Tov", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name_Tov", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Small_Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Small_Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cena_IZG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 10, 2, "Cena_IZG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_EI", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_EI", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Form", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Form", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Place", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Place", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_Sbc", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_Sbc", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_FG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_FG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IDF_FG2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IDF_FG2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IS_Recept", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IS_Recept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IS_NDS", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IS_NDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_IZG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_IZG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IS_One_Recept", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IS_One_Recept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID_TOV", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID_TOV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RW", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RW", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_TOV", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID_TOV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SanSee.Properties.Settings.Default.TRADESALVConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SPR_TOVSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SPR_TOVDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SPR_TOVDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SPR_TOVDataTable dataTable = new MDataSet.SPR_TOVDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SPR_TOVDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SPR_TOV");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_TOV, byte[] Original_RW) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID_TOV));
            if ((Original_RW == null)) {
                throw new System.ArgumentNullException("Original_RW");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RW));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name_Tov, string Small_Name, System.Nullable<decimal> Cena_IZG, System.Nullable<int> IDF_EI, System.Nullable<int> IDF_Form, System.Nullable<int> IDF_Place, System.Nullable<int> IDF_Sbc, System.Nullable<int> IDF_FG, System.Nullable<int> IDF_FG2, bool IS_Recept, bool IS_NDS, System.Nullable<int> ID_IZG, System.Nullable<bool> IS_One_Recept) {
            if ((Name_Tov == null)) {
                throw new System.ArgumentNullException("Name_Tov");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name_Tov));
            }
            if ((Small_Name == null)) {
                throw new System.ArgumentNullException("Small_Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Small_Name));
            }
            if ((Cena_IZG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Cena_IZG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((IDF_EI.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(IDF_EI.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((IDF_Form.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(IDF_Form.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((IDF_Place.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(IDF_Place.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((IDF_Sbc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(IDF_Sbc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((IDF_FG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(IDF_FG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IDF_FG2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(IDF_FG2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(IS_Recept));
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(IS_NDS));
            if ((ID_IZG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(ID_IZG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((IS_One_Recept.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(IS_One_Recept.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Name_Tov, 
                    string Small_Name, 
                    System.Nullable<decimal> Cena_IZG, 
                    System.Nullable<int> IDF_EI, 
                    System.Nullable<int> IDF_Form, 
                    System.Nullable<int> IDF_Place, 
                    System.Nullable<int> IDF_Sbc, 
                    System.Nullable<int> IDF_FG, 
                    System.Nullable<int> IDF_FG2, 
                    bool IS_Recept, 
                    bool IS_NDS, 
                    System.Nullable<int> ID_IZG, 
                    System.Nullable<bool> IS_One_Recept, 
                    int Original_ID_TOV, 
                    byte[] Original_RW, 
                    int ID_TOV) {
            if ((Name_Tov == null)) {
                throw new System.ArgumentNullException("Name_Tov");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name_Tov));
            }
            if ((Small_Name == null)) {
                throw new System.ArgumentNullException("Small_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Small_Name));
            }
            if ((Cena_IZG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Cena_IZG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((IDF_EI.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(IDF_EI.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((IDF_Form.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(IDF_Form.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((IDF_Place.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(IDF_Place.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((IDF_Sbc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(IDF_Sbc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((IDF_FG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(IDF_FG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IDF_FG2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(IDF_FG2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(IS_Recept));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(IS_NDS));
            if ((ID_IZG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ID_IZG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((IS_One_Recept.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(IS_One_Recept.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_ID_TOV));
            if ((Original_RW == null)) {
                throw new System.ArgumentNullException("Original_RW");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((byte[])(Original_RW));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(ID_TOV));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591