//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RetailTrade {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MDataSet : System.Data.DataSet {
        
        private CountryDataTable tableCountry;
        
        private UnitDataTable tableUnit;
        
        private DocumentTypeDataTable tableDocumentType;
        
        private FarmGroupDataTable tableFarmGroup;
        
        private InvoiceDetailDataTable tableInvoiceDetail;
        
        private InvoiceMasterDataTable tableInvoiceMaster;
        
        private ManufacturerDataTable tableManufacturer;
        
        private OrganizationDataTable tableOrganization;
        
        private PackingDataTable tablePacking;
        
        private ReceiptDetailDataTable tableReceiptDetail;
        
        private ReceiptMasterDataTable tableReceiptMaster;
        
        private ReceiptRemainsDataTable tableReceiptRemains;
        
        private StockDataTable tableStock;
        
        private StorageConditionDataTable tableStorageCondition;
        
        private SubstanceDataTable tableSubstance;
        
        private TradePutletDataTable tableTradePutlet;
        
        private FarmGroupLevel2DataTable tableFarmGroupLevel2;
        
        private ProductDataTable tableProduct;
        
        private ReceiptMasterNewDataTable tableReceiptMasterNew;
        
        private System.Data.DataRelation relationFK_InvoiceDetail_InvoiceMaster;
        
        private System.Data.DataRelation relationCountry_Manufacturer;
        
        private System.Data.DataRelation relationFK_FarmGroupLevel2_FarmGroup;
        
        private System.Data.DataRelation relationFK_ReceiptDetail_Product;
        
        private System.Data.DataRelation relationFK_Product_FarmGroupLevel2;
        
        private System.Data.DataRelation relationFK_Product_Packing;
        
        private System.Data.DataRelation relationFK_Product_StorageCondition;
        
        private System.Data.DataRelation relationFK_Product_Substance;
        
        private System.Data.DataRelation relationFK_Product_Unit;
        
        private System.Data.DataRelation relationManufacturer_Product;
        
        private System.Data.DataRelation relationFK_InvoiceMaster_Organization;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Organization;
        
        private System.Data.DataRelation relationTradePutlet_Stock;
        
        private System.Data.DataRelation relationFK_InvoiceMaster_Stock;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Stock;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Stock1;
        
        private System.Data.DataRelation relationReceiptMaster_ReceiptDetail;
        
        private System.Data.DataRelation relationReceiptMasterNew_ReceiptDetail;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["Unit"] != null)) {
                    base.Tables.Add(new UnitDataTable(ds.Tables["Unit"]));
                }
                if ((ds.Tables["DocumentType"] != null)) {
                    base.Tables.Add(new DocumentTypeDataTable(ds.Tables["DocumentType"]));
                }
                if ((ds.Tables["FarmGroup"] != null)) {
                    base.Tables.Add(new FarmGroupDataTable(ds.Tables["FarmGroup"]));
                }
                if ((ds.Tables["InvoiceDetail"] != null)) {
                    base.Tables.Add(new InvoiceDetailDataTable(ds.Tables["InvoiceDetail"]));
                }
                if ((ds.Tables["InvoiceMaster"] != null)) {
                    base.Tables.Add(new InvoiceMasterDataTable(ds.Tables["InvoiceMaster"]));
                }
                if ((ds.Tables["Manufacturer"] != null)) {
                    base.Tables.Add(new ManufacturerDataTable(ds.Tables["Manufacturer"]));
                }
                if ((ds.Tables["Organization"] != null)) {
                    base.Tables.Add(new OrganizationDataTable(ds.Tables["Organization"]));
                }
                if ((ds.Tables["Packing"] != null)) {
                    base.Tables.Add(new PackingDataTable(ds.Tables["Packing"]));
                }
                if ((ds.Tables["ReceiptDetail"] != null)) {
                    base.Tables.Add(new ReceiptDetailDataTable(ds.Tables["ReceiptDetail"]));
                }
                if ((ds.Tables["ReceiptMaster"] != null)) {
                    base.Tables.Add(new ReceiptMasterDataTable(ds.Tables["ReceiptMaster"]));
                }
                if ((ds.Tables["ReceiptRemains"] != null)) {
                    base.Tables.Add(new ReceiptRemainsDataTable(ds.Tables["ReceiptRemains"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                if ((ds.Tables["StorageCondition"] != null)) {
                    base.Tables.Add(new StorageConditionDataTable(ds.Tables["StorageCondition"]));
                }
                if ((ds.Tables["Substance"] != null)) {
                    base.Tables.Add(new SubstanceDataTable(ds.Tables["Substance"]));
                }
                if ((ds.Tables["TradePutlet"] != null)) {
                    base.Tables.Add(new TradePutletDataTable(ds.Tables["TradePutlet"]));
                }
                if ((ds.Tables["FarmGroupLevel2"] != null)) {
                    base.Tables.Add(new FarmGroupLevel2DataTable(ds.Tables["FarmGroupLevel2"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["ReceiptMasterNew"] != null)) {
                    base.Tables.Add(new ReceiptMasterNewDataTable(ds.Tables["ReceiptMasterNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CountryDataTable Country {
            get {
                return this.tableCountry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitDataTable Unit {
            get {
                return this.tableUnit;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DocumentTypeDataTable DocumentType {
            get {
                return this.tableDocumentType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FarmGroupDataTable FarmGroup {
            get {
                return this.tableFarmGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDetailDataTable InvoiceDetail {
            get {
                return this.tableInvoiceDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceMasterDataTable InvoiceMaster {
            get {
                return this.tableInvoiceMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ManufacturerDataTable Manufacturer {
            get {
                return this.tableManufacturer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrganizationDataTable Organization {
            get {
                return this.tableOrganization;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PackingDataTable Packing {
            get {
                return this.tablePacking;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptDetailDataTable ReceiptDetail {
            get {
                return this.tableReceiptDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptMasterDataTable ReceiptMaster {
            get {
                return this.tableReceiptMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptRemainsDataTable ReceiptRemains {
            get {
                return this.tableReceiptRemains;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDataTable Stock {
            get {
                return this.tableStock;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StorageConditionDataTable StorageCondition {
            get {
                return this.tableStorageCondition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubstanceDataTable Substance {
            get {
                return this.tableSubstance;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TradePutletDataTable TradePutlet {
            get {
                return this.tableTradePutlet;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FarmGroupLevel2DataTable FarmGroupLevel2 {
            get {
                return this.tableFarmGroupLevel2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductDataTable Product {
            get {
                return this.tableProduct;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptMasterNewDataTable ReceiptMasterNew {
            get {
                return this.tableReceiptMasterNew;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MDataSet cln = ((MDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["Unit"] != null)) {
                    base.Tables.Add(new UnitDataTable(ds.Tables["Unit"]));
                }
                if ((ds.Tables["DocumentType"] != null)) {
                    base.Tables.Add(new DocumentTypeDataTable(ds.Tables["DocumentType"]));
                }
                if ((ds.Tables["FarmGroup"] != null)) {
                    base.Tables.Add(new FarmGroupDataTable(ds.Tables["FarmGroup"]));
                }
                if ((ds.Tables["InvoiceDetail"] != null)) {
                    base.Tables.Add(new InvoiceDetailDataTable(ds.Tables["InvoiceDetail"]));
                }
                if ((ds.Tables["InvoiceMaster"] != null)) {
                    base.Tables.Add(new InvoiceMasterDataTable(ds.Tables["InvoiceMaster"]));
                }
                if ((ds.Tables["Manufacturer"] != null)) {
                    base.Tables.Add(new ManufacturerDataTable(ds.Tables["Manufacturer"]));
                }
                if ((ds.Tables["Organization"] != null)) {
                    base.Tables.Add(new OrganizationDataTable(ds.Tables["Organization"]));
                }
                if ((ds.Tables["Packing"] != null)) {
                    base.Tables.Add(new PackingDataTable(ds.Tables["Packing"]));
                }
                if ((ds.Tables["ReceiptDetail"] != null)) {
                    base.Tables.Add(new ReceiptDetailDataTable(ds.Tables["ReceiptDetail"]));
                }
                if ((ds.Tables["ReceiptMaster"] != null)) {
                    base.Tables.Add(new ReceiptMasterDataTable(ds.Tables["ReceiptMaster"]));
                }
                if ((ds.Tables["ReceiptRemains"] != null)) {
                    base.Tables.Add(new ReceiptRemainsDataTable(ds.Tables["ReceiptRemains"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                if ((ds.Tables["StorageCondition"] != null)) {
                    base.Tables.Add(new StorageConditionDataTable(ds.Tables["StorageCondition"]));
                }
                if ((ds.Tables["Substance"] != null)) {
                    base.Tables.Add(new SubstanceDataTable(ds.Tables["Substance"]));
                }
                if ((ds.Tables["TradePutlet"] != null)) {
                    base.Tables.Add(new TradePutletDataTable(ds.Tables["TradePutlet"]));
                }
                if ((ds.Tables["FarmGroupLevel2"] != null)) {
                    base.Tables.Add(new FarmGroupLevel2DataTable(ds.Tables["FarmGroupLevel2"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["ReceiptMasterNew"] != null)) {
                    base.Tables.Add(new ReceiptMasterNewDataTable(ds.Tables["ReceiptMasterNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCountry = ((CountryDataTable)(base.Tables["Country"]));
            if ((initTable == true)) {
                if ((this.tableCountry != null)) {
                    this.tableCountry.InitVars();
                }
            }
            this.tableUnit = ((UnitDataTable)(base.Tables["Unit"]));
            if ((initTable == true)) {
                if ((this.tableUnit != null)) {
                    this.tableUnit.InitVars();
                }
            }
            this.tableDocumentType = ((DocumentTypeDataTable)(base.Tables["DocumentType"]));
            if ((initTable == true)) {
                if ((this.tableDocumentType != null)) {
                    this.tableDocumentType.InitVars();
                }
            }
            this.tableFarmGroup = ((FarmGroupDataTable)(base.Tables["FarmGroup"]));
            if ((initTable == true)) {
                if ((this.tableFarmGroup != null)) {
                    this.tableFarmGroup.InitVars();
                }
            }
            this.tableInvoiceDetail = ((InvoiceDetailDataTable)(base.Tables["InvoiceDetail"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceDetail != null)) {
                    this.tableInvoiceDetail.InitVars();
                }
            }
            this.tableInvoiceMaster = ((InvoiceMasterDataTable)(base.Tables["InvoiceMaster"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceMaster != null)) {
                    this.tableInvoiceMaster.InitVars();
                }
            }
            this.tableManufacturer = ((ManufacturerDataTable)(base.Tables["Manufacturer"]));
            if ((initTable == true)) {
                if ((this.tableManufacturer != null)) {
                    this.tableManufacturer.InitVars();
                }
            }
            this.tableOrganization = ((OrganizationDataTable)(base.Tables["Organization"]));
            if ((initTable == true)) {
                if ((this.tableOrganization != null)) {
                    this.tableOrganization.InitVars();
                }
            }
            this.tablePacking = ((PackingDataTable)(base.Tables["Packing"]));
            if ((initTable == true)) {
                if ((this.tablePacking != null)) {
                    this.tablePacking.InitVars();
                }
            }
            this.tableReceiptDetail = ((ReceiptDetailDataTable)(base.Tables["ReceiptDetail"]));
            if ((initTable == true)) {
                if ((this.tableReceiptDetail != null)) {
                    this.tableReceiptDetail.InitVars();
                }
            }
            this.tableReceiptMaster = ((ReceiptMasterDataTable)(base.Tables["ReceiptMaster"]));
            if ((initTable == true)) {
                if ((this.tableReceiptMaster != null)) {
                    this.tableReceiptMaster.InitVars();
                }
            }
            this.tableReceiptRemains = ((ReceiptRemainsDataTable)(base.Tables["ReceiptRemains"]));
            if ((initTable == true)) {
                if ((this.tableReceiptRemains != null)) {
                    this.tableReceiptRemains.InitVars();
                }
            }
            this.tableStock = ((StockDataTable)(base.Tables["Stock"]));
            if ((initTable == true)) {
                if ((this.tableStock != null)) {
                    this.tableStock.InitVars();
                }
            }
            this.tableStorageCondition = ((StorageConditionDataTable)(base.Tables["StorageCondition"]));
            if ((initTable == true)) {
                if ((this.tableStorageCondition != null)) {
                    this.tableStorageCondition.InitVars();
                }
            }
            this.tableSubstance = ((SubstanceDataTable)(base.Tables["Substance"]));
            if ((initTable == true)) {
                if ((this.tableSubstance != null)) {
                    this.tableSubstance.InitVars();
                }
            }
            this.tableTradePutlet = ((TradePutletDataTable)(base.Tables["TradePutlet"]));
            if ((initTable == true)) {
                if ((this.tableTradePutlet != null)) {
                    this.tableTradePutlet.InitVars();
                }
            }
            this.tableFarmGroupLevel2 = ((FarmGroupLevel2DataTable)(base.Tables["FarmGroupLevel2"]));
            if ((initTable == true)) {
                if ((this.tableFarmGroupLevel2 != null)) {
                    this.tableFarmGroupLevel2.InitVars();
                }
            }
            this.tableProduct = ((ProductDataTable)(base.Tables["Product"]));
            if ((initTable == true)) {
                if ((this.tableProduct != null)) {
                    this.tableProduct.InitVars();
                }
            }
            this.tableReceiptMasterNew = ((ReceiptMasterNewDataTable)(base.Tables["ReceiptMasterNew"]));
            if ((initTable == true)) {
                if ((this.tableReceiptMasterNew != null)) {
                    this.tableReceiptMasterNew.InitVars();
                }
            }
            this.relationFK_InvoiceDetail_InvoiceMaster = this.Relations["FK_InvoiceDetail_InvoiceMaster"];
            this.relationCountry_Manufacturer = this.Relations["Country_Manufacturer"];
            this.relationFK_FarmGroupLevel2_FarmGroup = this.Relations["FK_FarmGroupLevel2_FarmGroup"];
            this.relationFK_ReceiptDetail_Product = this.Relations["FK_ReceiptDetail_Product"];
            this.relationFK_Product_FarmGroupLevel2 = this.Relations["FK_Product_FarmGroupLevel2"];
            this.relationFK_Product_Packing = this.Relations["FK_Product_Packing"];
            this.relationFK_Product_StorageCondition = this.Relations["FK_Product_StorageCondition"];
            this.relationFK_Product_Substance = this.Relations["FK_Product_Substance"];
            this.relationFK_Product_Unit = this.Relations["FK_Product_Unit"];
            this.relationManufacturer_Product = this.Relations["Manufacturer_Product"];
            this.relationFK_InvoiceMaster_Organization = this.Relations["FK_InvoiceMaster_Organization"];
            this.relationFK_ReceiptMaster_Organization = this.Relations["FK_ReceiptMaster_Organization"];
            this.relationTradePutlet_Stock = this.Relations["TradePutlet_Stock"];
            this.relationFK_InvoiceMaster_Stock = this.Relations["FK_InvoiceMaster_Stock"];
            this.relationFK_ReceiptMaster_Stock = this.Relations["FK_ReceiptMaster_Stock"];
            this.relationFK_ReceiptMaster_Stock1 = this.Relations["FK_ReceiptMaster_Stock1"];
            this.relationReceiptMaster_ReceiptDetail = this.Relations["ReceiptMaster_ReceiptDetail"];
            this.relationReceiptMasterNew_ReceiptDetail = this.Relations["ReceiptMasterNew_ReceiptDetail"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCountry = new CountryDataTable();
            base.Tables.Add(this.tableCountry);
            this.tableUnit = new UnitDataTable();
            base.Tables.Add(this.tableUnit);
            this.tableDocumentType = new DocumentTypeDataTable();
            base.Tables.Add(this.tableDocumentType);
            this.tableFarmGroup = new FarmGroupDataTable();
            base.Tables.Add(this.tableFarmGroup);
            this.tableInvoiceDetail = new InvoiceDetailDataTable();
            base.Tables.Add(this.tableInvoiceDetail);
            this.tableInvoiceMaster = new InvoiceMasterDataTable();
            base.Tables.Add(this.tableInvoiceMaster);
            this.tableManufacturer = new ManufacturerDataTable();
            base.Tables.Add(this.tableManufacturer);
            this.tableOrganization = new OrganizationDataTable();
            base.Tables.Add(this.tableOrganization);
            this.tablePacking = new PackingDataTable();
            base.Tables.Add(this.tablePacking);
            this.tableReceiptDetail = new ReceiptDetailDataTable();
            base.Tables.Add(this.tableReceiptDetail);
            this.tableReceiptMaster = new ReceiptMasterDataTable();
            base.Tables.Add(this.tableReceiptMaster);
            this.tableReceiptRemains = new ReceiptRemainsDataTable();
            base.Tables.Add(this.tableReceiptRemains);
            this.tableStock = new StockDataTable();
            base.Tables.Add(this.tableStock);
            this.tableStorageCondition = new StorageConditionDataTable();
            base.Tables.Add(this.tableStorageCondition);
            this.tableSubstance = new SubstanceDataTable();
            base.Tables.Add(this.tableSubstance);
            this.tableTradePutlet = new TradePutletDataTable();
            base.Tables.Add(this.tableTradePutlet);
            this.tableFarmGroupLevel2 = new FarmGroupLevel2DataTable();
            base.Tables.Add(this.tableFarmGroupLevel2);
            this.tableProduct = new ProductDataTable();
            base.Tables.Add(this.tableProduct);
            this.tableReceiptMasterNew = new ReceiptMasterNewDataTable();
            base.Tables.Add(this.tableReceiptMasterNew);
            this.relationFK_InvoiceDetail_InvoiceMaster = new System.Data.DataRelation("FK_InvoiceDetail_InvoiceMaster", new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.InvoiceMaterRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceDetail_InvoiceMaster);
            this.relationCountry_Manufacturer = new System.Data.DataRelation("Country_Manufacturer", new System.Data.DataColumn[] {
                        this.tableCountry.IDColumn}, new System.Data.DataColumn[] {
                        this.tableManufacturer.CounrtyRefColumn}, false);
            this.Relations.Add(this.relationCountry_Manufacturer);
            this.relationFK_FarmGroupLevel2_FarmGroup = new System.Data.DataRelation("FK_FarmGroupLevel2_FarmGroup", new System.Data.DataColumn[] {
                        this.tableFarmGroup.IDColumn}, new System.Data.DataColumn[] {
                        this.tableFarmGroupLevel2.FarmGroupRefColumn}, false);
            this.Relations.Add(this.relationFK_FarmGroupLevel2_FarmGroup);
            this.relationFK_ReceiptDetail_Product = new System.Data.DataRelation("FK_ReceiptDetail_Product", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ProductRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptDetail_Product);
            this.relationFK_Product_FarmGroupLevel2 = new System.Data.DataRelation("FK_Product_FarmGroupLevel2", new System.Data.DataColumn[] {
                        this.tableFarmGroupLevel2.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.FarmGrouplevel2RefColumn}, false);
            this.Relations.Add(this.relationFK_Product_FarmGroupLevel2);
            this.relationFK_Product_Packing = new System.Data.DataRelation("FK_Product_Packing", new System.Data.DataColumn[] {
                        this.tablePacking.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.PackingRefColumn}, false);
            this.Relations.Add(this.relationFK_Product_Packing);
            this.relationFK_Product_StorageCondition = new System.Data.DataRelation("FK_Product_StorageCondition", new System.Data.DataColumn[] {
                        this.tableStorageCondition.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.StorageConditionRefColumn}, false);
            this.Relations.Add(this.relationFK_Product_StorageCondition);
            this.relationFK_Product_Substance = new System.Data.DataRelation("FK_Product_Substance", new System.Data.DataColumn[] {
                        this.tableSubstance.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.SubstanceRefColumn}, false);
            this.Relations.Add(this.relationFK_Product_Substance);
            this.relationFK_Product_Unit = new System.Data.DataRelation("FK_Product_Unit", new System.Data.DataColumn[] {
                        this.tableUnit.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.UnitRefColumn}, false);
            this.Relations.Add(this.relationFK_Product_Unit);
            this.relationManufacturer_Product = new System.Data.DataRelation("Manufacturer_Product", new System.Data.DataColumn[] {
                        this.tableManufacturer.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.ManufacturerRefColumn}, false);
            this.Relations.Add(this.relationManufacturer_Product);
            this.relationFK_InvoiceMaster_Organization = new System.Data.DataRelation("FK_InvoiceMaster_Organization", new System.Data.DataColumn[] {
                        this.tableOrganization.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.OrganisationRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceMaster_Organization);
            this.relationFK_ReceiptMaster_Organization = new System.Data.DataRelation("FK_ReceiptMaster_Organization", new System.Data.DataColumn[] {
                        this.tableOrganization.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.OrganizationRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Organization);
            this.relationTradePutlet_Stock = new System.Data.DataRelation("TradePutlet_Stock", new System.Data.DataColumn[] {
                        this.tableTradePutlet.IDColumn}, new System.Data.DataColumn[] {
                        this.tableStock.TradePupletRefColumn}, false);
            this.Relations.Add(this.relationTradePutlet_Stock);
            this.relationFK_InvoiceMaster_Stock = new System.Data.DataRelation("FK_InvoiceMaster_Stock", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.RemoteStockRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceMaster_Stock);
            this.relationFK_ReceiptMaster_Stock = new System.Data.DataRelation("FK_ReceiptMaster_Stock", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.MainStockRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Stock);
            this.relationFK_ReceiptMaster_Stock1 = new System.Data.DataRelation("FK_ReceiptMaster_Stock1", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.SenderStockRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Stock1);
            this.relationReceiptMaster_ReceiptDetail = new System.Data.DataRelation("ReceiptMaster_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableReceiptMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ReceiptMaterRefColumn}, false);
            this.Relations.Add(this.relationReceiptMaster_ReceiptDetail);
            this.relationReceiptMasterNew_ReceiptDetail = new System.Data.DataRelation("ReceiptMasterNew_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableReceiptMasterNew.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ReceiptMaterRefColumn}, false);
            this.Relations.Add(this.relationReceiptMasterNew_ReceiptDetail);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCountry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnit() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocumentType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFarmGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeManufacturer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrganization() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePacking() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptRemains() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStock() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStorageCondition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubstance() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTradePutlet() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFarmGroupLevel2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptMasterNew() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MDataSet ds = new MDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void UnitRowChangeEventHandler(object sender, UnitRowChangeEvent e);
        
        public delegate void DocumentTypeRowChangeEventHandler(object sender, DocumentTypeRowChangeEvent e);
        
        public delegate void FarmGroupRowChangeEventHandler(object sender, FarmGroupRowChangeEvent e);
        
        public delegate void InvoiceDetailRowChangeEventHandler(object sender, InvoiceDetailRowChangeEvent e);
        
        public delegate void InvoiceMasterRowChangeEventHandler(object sender, InvoiceMasterRowChangeEvent e);
        
        public delegate void ManufacturerRowChangeEventHandler(object sender, ManufacturerRowChangeEvent e);
        
        public delegate void OrganizationRowChangeEventHandler(object sender, OrganizationRowChangeEvent e);
        
        public delegate void PackingRowChangeEventHandler(object sender, PackingRowChangeEvent e);
        
        public delegate void ReceiptDetailRowChangeEventHandler(object sender, ReceiptDetailRowChangeEvent e);
        
        public delegate void ReceiptMasterRowChangeEventHandler(object sender, ReceiptMasterRowChangeEvent e);
        
        public delegate void ReceiptRemainsRowChangeEventHandler(object sender, ReceiptRemainsRowChangeEvent e);
        
        public delegate void StockRowChangeEventHandler(object sender, StockRowChangeEvent e);
        
        public delegate void StorageConditionRowChangeEventHandler(object sender, StorageConditionRowChangeEvent e);
        
        public delegate void SubstanceRowChangeEventHandler(object sender, SubstanceRowChangeEvent e);
        
        public delegate void TradePutletRowChangeEventHandler(object sender, TradePutletRowChangeEvent e);
        
        public delegate void FarmGroupLevel2RowChangeEventHandler(object sender, FarmGroupLevel2RowChangeEvent e);
        
        public delegate void ProductRowChangeEventHandler(object sender, ProductRowChangeEvent e);
        
        public delegate void ReceiptMasterNewRowChangeEventHandler(object sender, ReceiptMasterNewRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CountryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryDataTable() {
                this.TableName = "Country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CountryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow this[int index] {
                get {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCountryRow(CountryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow AddCountryRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                rowCountryRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow FindByID(int ID) {
                return ((CountryRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CountryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow NewCountryRow() {
                return ((CountryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CountryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CountryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null)) {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null)) {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null)) {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null)) {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCountryRow(CountryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDataTable() {
                this.TableName = "Unit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow this[int index] {
                get {
                    return ((UnitRow)(this.Rows[index]));
                }
            }
            
            public event UnitRowChangeEventHandler UnitRowChanging;
            
            public event UnitRowChangeEventHandler UnitRowChanged;
            
            public event UnitRowChangeEventHandler UnitRowDeleting;
            
            public event UnitRowChangeEventHandler UnitRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitRow(UnitRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow AddUnitRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                UnitRow rowUnitRow = ((UnitRow)(this.NewRow()));
                rowUnitRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowUnitRow);
                return rowUnitRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow FindByID(int ID) {
                return ((UnitRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UnitDataTable cln = ((UnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UnitDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 10;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow NewUnitRow() {
                return ((UnitRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UnitRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UnitRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitRowChanged != null)) {
                    this.UnitRowChanged(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitRowChanging != null)) {
                    this.UnitRowChanging(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitRowDeleted != null)) {
                    this.UnitRowDeleted(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitRowDeleting != null)) {
                    this.UnitRowDeleting(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitRow(UnitRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocumentTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsInternal;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeDataTable() {
                this.TableName = "DocumentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DocumentTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsInternalColumn {
                get {
                    return this.columnIsInternal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow this[int index] {
                get {
                    return ((DocumentTypeRow)(this.Rows[index]));
                }
            }
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowChanging;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowChanged;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowDeleting;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocumentTypeRow(DocumentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow AddDocumentTypeRow(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                DocumentTypeRow rowDocumentTypeRow = ((DocumentTypeRow)(this.NewRow()));
                rowDocumentTypeRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsInternal,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowDocumentTypeRow);
                return rowDocumentTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow FindByID(int ID) {
                return ((DocumentTypeRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DocumentTypeDataTable cln = ((DocumentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DocumentTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnIsInternal = base.Columns["IsInternal"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsInternal = new System.Data.DataColumn("IsInternal", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsInternal);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsInternal.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow NewDocumentTypeRow() {
                return ((DocumentTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DocumentTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DocumentTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocumentTypeRowChanged != null)) {
                    this.DocumentTypeRowChanged(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocumentTypeRowChanging != null)) {
                    this.DocumentTypeRowChanging(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocumentTypeRowDeleted != null)) {
                    this.DocumentTypeRowDeleted(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocumentTypeRowDeleting != null)) {
                    this.DocumentTypeRowDeleting(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocumentTypeRow(DocumentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocumentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FarmGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupDataTable() {
                this.TableName = "FarmGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FarmGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow this[int index] {
                get {
                    return ((FarmGroupRow)(this.Rows[index]));
                }
            }
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowChanging;
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowChanged;
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowDeleting;
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFarmGroupRow(FarmGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow AddFarmGroupRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                FarmGroupRow rowFarmGroupRow = ((FarmGroupRow)(this.NewRow()));
                rowFarmGroupRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowFarmGroupRow);
                return rowFarmGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow FindByID(int ID) {
                return ((FarmGroupRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FarmGroupDataTable cln = ((FarmGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FarmGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow NewFarmGroupRow() {
                return ((FarmGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FarmGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FarmGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FarmGroupRowChanged != null)) {
                    this.FarmGroupRowChanged(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FarmGroupRowChanging != null)) {
                    this.FarmGroupRowChanging(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FarmGroupRowDeleted != null)) {
                    this.FarmGroupRowDeleted(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FarmGroupRowDeleting != null)) {
                    this.FarmGroupRowDeleting(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFarmGroupRow(FarmGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FarmGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnInvoiceMaterRef;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnPurchaseNDS;
            
            private System.Data.DataColumn columnPriceRetail;
            
            private System.Data.DataColumn columnRetailNDS;
            
            private System.Data.DataColumn columnPriceRetailNDS;
            
            private System.Data.DataColumn columnLocalReceipDetailRef;
            
            private System.Data.DataColumn columnRemoteInvoiceDetailRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailDataTable() {
                this.TableName = "InvoiceDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceMaterRefColumn {
                get {
                    return this.columnInvoiceMaterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchaseNDSColumn {
                get {
                    return this.columnPurchaseNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailColumn {
                get {
                    return this.columnPriceRetail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailNDSColumn {
                get {
                    return this.columnRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailNDSColumn {
                get {
                    return this.columnPriceRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocalReceipDetailRefColumn {
                get {
                    return this.columnLocalReceipDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceDetailRefColumn {
                get {
                    return this.columnRemoteInvoiceDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow this[int index] {
                get {
                    return ((InvoiceDetailRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowChanging;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowChanged;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowDeleting;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceDetailRow(InvoiceDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow AddInvoiceDetailRow(InvoiceMasterRow parentInvoiceMasterRowByFK_InvoiceDetail_InvoiceMaster, decimal Quantity, decimal PricePurchase, decimal PurchaseNDS, decimal PriceRetail, decimal RetailNDS, decimal PriceRetailNDS, int LocalReceipDetailRef, int RemoteInvoiceDetailRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                InvoiceDetailRow rowInvoiceDetailRow = ((InvoiceDetailRow)(this.NewRow()));
                rowInvoiceDetailRow.ItemArray = new object[] {
                        null,
                        parentInvoiceMasterRowByFK_InvoiceDetail_InvoiceMaster[0],
                        Quantity,
                        PricePurchase,
                        PurchaseNDS,
                        PriceRetail,
                        RetailNDS,
                        PriceRetailNDS,
                        LocalReceipDetailRef,
                        RemoteInvoiceDetailRef,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowInvoiceDetailRow);
                return rowInvoiceDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow FindByID(int ID) {
                return ((InvoiceDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoiceDetailDataTable cln = ((InvoiceDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoiceDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnInvoiceMaterRef = base.Columns["InvoiceMaterRef"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnPurchaseNDS = base.Columns["PurchaseNDS"];
                this.columnPriceRetail = base.Columns["PriceRetail"];
                this.columnRetailNDS = base.Columns["RetailNDS"];
                this.columnPriceRetailNDS = base.Columns["PriceRetailNDS"];
                this.columnLocalReceipDetailRef = base.Columns["LocalReceipDetailRef"];
                this.columnRemoteInvoiceDetailRef = base.Columns["RemoteInvoiceDetailRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnInvoiceMaterRef = new System.Data.DataColumn("InvoiceMaterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceMaterRef);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnPurchaseNDS = new System.Data.DataColumn("PurchaseNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseNDS);
                this.columnPriceRetail = new System.Data.DataColumn("PriceRetail", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetail);
                this.columnRetailNDS = new System.Data.DataColumn("RetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailNDS);
                this.columnPriceRetailNDS = new System.Data.DataColumn("PriceRetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetailNDS);
                this.columnLocalReceipDetailRef = new System.Data.DataColumn("LocalReceipDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalReceipDetailRef);
                this.columnRemoteInvoiceDetailRef = new System.Data.DataColumn("RemoteInvoiceDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceDetailRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnInvoiceMaterRef.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnPricePurchase.AllowDBNull = false;
                this.columnPurchaseNDS.AllowDBNull = false;
                this.columnPriceRetail.AllowDBNull = false;
                this.columnRetailNDS.AllowDBNull = false;
                this.columnPriceRetailNDS.AllowDBNull = false;
                this.columnLocalReceipDetailRef.AllowDBNull = false;
                this.columnRemoteInvoiceDetailRef.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow NewInvoiceDetailRow() {
                return ((InvoiceDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoiceDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoiceDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceDetailRowChanged != null)) {
                    this.InvoiceDetailRowChanged(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceDetailRowChanging != null)) {
                    this.InvoiceDetailRowChanging(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceDetailRowDeleted != null)) {
                    this.InvoiceDetailRowDeleted(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceDetailRowDeleting != null)) {
                    this.InvoiceDetailRowDeleting(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceDetailRow(InvoiceDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnOrganisationRef;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnRemoteStockRef;
            
            private System.Data.DataColumn columnRemoteReceiptMasterRef;
            
            private System.Data.DataColumn columnRemoteInvoiceMasterRef;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnSum;
            
            private System.Data.DataColumn columnNds;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterDataTable() {
                this.TableName = "InvoiceMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganisationRefColumn {
                get {
                    return this.columnOrganisationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteStockRefColumn {
                get {
                    return this.columnRemoteStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteReceiptMasterRefColumn {
                get {
                    return this.columnRemoteReceiptMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceMasterRefColumn {
                get {
                    return this.columnRemoteInvoiceMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumColumn {
                get {
                    return this.columnSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NdsColumn {
                get {
                    return this.columnNds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow this[int index] {
                get {
                    return ((InvoiceMasterRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanging;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanged;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleting;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceMasterRow(InvoiceMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow AddInvoiceMasterRow(int Number, System.DateTime Date, OrganizationRow parentOrganizationRowByFK_InvoiceMaster_Organization, int DocumentTypeRef, StockRow parentStockRowByFK_InvoiceMaster_Stock, int RemoteReceiptMasterRef, int RemoteInvoiceMasterRef, bool IsReadOnly, decimal Sum, decimal Nds, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                InvoiceMasterRow rowInvoiceMasterRow = ((InvoiceMasterRow)(this.NewRow()));
                rowInvoiceMasterRow.ItemArray = new object[] {
                        null,
                        Number,
                        Date,
                        parentOrganizationRowByFK_InvoiceMaster_Organization[0],
                        DocumentTypeRef,
                        parentStockRowByFK_InvoiceMaster_Stock[0],
                        RemoteReceiptMasterRef,
                        RemoteInvoiceMasterRef,
                        IsReadOnly,
                        Sum,
                        Nds,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowInvoiceMasterRow);
                return rowInvoiceMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow FindByID(int ID) {
                return ((InvoiceMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoiceMasterDataTable cln = ((InvoiceMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoiceMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnDate = base.Columns["Date"];
                this.columnOrganisationRef = base.Columns["OrganisationRef"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnRemoteStockRef = base.Columns["RemoteStockRef"];
                this.columnRemoteReceiptMasterRef = base.Columns["RemoteReceiptMasterRef"];
                this.columnRemoteInvoiceMasterRef = base.Columns["RemoteInvoiceMasterRef"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnSum = base.Columns["Sum"];
                this.columnNds = base.Columns["Nds"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnOrganisationRef = new System.Data.DataColumn("OrganisationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationRef);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnRemoteStockRef = new System.Data.DataColumn("RemoteStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteStockRef);
                this.columnRemoteReceiptMasterRef = new System.Data.DataColumn("RemoteReceiptMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteReceiptMasterRef);
                this.columnRemoteInvoiceMasterRef = new System.Data.DataColumn("RemoteInvoiceMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceMasterRef);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnSum = new System.Data.DataColumn("Sum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSum);
                this.columnNds = new System.Data.DataColumn("Nds", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNds);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnOrganisationRef.AllowDBNull = false;
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnRemoteStockRef.AllowDBNull = false;
                this.columnRemoteReceiptMasterRef.AllowDBNull = false;
                this.columnRemoteInvoiceMasterRef.AllowDBNull = false;
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnSum.AllowDBNull = false;
                this.columnNds.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow NewInvoiceMasterRow() {
                return ((InvoiceMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoiceMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoiceMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceMasterRowChanged != null)) {
                    this.InvoiceMasterRowChanged(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceMasterRowChanging != null)) {
                    this.InvoiceMasterRowChanging(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceMasterRowDeleted != null)) {
                    this.InvoiceMasterRowDeleted(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceMasterRowDeleting != null)) {
                    this.InvoiceMasterRowDeleting(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceMasterRow(InvoiceMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ManufacturerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnCounrtyRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerDataTable() {
                this.TableName = "Manufacturer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManufacturerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ManufacturerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CounrtyRefColumn {
                get {
                    return this.columnCounrtyRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow this[int index] {
                get {
                    return ((ManufacturerRow)(this.Rows[index]));
                }
            }
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowChanging;
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowChanged;
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowDeleting;
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddManufacturerRow(ManufacturerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow AddManufacturerRow(string Name, CountryRow parentCountryRowByCountry_Manufacturer, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                ManufacturerRow rowManufacturerRow = ((ManufacturerRow)(this.NewRow()));
                rowManufacturerRow.ItemArray = new object[] {
                        null,
                        Name,
                        parentCountryRowByCountry_Manufacturer[0],
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowManufacturerRow);
                return rowManufacturerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow FindByID(int ID) {
                return ((ManufacturerRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ManufacturerDataTable cln = ((ManufacturerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ManufacturerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnCounrtyRef = base.Columns["CounrtyRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCounrtyRef = new System.Data.DataColumn("CounrtyRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCounrtyRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.DefaultValue = ((string)("\'\'"));
                this.columnName.MaxLength = 50;
                this.columnCounrtyRef.AllowDBNull = false;
                this.columnCounrtyRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow NewManufacturerRow() {
                return ((ManufacturerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ManufacturerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ManufacturerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ManufacturerRowChanged != null)) {
                    this.ManufacturerRowChanged(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ManufacturerRowChanging != null)) {
                    this.ManufacturerRowChanging(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ManufacturerRowDeleted != null)) {
                    this.ManufacturerRowDeleted(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ManufacturerRowDeleting != null)) {
                    this.ManufacturerRowDeleting(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveManufacturerRow(ManufacturerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ManufacturerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrganizationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnShortName;
            
            private System.Data.DataColumn columnDirector;
            
            private System.Data.DataColumn columnAdress;
            
            private System.Data.DataColumn columnAddress_jur;
            
            private System.Data.DataColumn columnOKPO;
            
            private System.Data.DataColumn columnBankName;
            
            private System.Data.DataColumn columnBankMFO;
            
            private System.Data.DataColumn columnINN;
            
            private System.Data.DataColumn columnNumSvid;
            
            private System.Data.DataColumn columnNumSvidChp;
            
            private System.Data.DataColumn columnPassChp;
            
            private System.Data.DataColumn columnPhone;
            
            private System.Data.DataColumn columnLicense;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnBankRS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationDataTable() {
                this.TableName = "Organization";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganizationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrganizationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShortNameColumn {
                get {
                    return this.columnShortName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirectorColumn {
                get {
                    return this.columnDirector;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdressColumn {
                get {
                    return this.columnAdress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Address_jurColumn {
                get {
                    return this.columnAddress_jur;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OKPOColumn {
                get {
                    return this.columnOKPO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankMFOColumn {
                get {
                    return this.columnBankMFO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn INNColumn {
                get {
                    return this.columnINN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumSvidColumn {
                get {
                    return this.columnNumSvid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumSvidChpColumn {
                get {
                    return this.columnNumSvidChp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PassChpColumn {
                get {
                    return this.columnPassChp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LicenseColumn {
                get {
                    return this.columnLicense;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankRSColumn {
                get {
                    return this.columnBankRS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow this[int index] {
                get {
                    return ((OrganizationRow)(this.Rows[index]));
                }
            }
            
            public event OrganizationRowChangeEventHandler OrganizationRowChanging;
            
            public event OrganizationRowChangeEventHandler OrganizationRowChanged;
            
            public event OrganizationRowChangeEventHandler OrganizationRowDeleting;
            
            public event OrganizationRowChangeEventHandler OrganizationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrganizationRow(OrganizationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow AddOrganizationRow(
                        string Name, 
                        string ShortName, 
                        string Director, 
                        string Adress, 
                        string Address_jur, 
                        string OKPO, 
                        string BankName, 
                        string BankMFO, 
                        string INN, 
                        string NumSvid, 
                        string NumSvidChp, 
                        string PassChp, 
                        string Phone, 
                        string License, 
                        string Note, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string BankRS) {
                OrganizationRow rowOrganizationRow = ((OrganizationRow)(this.NewRow()));
                rowOrganizationRow.ItemArray = new object[] {
                        null,
                        Name,
                        ShortName,
                        Director,
                        Adress,
                        Address_jur,
                        OKPO,
                        BankName,
                        BankMFO,
                        INN,
                        NumSvid,
                        NumSvidChp,
                        PassChp,
                        Phone,
                        License,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        BankRS};
                this.Rows.Add(rowOrganizationRow);
                return rowOrganizationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow FindByID(int ID) {
                return ((OrganizationRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrganizationDataTable cln = ((OrganizationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrganizationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnShortName = base.Columns["ShortName"];
                this.columnDirector = base.Columns["Director"];
                this.columnAdress = base.Columns["Adress"];
                this.columnAddress_jur = base.Columns["Address_jur"];
                this.columnOKPO = base.Columns["OKPO"];
                this.columnBankName = base.Columns["BankName"];
                this.columnBankMFO = base.Columns["BankMFO"];
                this.columnINN = base.Columns["INN"];
                this.columnNumSvid = base.Columns["NumSvid"];
                this.columnNumSvidChp = base.Columns["NumSvidChp"];
                this.columnPassChp = base.Columns["PassChp"];
                this.columnPhone = base.Columns["Phone"];
                this.columnLicense = base.Columns["License"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnBankRS = base.Columns["BankRS"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnShortName = new System.Data.DataColumn("ShortName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortName);
                this.columnDirector = new System.Data.DataColumn("Director", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDirector);
                this.columnAdress = new System.Data.DataColumn("Adress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdress);
                this.columnAddress_jur = new System.Data.DataColumn("Address_jur", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress_jur);
                this.columnOKPO = new System.Data.DataColumn("OKPO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOKPO);
                this.columnBankName = new System.Data.DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnBankMFO = new System.Data.DataColumn("BankMFO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankMFO);
                this.columnINN = new System.Data.DataColumn("INN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnINN);
                this.columnNumSvid = new System.Data.DataColumn("NumSvid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumSvid);
                this.columnNumSvidChp = new System.Data.DataColumn("NumSvidChp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumSvidChp);
                this.columnPassChp = new System.Data.DataColumn("PassChp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassChp);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnLicense = new System.Data.DataColumn("License", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicense);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnBankRS = new System.Data.DataColumn("BankRS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankRS);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 255;
                this.columnShortName.AllowDBNull = false;
                this.columnShortName.MaxLength = 70;
                this.columnDirector.AllowDBNull = false;
                this.columnDirector.MaxLength = 50;
                this.columnAdress.AllowDBNull = false;
                this.columnAdress.MaxLength = 70;
                this.columnAddress_jur.AllowDBNull = false;
                this.columnAddress_jur.MaxLength = 70;
                this.columnOKPO.AllowDBNull = false;
                this.columnOKPO.MaxLength = 10;
                this.columnBankName.AllowDBNull = false;
                this.columnBankName.MaxLength = 70;
                this.columnBankMFO.AllowDBNull = false;
                this.columnBankMFO.MaxLength = 6;
                this.columnINN.AllowDBNull = false;
                this.columnINN.MaxLength = 12;
                this.columnNumSvid.AllowDBNull = false;
                this.columnNumSvid.MaxLength = 15;
                this.columnNumSvidChp.AllowDBNull = false;
                this.columnNumSvidChp.MaxLength = 15;
                this.columnPassChp.AllowDBNull = false;
                this.columnPassChp.MaxLength = 50;
                this.columnPhone.AllowDBNull = false;
                this.columnPhone.MaxLength = 50;
                this.columnLicense.AllowDBNull = false;
                this.columnLicense.MaxLength = 40;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnBankRS.AllowDBNull = false;
                this.columnBankRS.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow NewOrganizationRow() {
                return ((OrganizationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrganizationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrganizationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrganizationRowChanged != null)) {
                    this.OrganizationRowChanged(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrganizationRowChanging != null)) {
                    this.OrganizationRowChanging(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrganizationRowDeleted != null)) {
                    this.OrganizationRowDeleted(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrganizationRowDeleting != null)) {
                    this.OrganizationRowDeleting(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrganizationRow(OrganizationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrganizationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PackingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingDataTable() {
                this.TableName = "Packing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PackingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow this[int index] {
                get {
                    return ((PackingRow)(this.Rows[index]));
                }
            }
            
            public event PackingRowChangeEventHandler PackingRowChanging;
            
            public event PackingRowChangeEventHandler PackingRowChanged;
            
            public event PackingRowChangeEventHandler PackingRowDeleting;
            
            public event PackingRowChangeEventHandler PackingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPackingRow(PackingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow AddPackingRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                PackingRow rowPackingRow = ((PackingRow)(this.NewRow()));
                rowPackingRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowPackingRow);
                return rowPackingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow FindByID(int ID) {
                return ((PackingRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PackingDataTable cln = ((PackingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PackingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow NewPackingRow() {
                return ((PackingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PackingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PackingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PackingRowChanged != null)) {
                    this.PackingRowChanged(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PackingRowChanging != null)) {
                    this.PackingRowChanging(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PackingRowDeleted != null)) {
                    this.PackingRowDeleted(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PackingRowDeleting != null)) {
                    this.PackingRowDeleting(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePackingRow(PackingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PackingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnReceiptMaterRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnPurchaseNDS;
            
            private System.Data.DataColumn columnRetailNDS;
            
            private System.Data.DataColumn columnPriceRetailNDS;
            
            private System.Data.DataColumn columnInvoiceDetailRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private static System.DateTime columnUseByDate_defaultValue = System.DateTime.Parse("01/01/2001 00:00:00");
            
            private static System.DateTime columnDateCreate_defaultValue = System.DateTime.Parse("01/01/2000 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailDataTable() {
                this.TableName = "ReceiptDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptMaterRefColumn {
                get {
                    return this.columnReceiptMaterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchaseNDSColumn {
                get {
                    return this.columnPurchaseNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailNDSColumn {
                get {
                    return this.columnRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailNDSColumn {
                get {
                    return this.columnPriceRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceDetailRefColumn {
                get {
                    return this.columnInvoiceDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow this[int index] {
                get {
                    return ((ReceiptDetailRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowChanging;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowChanged;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowDeleting;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptDetailRow(ReceiptDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow AddReceiptDetailRow(ReceiptMasterRow parentReceiptMasterRowByReceiptMaster_ReceiptDetail, ProductRow parentProductRowByFK_ReceiptDetail_Product, string Series, System.DateTime UseByDate, decimal Quantity, decimal PricePurchase, decimal PurchaseNDS, decimal RetailNDS, decimal PriceRetailNDS, int InvoiceDetailRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                ReceiptDetailRow rowReceiptDetailRow = ((ReceiptDetailRow)(this.NewRow()));
                rowReceiptDetailRow.ItemArray = new object[] {
                        null,
                        parentReceiptMasterRowByReceiptMaster_ReceiptDetail[0],
                        parentProductRowByFK_ReceiptDetail_Product[0],
                        Series,
                        UseByDate,
                        Quantity,
                        PricePurchase,
                        PurchaseNDS,
                        RetailNDS,
                        PriceRetailNDS,
                        InvoiceDetailRef,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowReceiptDetailRow);
                return rowReceiptDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow FindByID(int ID) {
                return ((ReceiptDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptDetailDataTable cln = ((ReceiptDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnReceiptMaterRef = base.Columns["ReceiptMaterRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnPurchaseNDS = base.Columns["PurchaseNDS"];
                this.columnRetailNDS = base.Columns["RetailNDS"];
                this.columnPriceRetailNDS = base.Columns["PriceRetailNDS"];
                this.columnInvoiceDetailRef = base.Columns["InvoiceDetailRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnReceiptMaterRef = new System.Data.DataColumn("ReceiptMaterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptMaterRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnPurchaseNDS = new System.Data.DataColumn("PurchaseNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseNDS);
                this.columnRetailNDS = new System.Data.DataColumn("RetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailNDS);
                this.columnPriceRetailNDS = new System.Data.DataColumn("PriceRetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetailNDS);
                this.columnInvoiceDetailRef = new System.Data.DataColumn("InvoiceDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDetailRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnReceiptMaterRef.AllowDBNull = false;
                this.columnSeries.MaxLength = 15;
                this.columnUseByDate.DefaultValue = ((System.DateTime)(ReceiptDetailDataTable.columnUseByDate_defaultValue));
                this.columnPurchaseNDS.DefaultValue = ((decimal)(0m));
                this.columnRetailNDS.DefaultValue = ((decimal)(0m));
                this.columnPriceRetailNDS.DefaultValue = ((decimal)(0m));
                this.columnInvoiceDetailRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.DefaultValue = ((string)("\'\'"));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.DefaultValue = ((string)("\'\'"));
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.DefaultValue = ((System.DateTime)(ReceiptDetailDataTable.columnDateCreate_defaultValue));
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow NewReceiptDetailRow() {
                return ((ReceiptDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptDetailRowChanged != null)) {
                    this.ReceiptDetailRowChanged(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptDetailRowChanging != null)) {
                    this.ReceiptDetailRowChanging(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptDetailRowDeleted != null)) {
                    this.ReceiptDetailRowDeleted(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptDetailRowDeleting != null)) {
                    this.ReceiptDetailRowDeleting(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptDetailRow(ReceiptDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnOrganizationRef;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnSenderStockRef;
            
            private System.Data.DataColumn columnSenderInvoiceRef;
            
            private System.Data.DataColumn columnTotalSum;
            
            private System.Data.DataColumn columnPurchSum;
            
            private System.Data.DataColumn columnSumNDS;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private static System.DateTime columnDocDate_defaultValue = System.DateTime.Parse("01/01/2001 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterDataTable() {
                this.TableName = "ReceiptMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationRefColumn {
                get {
                    return this.columnOrganizationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderStockRefColumn {
                get {
                    return this.columnSenderStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderInvoiceRefColumn {
                get {
                    return this.columnSenderInvoiceRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalSumColumn {
                get {
                    return this.columnTotalSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchSumColumn {
                get {
                    return this.columnPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumNDSColumn {
                get {
                    return this.columnSumNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow this[int index] {
                get {
                    return ((ReceiptMasterRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowChanging;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowChanged;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowDeleting;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptMasterRow(ReceiptMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow AddReceiptMasterRow(string Note, System.DateTime DocDate, int DocumentTypeRef, OrganizationRow parentOrganizationRowByFK_ReceiptMaster_Organization, StockRow parentStockRowByFK_ReceiptMaster_Stock, StockRow parentStockRowByFK_ReceiptMaster_Stock1, int SenderInvoiceRef, decimal TotalSum, decimal PurchSum, decimal SumNDS, bool IsReadOnly, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                ReceiptMasterRow rowReceiptMasterRow = ((ReceiptMasterRow)(this.NewRow()));
                rowReceiptMasterRow.ItemArray = new object[] {
                        null,
                        null,
                        Note,
                        DocDate,
                        DocumentTypeRef,
                        parentOrganizationRowByFK_ReceiptMaster_Organization[0],
                        parentStockRowByFK_ReceiptMaster_Stock[0],
                        parentStockRowByFK_ReceiptMaster_Stock1[0],
                        SenderInvoiceRef,
                        TotalSum,
                        PurchSum,
                        SumNDS,
                        IsReadOnly,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowReceiptMasterRow);
                return rowReceiptMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow FindByID(int ID) {
                return ((ReceiptMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptMasterDataTable cln = ((ReceiptMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnNote = base.Columns["Note"];
                this.columnDocDate = base.Columns["DocDate"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnOrganizationRef = base.Columns["OrganizationRef"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnSenderStockRef = base.Columns["SenderStockRef"];
                this.columnSenderInvoiceRef = base.Columns["SenderInvoiceRef"];
                this.columnTotalSum = base.Columns["TotalSum"];
                this.columnPurchSum = base.Columns["PurchSum"];
                this.columnSumNDS = base.Columns["SumNDS"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnOrganizationRef = new System.Data.DataColumn("OrganizationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationRef);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnSenderStockRef = new System.Data.DataColumn("SenderStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderStockRef);
                this.columnSenderInvoiceRef = new System.Data.DataColumn("SenderInvoiceRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderInvoiceRef);
                this.columnTotalSum = new System.Data.DataColumn("TotalSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSum);
                this.columnPurchSum = new System.Data.DataColumn("PurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchSum);
                this.columnSumNDS = new System.Data.DataColumn("SumNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumNDS);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNumber.AutoIncrement = true;
                this.columnNumber.AutoIncrementSeed = -1;
                this.columnNumber.AutoIncrementStep = -1;
                this.columnNote.DefaultValue = ((string)("\'\'"));
                this.columnNote.MaxLength = 255;
                this.columnDocDate.DefaultValue = ((System.DateTime)(ReceiptMasterDataTable.columnDocDate_defaultValue));
                this.columnOrganizationRef.DefaultValue = ((int)(0));
                this.columnMainStockRef.DefaultValue = ((int)(0));
                this.columnSenderStockRef.DefaultValue = ((int)(0));
                this.columnSenderInvoiceRef.DefaultValue = ((int)(0));
                this.columnTotalSum.DefaultValue = ((decimal)(0m));
                this.columnPurchSum.DefaultValue = ((decimal)(0m));
                this.columnSumNDS.DefaultValue = ((decimal)(0m));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow NewReceiptMasterRow() {
                return ((ReceiptMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptMasterRowChanged != null)) {
                    this.ReceiptMasterRowChanged(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptMasterRowChanging != null)) {
                    this.ReceiptMasterRowChanging(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptMasterRowDeleted != null)) {
                    this.ReceiptMasterRowDeleted(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptMasterRowDeleting != null)) {
                    this.ReceiptMasterRowDeleting(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptMasterRow(ReceiptMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptRemainsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnReceiptDetailRef;
            
            private System.Data.DataColumn columnQuantityReceipt;
            
            private System.Data.DataColumn columnQuantityRemains;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsDataTable() {
                this.TableName = "ReceiptRemains";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptRemainsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptRemainsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptDetailRefColumn {
                get {
                    return this.columnReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityReceiptColumn {
                get {
                    return this.columnQuantityReceipt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityRemainsColumn {
                get {
                    return this.columnQuantityRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow this[int index] {
                get {
                    return ((ReceiptRemainsRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowChanging;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowChanged;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowDeleting;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptRemainsRow(ReceiptRemainsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow AddReceiptRemainsRow(int ReceiptDetailRef, decimal QuantityReceipt, decimal QuantityRemains, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                ReceiptRemainsRow rowReceiptRemainsRow = ((ReceiptRemainsRow)(this.NewRow()));
                rowReceiptRemainsRow.ItemArray = new object[] {
                        ReceiptDetailRef,
                        QuantityReceipt,
                        QuantityRemains,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowReceiptRemainsRow);
                return rowReceiptRemainsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow FindByReceiptDetailRef(int ReceiptDetailRef) {
                return ((ReceiptRemainsRow)(this.Rows.Find(new object[] {
                            ReceiptDetailRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptRemainsDataTable cln = ((ReceiptRemainsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptRemainsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReceiptDetailRef = base.Columns["ReceiptDetailRef"];
                this.columnQuantityReceipt = base.Columns["QuantityReceipt"];
                this.columnQuantityRemains = base.Columns["QuantityRemains"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReceiptDetailRef = new System.Data.DataColumn("ReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDetailRef);
                this.columnQuantityReceipt = new System.Data.DataColumn("QuantityReceipt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityReceipt);
                this.columnQuantityRemains = new System.Data.DataColumn("QuantityRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityRemains);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReceiptDetailRef}, true));
                this.columnReceiptDetailRef.AllowDBNull = false;
                this.columnReceiptDetailRef.Unique = true;
                this.columnQuantityReceipt.AllowDBNull = false;
                this.columnQuantityRemains.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow NewReceiptRemainsRow() {
                return ((ReceiptRemainsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptRemainsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptRemainsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptRemainsRowChanged != null)) {
                    this.ReceiptRemainsRowChanged(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptRemainsRowChanging != null)) {
                    this.ReceiptRemainsRowChanging(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptRemainsRowDeleted != null)) {
                    this.ReceiptRemainsRowDeleted(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptRemainsRowDeleting != null)) {
                    this.ReceiptRemainsRowDeleting(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptRemainsRow(ReceiptRemainsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptRemainsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnTradePupletRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnIsLocal;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDataTable() {
                this.TableName = "Stock";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePupletRefColumn {
                get {
                    return this.columnTradePupletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLocalColumn {
                get {
                    return this.columnIsLocal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow this[int index] {
                get {
                    return ((StockRow)(this.Rows[index]));
                }
            }
            
            public event StockRowChangeEventHandler StockRowChanging;
            
            public event StockRowChangeEventHandler StockRowChanged;
            
            public event StockRowChangeEventHandler StockRowDeleting;
            
            public event StockRowChangeEventHandler StockRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockRow(StockRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow AddStockRow(string Name, bool IsNDS, TradePutletRow parentTradePutletRowByTradePutlet_Stock, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, bool IsLocal) {
                StockRow rowStockRow = ((StockRow)(this.NewRow()));
                rowStockRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsNDS,
                        parentTradePutletRowByTradePutlet_Stock[0],
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        IsLocal};
                this.Rows.Add(rowStockRow);
                return rowStockRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow FindByID(int ID) {
                return ((StockRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StockDataTable cln = ((StockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StockDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnTradePupletRef = base.Columns["TradePupletRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnIsLocal = base.Columns["IsLocal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnTradePupletRef = new System.Data.DataColumn("TradePupletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePupletRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnIsLocal = new System.Data.DataColumn("IsLocal", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLocal);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsNDS.AllowDBNull = false;
                this.columnTradePupletRef.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnIsLocal.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow NewStockRow() {
                return ((StockRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StockRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StockRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockRowChanged != null)) {
                    this.StockRowChanged(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockRowChanging != null)) {
                    this.StockRowChanging(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockRowDeleted != null)) {
                    this.StockRowDeleted(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockRowDeleting != null)) {
                    this.StockRowDeleting(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockRow(StockRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StorageConditionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionDataTable() {
                this.TableName = "StorageCondition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StorageConditionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StorageConditionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow this[int index] {
                get {
                    return ((StorageConditionRow)(this.Rows[index]));
                }
            }
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowChanging;
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowChanged;
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowDeleting;
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStorageConditionRow(StorageConditionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow AddStorageConditionRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                StorageConditionRow rowStorageConditionRow = ((StorageConditionRow)(this.NewRow()));
                rowStorageConditionRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowStorageConditionRow);
                return rowStorageConditionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow FindByID(int ID) {
                return ((StorageConditionRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StorageConditionDataTable cln = ((StorageConditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StorageConditionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow NewStorageConditionRow() {
                return ((StorageConditionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StorageConditionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StorageConditionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StorageConditionRowChanged != null)) {
                    this.StorageConditionRowChanged(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StorageConditionRowChanging != null)) {
                    this.StorageConditionRowChanging(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StorageConditionRowDeleted != null)) {
                    this.StorageConditionRowDeleted(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StorageConditionRowDeleting != null)) {
                    this.StorageConditionRowDeleting(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStorageConditionRow(StorageConditionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StorageConditionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubstanceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceDataTable() {
                this.TableName = "Substance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubstanceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubstanceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow this[int index] {
                get {
                    return ((SubstanceRow)(this.Rows[index]));
                }
            }
            
            public event SubstanceRowChangeEventHandler SubstanceRowChanging;
            
            public event SubstanceRowChangeEventHandler SubstanceRowChanged;
            
            public event SubstanceRowChangeEventHandler SubstanceRowDeleting;
            
            public event SubstanceRowChangeEventHandler SubstanceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubstanceRow(SubstanceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow AddSubstanceRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                SubstanceRow rowSubstanceRow = ((SubstanceRow)(this.NewRow()));
                rowSubstanceRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowSubstanceRow);
                return rowSubstanceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow FindByID(int ID) {
                return ((SubstanceRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SubstanceDataTable cln = ((SubstanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SubstanceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow NewSubstanceRow() {
                return ((SubstanceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SubstanceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SubstanceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubstanceRowChanged != null)) {
                    this.SubstanceRowChanged(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubstanceRowChanging != null)) {
                    this.SubstanceRowChanging(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubstanceRowDeleted != null)) {
                    this.SubstanceRowDeleted(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubstanceRowDeleting != null)) {
                    this.SubstanceRowDeleting(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubstanceRow(SubstanceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubstanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TradePutletDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnIP;
            
            private System.Data.DataColumn columnAdress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletDataTable() {
                this.TableName = "TradePutlet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradePutletDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TradePutletDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdressColumn {
                get {
                    return this.columnAdress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow this[int index] {
                get {
                    return ((TradePutletRow)(this.Rows[index]));
                }
            }
            
            public event TradePutletRowChangeEventHandler TradePutletRowChanging;
            
            public event TradePutletRowChangeEventHandler TradePutletRowChanged;
            
            public event TradePutletRowChangeEventHandler TradePutletRowDeleting;
            
            public event TradePutletRowChangeEventHandler TradePutletRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTradePutletRow(TradePutletRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow AddTradePutletRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, string IP, string Adress) {
                TradePutletRow rowTradePutletRow = ((TradePutletRow)(this.NewRow()));
                rowTradePutletRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        IP,
                        Adress};
                this.Rows.Add(rowTradePutletRow);
                return rowTradePutletRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow FindByID(int ID) {
                return ((TradePutletRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TradePutletDataTable cln = ((TradePutletDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TradePutletDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnIP = base.Columns["IP"];
                this.columnAdress = base.Columns["Adress"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnIP = new System.Data.DataColumn("IP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.columnAdress = new System.Data.DataColumn("Adress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdress);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnIP.AllowDBNull = false;
                this.columnIP.MaxLength = 15;
                this.columnAdress.AllowDBNull = false;
                this.columnAdress.MaxLength = 150;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow NewTradePutletRow() {
                return ((TradePutletRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TradePutletRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TradePutletRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TradePutletRowChanged != null)) {
                    this.TradePutletRowChanged(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TradePutletRowChanging != null)) {
                    this.TradePutletRowChanging(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TradePutletRowDeleted != null)) {
                    this.TradePutletRowDeleted(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TradePutletRowDeleting != null)) {
                    this.TradePutletRowDeleting(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTradePutletRow(TradePutletRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TradePutletDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FarmGroupLevel2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnFarmGroupRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2DataTable() {
                this.TableName = "FarmGroupLevel2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupLevel2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FarmGroupLevel2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupRefColumn {
                get {
                    return this.columnFarmGroupRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row this[int index] {
                get {
                    return ((FarmGroupLevel2Row)(this.Rows[index]));
                }
            }
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowChanging;
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowChanged;
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowDeleting;
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFarmGroupLevel2Row(FarmGroupLevel2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row AddFarmGroupLevel2Row(string Name, FarmGroupRow parentFarmGroupRowByFK_FarmGroupLevel2_FarmGroup, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                FarmGroupLevel2Row rowFarmGroupLevel2Row = ((FarmGroupLevel2Row)(this.NewRow()));
                rowFarmGroupLevel2Row.ItemArray = new object[] {
                        null,
                        Name,
                        parentFarmGroupRowByFK_FarmGroupLevel2_FarmGroup[0],
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowFarmGroupLevel2Row);
                return rowFarmGroupLevel2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row FindByID(int ID) {
                return ((FarmGroupLevel2Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FarmGroupLevel2DataTable cln = ((FarmGroupLevel2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FarmGroupLevel2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnFarmGroupRef = base.Columns["FarmGroupRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFarmGroupRef = new System.Data.DataColumn("FarmGroupRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnFarmGroupRef.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row NewFarmGroupLevel2Row() {
                return ((FarmGroupLevel2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FarmGroupLevel2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FarmGroupLevel2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FarmGroupLevel2RowChanged != null)) {
                    this.FarmGroupLevel2RowChanged(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FarmGroupLevel2RowChanging != null)) {
                    this.FarmGroupLevel2RowChanging(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FarmGroupLevel2RowDeleted != null)) {
                    this.FarmGroupLevel2RowDeleted(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FarmGroupLevel2RowDeleting != null)) {
                    this.FarmGroupLevel2RowDeleting(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFarmGroupLevel2Row(FarmGroupLevel2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FarmGroupLevel2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnSmallName;
            
            private System.Data.DataColumn columnPriceManufact;
            
            private System.Data.DataColumn columnUnitRef;
            
            private System.Data.DataColumn columnPackingRef;
            
            private System.Data.DataColumn columnStorageConditionRef;
            
            private System.Data.DataColumn columnSubstanceRef;
            
            private System.Data.DataColumn columnFarmGrouplevel2Ref;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            private System.Data.DataColumn columnIsRecept;
            
            private System.Data.DataColumn columnIsOneRecept;
            
            private System.Data.DataColumn columnIsHide;
            
            private System.Data.DataColumn columnMinDivisor;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnCountryName;
            
            private System.Data.DataColumn columnFarmGroupName;
            
            private System.Data.DataColumn columnPackingName;
            
            private System.Data.DataColumn columnStorageConditionName;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnFarmGroupLevel2;
            
            private System.Data.DataColumn columnUnitName;
            
            private System.Data.DataColumn columnSubstanceName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductDataTable() {
                this.TableName = "Product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SmallNameColumn {
                get {
                    return this.columnSmallName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceManufactColumn {
                get {
                    return this.columnPriceManufact;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitRefColumn {
                get {
                    return this.columnUnitRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingRefColumn {
                get {
                    return this.columnPackingRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionRefColumn {
                get {
                    return this.columnStorageConditionRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceRefColumn {
                get {
                    return this.columnSubstanceRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGrouplevel2RefColumn {
                get {
                    return this.columnFarmGrouplevel2Ref;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReceptColumn {
                get {
                    return this.columnIsRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsOneReceptColumn {
                get {
                    return this.columnIsOneRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsHideColumn {
                get {
                    return this.columnIsHide;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinDivisorColumn {
                get {
                    return this.columnMinDivisor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupNameColumn {
                get {
                    return this.columnFarmGroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingNameColumn {
                get {
                    return this.columnPackingName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionNameColumn {
                get {
                    return this.columnStorageConditionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupLevel2Column {
                get {
                    return this.columnFarmGroupLevel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceNameColumn {
                get {
                    return this.columnSubstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow this[int index] {
                get {
                    return ((ProductRow)(this.Rows[index]));
                }
            }
            
            public event ProductRowChangeEventHandler ProductRowChanging;
            
            public event ProductRowChangeEventHandler ProductRowChanged;
            
            public event ProductRowChangeEventHandler ProductRowDeleting;
            
            public event ProductRowChangeEventHandler ProductRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductRow(ProductRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow AddProductRow(
                        string Name, 
                        string SmallName, 
                        decimal PriceManufact, 
                        UnitRow parentUnitRowByFK_Product_Unit, 
                        PackingRow parentPackingRowByFK_Product_Packing, 
                        StorageConditionRow parentStorageConditionRowByFK_Product_StorageCondition, 
                        SubstanceRow parentSubstanceRowByFK_Product_Substance, 
                        FarmGroupLevel2Row parentFarmGroupLevel2RowByFK_Product_FarmGroupLevel2, 
                        ManufacturerRow parentManufacturerRowByManufacturer_Product, 
                        bool IsRecept, 
                        bool IsOneRecept, 
                        string IsHide, 
                        short MinDivisor, 
                        bool IsNDS, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string CountryName, 
                        string FarmGroupName, 
                        string PackingName, 
                        string StorageConditionName, 
                        string ManufacturerName, 
                        string FarmGroupLevel2, 
                        string UnitName, 
                        string SubstanceName) {
                ProductRow rowProductRow = ((ProductRow)(this.NewRow()));
                rowProductRow.ItemArray = new object[] {
                        null,
                        Name,
                        SmallName,
                        PriceManufact,
                        parentUnitRowByFK_Product_Unit[0],
                        parentPackingRowByFK_Product_Packing[0],
                        parentStorageConditionRowByFK_Product_StorageCondition[0],
                        parentSubstanceRowByFK_Product_Substance[0],
                        parentFarmGroupLevel2RowByFK_Product_FarmGroupLevel2[0],
                        parentManufacturerRowByManufacturer_Product[0],
                        IsRecept,
                        IsOneRecept,
                        IsHide,
                        MinDivisor,
                        IsNDS,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        CountryName,
                        FarmGroupName,
                        PackingName,
                        StorageConditionName,
                        ManufacturerName,
                        FarmGroupLevel2,
                        UnitName,
                        SubstanceName};
                this.Rows.Add(rowProductRow);
                return rowProductRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow FindByID(int ID) {
                return ((ProductRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductDataTable cln = ((ProductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnSmallName = base.Columns["SmallName"];
                this.columnPriceManufact = base.Columns["PriceManufact"];
                this.columnUnitRef = base.Columns["UnitRef"];
                this.columnPackingRef = base.Columns["PackingRef"];
                this.columnStorageConditionRef = base.Columns["StorageConditionRef"];
                this.columnSubstanceRef = base.Columns["SubstanceRef"];
                this.columnFarmGrouplevel2Ref = base.Columns["FarmGrouplevel2Ref"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
                this.columnIsRecept = base.Columns["IsRecept"];
                this.columnIsOneRecept = base.Columns["IsOneRecept"];
                this.columnIsHide = base.Columns["IsHide"];
                this.columnMinDivisor = base.Columns["MinDivisor"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnFarmGroupName = base.Columns["FarmGroupName"];
                this.columnPackingName = base.Columns["PackingName"];
                this.columnStorageConditionName = base.Columns["StorageConditionName"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnFarmGroupLevel2 = base.Columns["FarmGroupLevel2"];
                this.columnUnitName = base.Columns["UnitName"];
                this.columnSubstanceName = base.Columns["SubstanceName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnSmallName = new System.Data.DataColumn("SmallName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmallName);
                this.columnPriceManufact = new System.Data.DataColumn("PriceManufact", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceManufact);
                this.columnUnitRef = new System.Data.DataColumn("UnitRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitRef);
                this.columnPackingRef = new System.Data.DataColumn("PackingRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingRef);
                this.columnStorageConditionRef = new System.Data.DataColumn("StorageConditionRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionRef);
                this.columnSubstanceRef = new System.Data.DataColumn("SubstanceRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceRef);
                this.columnFarmGrouplevel2Ref = new System.Data.DataColumn("FarmGrouplevel2Ref", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGrouplevel2Ref);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.columnIsRecept = new System.Data.DataColumn("IsRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecept);
                this.columnIsOneRecept = new System.Data.DataColumn("IsOneRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOneRecept);
                this.columnIsHide = new System.Data.DataColumn("IsHide", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHide);
                this.columnMinDivisor = new System.Data.DataColumn("MinDivisor", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDivisor);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnCountryName = new System.Data.DataColumn("CountryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnFarmGroupName = new System.Data.DataColumn("FarmGroupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupName);
                this.columnPackingName = new System.Data.DataColumn("PackingName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingName);
                this.columnStorageConditionName = new System.Data.DataColumn("StorageConditionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionName);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnFarmGroupLevel2 = new System.Data.DataColumn("FarmGroupLevel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupLevel2);
                this.columnUnitName = new System.Data.DataColumn("UnitName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitName);
                this.columnSubstanceName = new System.Data.DataColumn("SubstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 255;
                this.columnSmallName.AllowDBNull = false;
                this.columnSmallName.MaxLength = 25;
                this.columnPriceManufact.AllowDBNull = false;
                this.columnUnitRef.AllowDBNull = false;
                this.columnPackingRef.AllowDBNull = false;
                this.columnStorageConditionRef.AllowDBNull = false;
                this.columnSubstanceRef.AllowDBNull = false;
                this.columnFarmGrouplevel2Ref.AllowDBNull = false;
                this.columnManufacturerRef.AllowDBNull = false;
                this.columnIsRecept.AllowDBNull = false;
                this.columnIsOneRecept.AllowDBNull = false;
                this.columnIsHide.AllowDBNull = false;
                this.columnIsHide.MaxLength = 10;
                this.columnMinDivisor.AllowDBNull = false;
                this.columnIsNDS.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnCountryName.AllowDBNull = false;
                this.columnCountryName.MaxLength = 50;
                this.columnFarmGroupName.AllowDBNull = false;
                this.columnFarmGroupName.MaxLength = 50;
                this.columnPackingName.AllowDBNull = false;
                this.columnPackingName.MaxLength = 50;
                this.columnStorageConditionName.AllowDBNull = false;
                this.columnStorageConditionName.MaxLength = 50;
                this.columnManufacturerName.AllowDBNull = false;
                this.columnManufacturerName.MaxLength = 50;
                this.columnFarmGroupLevel2.AllowDBNull = false;
                this.columnFarmGroupLevel2.MaxLength = 50;
                this.columnUnitName.AllowDBNull = false;
                this.columnUnitName.MaxLength = 10;
                this.columnSubstanceName.AllowDBNull = false;
                this.columnSubstanceName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow NewProductRow() {
                return ((ProductRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductRowChanged != null)) {
                    this.ProductRowChanged(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductRowChanging != null)) {
                    this.ProductRowChanging(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductRowDeleted != null)) {
                    this.ProductRowDeleted(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductRowDeleting != null)) {
                    this.ProductRowDeleting(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductRow(ProductRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptMasterNewDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnOrganizationRef;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnSenderStockRef;
            
            private System.Data.DataColumn columnSenderInvoiceRef;
            
            private System.Data.DataColumn columnTotalSum;
            
            private System.Data.DataColumn columnPurchSum;
            
            private System.Data.DataColumn columnSumNDS;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnDocumentTypeName;
            
            private System.Data.DataColumn columnStockName;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnTradePutletName;
            
            private System.Data.DataColumn columnOrganizationName;
            
            private System.Data.DataColumn columnFullAuthorModif;
            
            private System.Data.DataColumn columnFullAuthorCreate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewDataTable() {
                this.TableName = "ReceiptMasterNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterNewDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptMasterNewDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationRefColumn {
                get {
                    return this.columnOrganizationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderStockRefColumn {
                get {
                    return this.columnSenderStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderInvoiceRefColumn {
                get {
                    return this.columnSenderInvoiceRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalSumColumn {
                get {
                    return this.columnTotalSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchSumColumn {
                get {
                    return this.columnPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumNDSColumn {
                get {
                    return this.columnSumNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeNameColumn {
                get {
                    return this.columnDocumentTypeName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StockNameColumn {
                get {
                    return this.columnStockName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePutletNameColumn {
                get {
                    return this.columnTradePutletName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationNameColumn {
                get {
                    return this.columnOrganizationName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullAuthorModifColumn {
                get {
                    return this.columnFullAuthorModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullAuthorCreateColumn {
                get {
                    return this.columnFullAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRow this[int index] {
                get {
                    return ((ReceiptMasterNewRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptMasterNewRowChangeEventHandler ReceiptMasterNewRowChanging;
            
            public event ReceiptMasterNewRowChangeEventHandler ReceiptMasterNewRowChanged;
            
            public event ReceiptMasterNewRowChangeEventHandler ReceiptMasterNewRowDeleting;
            
            public event ReceiptMasterNewRowChangeEventHandler ReceiptMasterNewRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptMasterNewRow(ReceiptMasterNewRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRow AddReceiptMasterNewRow(
                        int ID, 
                        int Number, 
                        string Note, 
                        System.DateTime DocDate, 
                        int DocumentTypeRef, 
                        int OrganizationRef, 
                        int MainStockRef, 
                        int SenderStockRef, 
                        int SenderInvoiceRef, 
                        decimal TotalSum, 
                        decimal PurchSum, 
                        decimal SumNDS, 
                        bool IsReadOnly, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string DocumentTypeName, 
                        string StockName, 
                        bool IsNDS, 
                        string TradePutletName, 
                        string OrganizationName, 
                        object FullAuthorModif, 
                        object FullAuthorCreate) {
                ReceiptMasterNewRow rowReceiptMasterNewRow = ((ReceiptMasterNewRow)(this.NewRow()));
                rowReceiptMasterNewRow.ItemArray = new object[] {
                        ID,
                        Number,
                        Note,
                        DocDate,
                        DocumentTypeRef,
                        OrganizationRef,
                        MainStockRef,
                        SenderStockRef,
                        SenderInvoiceRef,
                        TotalSum,
                        PurchSum,
                        SumNDS,
                        IsReadOnly,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        DocumentTypeName,
                        StockName,
                        IsNDS,
                        TradePutletName,
                        OrganizationName,
                        FullAuthorModif,
                        FullAuthorCreate};
                this.Rows.Add(rowReceiptMasterNewRow);
                return rowReceiptMasterNewRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRow FindByID(int ID) {
                return ((ReceiptMasterNewRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptMasterNewDataTable cln = ((ReceiptMasterNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptMasterNewDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnNote = base.Columns["Note"];
                this.columnDocDate = base.Columns["DocDate"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnOrganizationRef = base.Columns["OrganizationRef"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnSenderStockRef = base.Columns["SenderStockRef"];
                this.columnSenderInvoiceRef = base.Columns["SenderInvoiceRef"];
                this.columnTotalSum = base.Columns["TotalSum"];
                this.columnPurchSum = base.Columns["PurchSum"];
                this.columnSumNDS = base.Columns["SumNDS"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnDocumentTypeName = base.Columns["DocumentTypeName"];
                this.columnStockName = base.Columns["StockName"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnTradePutletName = base.Columns["TradePutletName"];
                this.columnOrganizationName = base.Columns["OrganizationName"];
                this.columnFullAuthorModif = base.Columns["FullAuthorModif"];
                this.columnFullAuthorCreate = base.Columns["FullAuthorCreate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnOrganizationRef = new System.Data.DataColumn("OrganizationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationRef);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnSenderStockRef = new System.Data.DataColumn("SenderStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderStockRef);
                this.columnSenderInvoiceRef = new System.Data.DataColumn("SenderInvoiceRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderInvoiceRef);
                this.columnTotalSum = new System.Data.DataColumn("TotalSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSum);
                this.columnPurchSum = new System.Data.DataColumn("PurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchSum);
                this.columnSumNDS = new System.Data.DataColumn("SumNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumNDS);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnDocumentTypeName = new System.Data.DataColumn("DocumentTypeName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeName);
                this.columnStockName = new System.Data.DataColumn("StockName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStockName);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnTradePutletName = new System.Data.DataColumn("TradePutletName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePutletName);
                this.columnOrganizationName = new System.Data.DataColumn("OrganizationName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationName);
                this.columnFullAuthorModif = new System.Data.DataColumn("FullAuthorModif", typeof(object), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullAuthorModif);
                this.columnFullAuthorCreate = new System.Data.DataColumn("FullAuthorCreate", typeof(object), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullAuthorCreate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNumber.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 255;
                this.columnDocDate.AllowDBNull = false;
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnOrganizationRef.AllowDBNull = false;
                this.columnMainStockRef.AllowDBNull = false;
                this.columnSenderStockRef.AllowDBNull = false;
                this.columnSenderInvoiceRef.AllowDBNull = false;
                this.columnTotalSum.AllowDBNull = false;
                this.columnPurchSum.AllowDBNull = false;
                this.columnSumNDS.AllowDBNull = false;
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnDocumentTypeName.AllowDBNull = false;
                this.columnDocumentTypeName.MaxLength = 50;
                this.columnStockName.AllowDBNull = false;
                this.columnStockName.MaxLength = 50;
                this.columnIsNDS.AllowDBNull = false;
                this.columnTradePutletName.AllowDBNull = false;
                this.columnTradePutletName.MaxLength = 50;
                this.columnOrganizationName.AllowDBNull = false;
                this.columnOrganizationName.MaxLength = 255;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRow NewReceiptMasterNewRow() {
                return ((ReceiptMasterNewRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptMasterNewRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptMasterNewRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptMasterNewRowChanged != null)) {
                    this.ReceiptMasterNewRowChanged(this, new ReceiptMasterNewRowChangeEvent(((ReceiptMasterNewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptMasterNewRowChanging != null)) {
                    this.ReceiptMasterNewRowChanging(this, new ReceiptMasterNewRowChangeEvent(((ReceiptMasterNewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptMasterNewRowDeleted != null)) {
                    this.ReceiptMasterNewRowDeleted(this, new ReceiptMasterNewRowChangeEvent(((ReceiptMasterNewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptMasterNewRowDeleting != null)) {
                    this.ReceiptMasterNewRowDeleting(this, new ReceiptMasterNewRowChangeEvent(((ReceiptMasterNewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptMasterNewRow(ReceiptMasterNewRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptMasterNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CountryRow : System.Data.DataRow {
            
            private CountryDataTable tableCountry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCountry.IDColumn]));
                }
                set {
                    this[this.tableCountry.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCountry.NameColumn]));
                }
                set {
                    this[this.tableCountry.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableCountry.AuthorCreateColumn]));
                }
                set {
                    this[this.tableCountry.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableCountry.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableCountry.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableCountry.DateCreateColumn]));
                }
                set {
                    this[this.tableCountry.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableCountry.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCountry.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableCountry.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow[] GetManufacturerRows() {
                return ((ManufacturerRow[])(base.GetChildRows(this.Table.ChildRelations["Country_Manufacturer"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitRow : System.Data.DataRow {
            
            private UnitDataTable tableUnit;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnit = ((UnitDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableUnit.IDColumn]));
                }
                set {
                    this[this.tableUnit.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUnit.NameColumn]));
                }
                set {
                    this[this.tableUnit.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableUnit.AuthorCreateColumn]));
                }
                set {
                    this[this.tableUnit.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableUnit.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableUnit.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableUnit.DateCreateColumn]));
                }
                set {
                    this[this.tableUnit.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableUnit.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Unit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnit.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableUnit.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableUnit.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Product_Unit"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DocumentTypeRow : System.Data.DataRow {
            
            private DocumentTypeDataTable tableDocumentType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocumentType = ((DocumentTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableDocumentType.IDColumn]));
                }
                set {
                    this[this.tableDocumentType.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableDocumentType.NameColumn]));
                }
                set {
                    this[this.tableDocumentType.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInternal {
                get {
                    return ((bool)(this[this.tableDocumentType.IsInternalColumn]));
                }
                set {
                    this[this.tableDocumentType.IsInternalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableDocumentType.AuthorCreateColumn]));
                }
                set {
                    this[this.tableDocumentType.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableDocumentType.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableDocumentType.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableDocumentType.DateCreateColumn]));
                }
                set {
                    this[this.tableDocumentType.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableDocumentType.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'DocumentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocumentType.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDocumentType.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableDocumentType.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FarmGroupRow : System.Data.DataRow {
            
            private FarmGroupDataTable tableFarmGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFarmGroup = ((FarmGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFarmGroup.IDColumn]));
                }
                set {
                    this[this.tableFarmGroup.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFarmGroup.NameColumn]));
                }
                set {
                    this[this.tableFarmGroup.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableFarmGroup.AuthorCreateColumn]));
                }
                set {
                    this[this.tableFarmGroup.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableFarmGroup.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableFarmGroup.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableFarmGroup.DateCreateColumn]));
                }
                set {
                    this[this.tableFarmGroup.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableFarmGroup.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'FarmGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroup.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableFarmGroup.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableFarmGroup.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row[] GetFarmGroupLevel2Rows() {
                return ((FarmGroupLevel2Row[])(base.GetChildRows(this.Table.ChildRelations["FK_FarmGroupLevel2_FarmGroup"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceDetailRow : System.Data.DataRow {
            
            private InvoiceDetailDataTable tableInvoiceDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceDetail = ((InvoiceDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableInvoiceDetail.IDColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceMaterRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.InvoiceMaterRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.InvoiceMaterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.QuantityColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PricePurchaseColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchaseNDS {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PurchaseNDSColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PurchaseNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetail {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PriceRetailColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PriceRetailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailNDS {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.RetailNDSColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.RetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetailNDS {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PriceRetailNDSColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PriceRetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalReceipDetailRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.LocalReceipDetailRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.LocalReceipDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceDetailRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableInvoiceDetail.AuthorCreateColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableInvoiceDetail.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableInvoiceDetail.DateCreateColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableInvoiceDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow InvoiceMasterRow {
                get {
                    return ((InvoiceMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceDetail_InvoiceMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceDetail_InvoiceMaster"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInvoiceDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableInvoiceDetail.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceMasterRow : System.Data.DataRow {
            
            private InvoiceMasterDataTable tableInvoiceMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceMaster = ((InvoiceMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableInvoiceMaster.IDColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableInvoiceMaster.NumberColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((System.DateTime)(this[this.tableInvoiceMaster.DateColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.OrganisationRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.OrganisationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteStockRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteStockRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteReceiptMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteReceiptMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteReceiptMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteInvoiceMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteInvoiceMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableInvoiceMaster.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Sum {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.SumColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.SumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Nds {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.NdsColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NdsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableInvoiceMaster.AuthorCreateColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableInvoiceMaster.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableInvoiceMaster.DateCreateColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableInvoiceMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow OrganizationRow {
                get {
                    return ((OrganizationRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceMaster_Organization"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceMaster_Organization"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRow {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceMaster_Stock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceMaster_Stock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInvoiceMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableInvoiceMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceDetail_InvoiceMaster"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ManufacturerRow : System.Data.DataRow {
            
            private ManufacturerDataTable tableManufacturer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManufacturerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableManufacturer = ((ManufacturerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableManufacturer.IDColumn]));
                }
                set {
                    this[this.tableManufacturer.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableManufacturer.NameColumn]));
                }
                set {
                    this[this.tableManufacturer.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CounrtyRef {
                get {
                    return ((int)(this[this.tableManufacturer.CounrtyRefColumn]));
                }
                set {
                    this[this.tableManufacturer.CounrtyRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableManufacturer.AuthorCreateColumn]));
                }
                set {
                    this[this.tableManufacturer.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableManufacturer.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableManufacturer.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableManufacturer.DateCreateColumn]));
                }
                set {
                    this[this.tableManufacturer.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableManufacturer.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Manufacturer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManufacturer.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow CountryRow {
                get {
                    return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["Country_Manufacturer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Country_Manufacturer"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableManufacturer.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableManufacturer.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["Manufacturer_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrganizationRow : System.Data.DataRow {
            
            private OrganizationDataTable tableOrganization;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganizationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrganization = ((OrganizationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOrganization.IDColumn]));
                }
                set {
                    this[this.tableOrganization.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableOrganization.NameColumn]));
                }
                set {
                    this[this.tableOrganization.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortName {
                get {
                    return ((string)(this[this.tableOrganization.ShortNameColumn]));
                }
                set {
                    this[this.tableOrganization.ShortNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Director {
                get {
                    return ((string)(this[this.tableOrganization.DirectorColumn]));
                }
                set {
                    this[this.tableOrganization.DirectorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adress {
                get {
                    return ((string)(this[this.tableOrganization.AdressColumn]));
                }
                set {
                    this[this.tableOrganization.AdressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address_jur {
                get {
                    return ((string)(this[this.tableOrganization.Address_jurColumn]));
                }
                set {
                    this[this.tableOrganization.Address_jurColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKPO {
                get {
                    return ((string)(this[this.tableOrganization.OKPOColumn]));
                }
                set {
                    this[this.tableOrganization.OKPOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    return ((string)(this[this.tableOrganization.BankNameColumn]));
                }
                set {
                    this[this.tableOrganization.BankNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankMFO {
                get {
                    return ((string)(this[this.tableOrganization.BankMFOColumn]));
                }
                set {
                    this[this.tableOrganization.BankMFOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INN {
                get {
                    return ((string)(this[this.tableOrganization.INNColumn]));
                }
                set {
                    this[this.tableOrganization.INNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumSvid {
                get {
                    return ((string)(this[this.tableOrganization.NumSvidColumn]));
                }
                set {
                    this[this.tableOrganization.NumSvidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumSvidChp {
                get {
                    return ((string)(this[this.tableOrganization.NumSvidChpColumn]));
                }
                set {
                    this[this.tableOrganization.NumSvidChpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PassChp {
                get {
                    return ((string)(this[this.tableOrganization.PassChpColumn]));
                }
                set {
                    this[this.tableOrganization.PassChpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    return ((string)(this[this.tableOrganization.PhoneColumn]));
                }
                set {
                    this[this.tableOrganization.PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string License {
                get {
                    return ((string)(this[this.tableOrganization.LicenseColumn]));
                }
                set {
                    this[this.tableOrganization.LicenseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableOrganization.NoteColumn]));
                }
                set {
                    this[this.tableOrganization.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableOrganization.AuthorCreateColumn]));
                }
                set {
                    this[this.tableOrganization.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableOrganization.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableOrganization.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableOrganization.DateCreateColumn]));
                }
                set {
                    this[this.tableOrganization.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableOrganization.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankRS {
                get {
                    return ((string)(this[this.tableOrganization.BankRSColumn]));
                }
                set {
                    this[this.tableOrganization.BankRSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableOrganization.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableOrganization.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow[] GetInvoiceMasterRows() {
                return ((InvoiceMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceMaster_Organization"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRows() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Organization"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PackingRow : System.Data.DataRow {
            
            private PackingDataTable tablePacking;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePacking = ((PackingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePacking.IDColumn]));
                }
                set {
                    this[this.tablePacking.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tablePacking.NameColumn]));
                }
                set {
                    this[this.tablePacking.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tablePacking.AuthorCreateColumn]));
                }
                set {
                    this[this.tablePacking.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tablePacking.AuthorLastModifColumn]));
                }
                set {
                    this[this.tablePacking.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tablePacking.DateCreateColumn]));
                }
                set {
                    this[this.tablePacking.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tablePacking.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Packing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePacking.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePacking.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tablePacking.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Product_Packing"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptDetailRow : System.Data.DataRow {
            
            private ReceiptDetailDataTable tableReceiptDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptDetail = ((ReceiptDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptDetail.IDColumn]));
                }
                set {
                    this[this.tableReceiptDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptMaterRef {
                get {
                    return ((int)(this[this.tableReceiptDetail.ReceiptMaterRefColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ReceiptMaterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptDetail.ProductRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.SeriesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Series\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptDetail.UseByDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseByDate\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.QuantityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Quantity\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.PricePurchaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PricePurchase\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchaseNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.PurchaseNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchaseNDS\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.PurchaseNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.RetailNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RetailNDS\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.RetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetailNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.PriceRetailNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PriceRetailNDS\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.PriceRetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceDetailRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptDetail.InvoiceDetailRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InvoiceDetailRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.InvoiceDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptDetail.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptDetail_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptDetail_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow ReceiptMasterRow {
                get {
                    return ((ReceiptMasterRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptMaster_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptMaster_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRow ReceiptMasterNewRow {
                get {
                    return ((ReceiptMasterNewRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptMasterNew_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptMasterNew_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductRefNull() {
                return this.IsNull(this.tableReceiptDetail.ProductRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductRefNull() {
                this[this.tableReceiptDetail.ProductRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNull() {
                return this.IsNull(this.tableReceiptDetail.SeriesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNull() {
                this[this.tableReceiptDetail.SeriesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseByDateNull() {
                return this.IsNull(this.tableReceiptDetail.UseByDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseByDateNull() {
                this[this.tableReceiptDetail.UseByDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableReceiptDetail.QuantityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableReceiptDetail.QuantityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPricePurchaseNull() {
                return this.IsNull(this.tableReceiptDetail.PricePurchaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPricePurchaseNull() {
                this[this.tableReceiptDetail.PricePurchaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaseNDSNull() {
                return this.IsNull(this.tableReceiptDetail.PurchaseNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchaseNDSNull() {
                this[this.tableReceiptDetail.PurchaseNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRetailNDSNull() {
                return this.IsNull(this.tableReceiptDetail.RetailNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRetailNDSNull() {
                this[this.tableReceiptDetail.RetailNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceRetailNDSNull() {
                return this.IsNull(this.tableReceiptDetail.PriceRetailNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceRetailNDSNull() {
                this[this.tableReceiptDetail.PriceRetailNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDetailRefNull() {
                return this.IsNull(this.tableReceiptDetail.InvoiceDetailRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDetailRefNull() {
                this[this.tableReceiptDetail.InvoiceDetailRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableReceiptDetail.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableReceiptDetail.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableReceiptDetail.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableReceiptDetail.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableReceiptDetail.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableReceiptDetail.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptDetail.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptMasterRow : System.Data.DataRow {
            
            private ReceiptMasterDataTable tableReceiptMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptMaster = ((ReceiptMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptMaster.IDColumn]));
                }
                set {
                    this[this.tableReceiptMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableReceiptMaster.NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Number\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableReceiptMaster.NoteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Note\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptMaster.DocDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DocDate\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptMaster.DocumentTypeRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DocumentTypeRef\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganizationRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptMaster.OrganizationRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrganizationRef\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.OrganizationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptMaster.MainStockRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MainStockRef\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderStockRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptMaster.SenderStockRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SenderStockRef\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.SenderStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderInvoiceRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptMaster.SenderInvoiceRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SenderInvoiceRef\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.SenderInvoiceRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSum {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptMaster.TotalSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalSum\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.TotalSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchSum {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptMaster.PurchSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchSum\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.PurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptMaster.SumNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SumNDS\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.SumNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    try {
                        return ((bool)(this[this.tableReceiptMaster.IsReadOnlyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsReadOnly\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableReceiptMaster.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableReceiptMaster.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptMaster.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow OrganizationRow {
                get {
                    return ((OrganizationRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Organization"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Organization"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_ReceiptMaster_Stock {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Stock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Stock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_ReceiptMaster_Stock1 {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Stock1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Stock1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableReceiptMaster.NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableReceiptMaster.NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableReceiptMaster.NoteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableReceiptMaster.NoteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocDateNull() {
                return this.IsNull(this.tableReceiptMaster.DocDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocDateNull() {
                this[this.tableReceiptMaster.DocDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeRefNull() {
                return this.IsNull(this.tableReceiptMaster.DocumentTypeRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeRefNull() {
                this[this.tableReceiptMaster.DocumentTypeRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganizationRefNull() {
                return this.IsNull(this.tableReceiptMaster.OrganizationRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganizationRefNull() {
                this[this.tableReceiptMaster.OrganizationRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainStockRefNull() {
                return this.IsNull(this.tableReceiptMaster.MainStockRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainStockRefNull() {
                this[this.tableReceiptMaster.MainStockRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSenderStockRefNull() {
                return this.IsNull(this.tableReceiptMaster.SenderStockRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSenderStockRefNull() {
                this[this.tableReceiptMaster.SenderStockRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSenderInvoiceRefNull() {
                return this.IsNull(this.tableReceiptMaster.SenderInvoiceRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSenderInvoiceRefNull() {
                this[this.tableReceiptMaster.SenderInvoiceRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSumNull() {
                return this.IsNull(this.tableReceiptMaster.TotalSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSumNull() {
                this[this.tableReceiptMaster.TotalSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchSumNull() {
                return this.IsNull(this.tableReceiptMaster.PurchSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchSumNull() {
                this[this.tableReceiptMaster.PurchSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumNDSNull() {
                return this.IsNull(this.tableReceiptMaster.SumNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumNDSNull() {
                this[this.tableReceiptMaster.SumNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsReadOnlyNull() {
                return this.IsNull(this.tableReceiptMaster.IsReadOnlyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsReadOnlyNull() {
                this[this.tableReceiptMaster.IsReadOnlyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableReceiptMaster.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableReceiptMaster.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableReceiptMaster.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableReceiptMaster.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableReceiptMaster.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableReceiptMaster.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptMaster_ReceiptDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptRemainsRow : System.Data.DataRow {
            
            private ReceiptRemainsDataTable tableReceiptRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptRemainsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptRemains = ((ReceiptRemainsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptDetailRef {
                get {
                    return ((int)(this[this.tableReceiptRemains.ReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableReceiptRemains.ReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityReceipt {
                get {
                    return ((decimal)(this[this.tableReceiptRemains.QuantityReceiptColumn]));
                }
                set {
                    this[this.tableReceiptRemains.QuantityReceiptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityRemains {
                get {
                    return ((decimal)(this[this.tableReceiptRemains.QuantityRemainsColumn]));
                }
                set {
                    this[this.tableReceiptRemains.QuantityRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableReceiptRemains.AuthorCreateColumn]));
                }
                set {
                    this[this.tableReceiptRemains.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableReceiptRemains.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableReceiptRemains.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptRemains.DateCreateColumn]));
                }
                set {
                    this[this.tableReceiptRemains.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptRemains.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptRemains.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptRemains.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptRemains.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockRow : System.Data.DataRow {
            
            private StockDataTable tableStock;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStock = ((StockDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableStock.IDColumn]));
                }
                set {
                    this[this.tableStock.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableStock.NameColumn]));
                }
                set {
                    this[this.tableStock.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableStock.IsNDSColumn]));
                }
                set {
                    this[this.tableStock.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePupletRef {
                get {
                    return ((int)(this[this.tableStock.TradePupletRefColumn]));
                }
                set {
                    this[this.tableStock.TradePupletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableStock.AuthorCreateColumn]));
                }
                set {
                    this[this.tableStock.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableStock.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableStock.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableStock.DateCreateColumn]));
                }
                set {
                    this[this.tableStock.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableStock.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Stock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStock.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocal {
                get {
                    return ((bool)(this[this.tableStock.IsLocalColumn]));
                }
                set {
                    this[this.tableStock.IsLocalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow TradePutletRow {
                get {
                    return ((TradePutletRow)(this.GetParentRow(this.Table.ParentRelations["TradePutlet_Stock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TradePutlet_Stock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableStock.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableStock.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow[] GetInvoiceMasterRows() {
                return ((InvoiceMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceMaster_Stock"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRowsByFK_ReceiptMaster_Stock() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Stock"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRowsByFK_ReceiptMaster_Stock1() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Stock1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StorageConditionRow : System.Data.DataRow {
            
            private StorageConditionDataTable tableStorageCondition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StorageConditionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStorageCondition = ((StorageConditionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableStorageCondition.IDColumn]));
                }
                set {
                    this[this.tableStorageCondition.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableStorageCondition.NameColumn]));
                }
                set {
                    this[this.tableStorageCondition.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableStorageCondition.AuthorCreateColumn]));
                }
                set {
                    this[this.tableStorageCondition.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableStorageCondition.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableStorageCondition.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableStorageCondition.DateCreateColumn]));
                }
                set {
                    this[this.tableStorageCondition.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableStorageCondition.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableStorageCondition.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableStorageCondition.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Product_StorageCondition"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubstanceRow : System.Data.DataRow {
            
            private SubstanceDataTable tableSubstance;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubstanceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubstance = ((SubstanceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableSubstance.IDColumn]));
                }
                set {
                    this[this.tableSubstance.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSubstance.NameColumn]));
                }
                set {
                    this[this.tableSubstance.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableSubstance.AuthorCreateColumn]));
                }
                set {
                    this[this.tableSubstance.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableSubstance.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableSubstance.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableSubstance.DateCreateColumn]));
                }
                set {
                    this[this.tableSubstance.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableSubstance.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubstance.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableSubstance.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableSubstance.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Product_Substance"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TradePutletRow : System.Data.DataRow {
            
            private TradePutletDataTable tableTradePutlet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradePutletRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTradePutlet = ((TradePutletDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTradePutlet.IDColumn]));
                }
                set {
                    this[this.tableTradePutlet.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTradePutlet.NameColumn]));
                }
                set {
                    this[this.tableTradePutlet.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableTradePutlet.AuthorCreateColumn]));
                }
                set {
                    this[this.tableTradePutlet.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableTradePutlet.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableTradePutlet.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableTradePutlet.DateCreateColumn]));
                }
                set {
                    this[this.tableTradePutlet.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableTradePutlet.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'TradePutlet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradePutlet.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    return ((string)(this[this.tableTradePutlet.IPColumn]));
                }
                set {
                    this[this.tableTradePutlet.IPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adress {
                get {
                    return ((string)(this[this.tableTradePutlet.AdressColumn]));
                }
                set {
                    this[this.tableTradePutlet.AdressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableTradePutlet.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableTradePutlet.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow[] GetStockRows() {
                return ((StockRow[])(base.GetChildRows(this.Table.ChildRelations["TradePutlet_Stock"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FarmGroupLevel2Row : System.Data.DataRow {
            
            private FarmGroupLevel2DataTable tableFarmGroupLevel2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupLevel2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFarmGroupLevel2 = ((FarmGroupLevel2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFarmGroupLevel2.IDColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFarmGroupLevel2.NameColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FarmGroupRef {
                get {
                    return ((int)(this[this.tableFarmGroupLevel2.FarmGroupRefColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.FarmGroupRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableFarmGroupLevel2.AuthorCreateColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableFarmGroupLevel2.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableFarmGroupLevel2.DateCreateColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableFarmGroupLevel2.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow FarmGroupRow {
                get {
                    return ((FarmGroupRow)(this.GetParentRow(this.Table.ParentRelations["FK_FarmGroupLevel2_FarmGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FarmGroupLevel2_FarmGroup"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableFarmGroupLevel2.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableFarmGroupLevel2.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Product_FarmGroupLevel2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductRow : System.Data.DataRow {
            
            private ProductDataTable tableProduct;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct = ((ProductDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProduct.IDColumn]));
                }
                set {
                    this[this.tableProduct.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProduct.NameColumn]));
                }
                set {
                    this[this.tableProduct.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmallName {
                get {
                    return ((string)(this[this.tableProduct.SmallNameColumn]));
                }
                set {
                    this[this.tableProduct.SmallNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceManufact {
                get {
                    return ((decimal)(this[this.tableProduct.PriceManufactColumn]));
                }
                set {
                    this[this.tableProduct.PriceManufactColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitRef {
                get {
                    return ((int)(this[this.tableProduct.UnitRefColumn]));
                }
                set {
                    this[this.tableProduct.UnitRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackingRef {
                get {
                    return ((int)(this[this.tableProduct.PackingRefColumn]));
                }
                set {
                    this[this.tableProduct.PackingRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StorageConditionRef {
                get {
                    return ((int)(this[this.tableProduct.StorageConditionRefColumn]));
                }
                set {
                    this[this.tableProduct.StorageConditionRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubstanceRef {
                get {
                    return ((int)(this[this.tableProduct.SubstanceRefColumn]));
                }
                set {
                    this[this.tableProduct.SubstanceRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FarmGrouplevel2Ref {
                get {
                    return ((int)(this[this.tableProduct.FarmGrouplevel2RefColumn]));
                }
                set {
                    this[this.tableProduct.FarmGrouplevel2RefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerRef {
                get {
                    return ((int)(this[this.tableProduct.ManufacturerRefColumn]));
                }
                set {
                    this[this.tableProduct.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecept {
                get {
                    return ((bool)(this[this.tableProduct.IsReceptColumn]));
                }
                set {
                    this[this.tableProduct.IsReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneRecept {
                get {
                    return ((bool)(this[this.tableProduct.IsOneReceptColumn]));
                }
                set {
                    this[this.tableProduct.IsOneReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsHide {
                get {
                    return ((string)(this[this.tableProduct.IsHideColumn]));
                }
                set {
                    this[this.tableProduct.IsHideColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MinDivisor {
                get {
                    return ((short)(this[this.tableProduct.MinDivisorColumn]));
                }
                set {
                    this[this.tableProduct.MinDivisorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableProduct.IsNDSColumn]));
                }
                set {
                    this[this.tableProduct.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableProduct.AuthorCreateColumn]));
                }
                set {
                    this[this.tableProduct.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableProduct.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableProduct.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableProduct.DateCreateColumn]));
                }
                set {
                    this[this.tableProduct.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableProduct.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    return ((string)(this[this.tableProduct.CountryNameColumn]));
                }
                set {
                    this[this.tableProduct.CountryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupName {
                get {
                    return ((string)(this[this.tableProduct.FarmGroupNameColumn]));
                }
                set {
                    this[this.tableProduct.FarmGroupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackingName {
                get {
                    return ((string)(this[this.tableProduct.PackingNameColumn]));
                }
                set {
                    this[this.tableProduct.PackingNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StorageConditionName {
                get {
                    return ((string)(this[this.tableProduct.StorageConditionNameColumn]));
                }
                set {
                    this[this.tableProduct.StorageConditionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    return ((string)(this[this.tableProduct.ManufacturerNameColumn]));
                }
                set {
                    this[this.tableProduct.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupLevel2 {
                get {
                    return ((string)(this[this.tableProduct.FarmGroupLevel2Column]));
                }
                set {
                    this[this.tableProduct.FarmGroupLevel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitName {
                get {
                    return ((string)(this[this.tableProduct.UnitNameColumn]));
                }
                set {
                    this[this.tableProduct.UnitNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubstanceName {
                get {
                    return ((string)(this[this.tableProduct.SubstanceNameColumn]));
                }
                set {
                    this[this.tableProduct.SubstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row FarmGroupLevel2Row {
                get {
                    return ((FarmGroupLevel2Row)(this.GetParentRow(this.Table.ParentRelations["FK_Product_FarmGroupLevel2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Product_FarmGroupLevel2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow PackingRow {
                get {
                    return ((PackingRow)(this.GetParentRow(this.Table.ParentRelations["FK_Product_Packing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Product_Packing"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow StorageConditionRow {
                get {
                    return ((StorageConditionRow)(this.GetParentRow(this.Table.ParentRelations["FK_Product_StorageCondition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Product_StorageCondition"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow SubstanceRow {
                get {
                    return ((SubstanceRow)(this.GetParentRow(this.Table.ParentRelations["FK_Product_Substance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Product_Substance"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow UnitRow {
                get {
                    return ((UnitRow)(this.GetParentRow(this.Table.ParentRelations["FK_Product_Unit"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Product_Unit"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow ManufacturerRow {
                get {
                    return ((ManufacturerRow)(this.GetParentRow(this.Table.ParentRelations["Manufacturer_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Manufacturer_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableProduct.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableProduct.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptDetail_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptMasterNewRow : System.Data.DataRow {
            
            private ReceiptMasterNewDataTable tableReceiptMasterNew;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterNewRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptMasterNew = ((ReceiptMasterNewDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.IDColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.NumberColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.NoteColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptMasterNew.DocDateColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganizationRef {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.OrganizationRefColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.OrganizationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.MainStockRefColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderStockRef {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.SenderStockRefColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.SenderStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderInvoiceRef {
                get {
                    return ((int)(this[this.tableReceiptMasterNew.SenderInvoiceRefColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.SenderInvoiceRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSum {
                get {
                    return ((decimal)(this[this.tableReceiptMasterNew.TotalSumColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.TotalSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchSum {
                get {
                    return ((decimal)(this[this.tableReceiptMasterNew.PurchSumColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.PurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumNDS {
                get {
                    return ((decimal)(this[this.tableReceiptMasterNew.SumNDSColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.SumNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableReceiptMasterNew.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.AuthorCreateColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptMasterNew.DateCreateColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptMasterNew.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptMasterNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMasterNew.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentTypeName {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.DocumentTypeNameColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.DocumentTypeNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StockName {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.StockNameColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.StockNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableReceiptMasterNew.IsNDSColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TradePutletName {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.TradePutletNameColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.TradePutletNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrganizationName {
                get {
                    return ((string)(this[this.tableReceiptMasterNew.OrganizationNameColumn]));
                }
                set {
                    this[this.tableReceiptMasterNew.OrganizationNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object FullAuthorModif {
                get {
                    try {
                        return ((object)(this[this.tableReceiptMasterNew.FullAuthorModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullAuthorModif\' in table \'ReceiptMasterNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMasterNew.FullAuthorModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object FullAuthorCreate {
                get {
                    try {
                        return ((object)(this[this.tableReceiptMasterNew.FullAuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullAuthorCreate\' in table \'ReceiptMasterNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMasterNew.FullAuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptMasterNew.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptMasterNew.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullAuthorModifNull() {
                return this.IsNull(this.tableReceiptMasterNew.FullAuthorModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullAuthorModifNull() {
                this[this.tableReceiptMasterNew.FullAuthorModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullAuthorCreateNull() {
                return this.IsNull(this.tableReceiptMasterNew.FullAuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullAuthorCreateNull() {
                this[this.tableReceiptMasterNew.FullAuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptMasterNew_ReceiptDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CountryRowChangeEvent : System.EventArgs {
            
            private CountryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRowChangeEvent(CountryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitRowChangeEvent : System.EventArgs {
            
            private UnitRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRowChangeEvent(UnitRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DocumentTypeRowChangeEvent : System.EventArgs {
            
            private DocumentTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRowChangeEvent(DocumentTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FarmGroupRowChangeEvent : System.EventArgs {
            
            private FarmGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRowChangeEvent(FarmGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceDetailRowChangeEvent : System.EventArgs {
            
            private InvoiceDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRowChangeEvent(InvoiceDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceMasterRowChangeEvent : System.EventArgs {
            
            private InvoiceMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRowChangeEvent(InvoiceMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ManufacturerRowChangeEvent : System.EventArgs {
            
            private ManufacturerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRowChangeEvent(ManufacturerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrganizationRowChangeEvent : System.EventArgs {
            
            private OrganizationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRowChangeEvent(OrganizationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PackingRowChangeEvent : System.EventArgs {
            
            private PackingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRowChangeEvent(PackingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptDetailRowChangeEvent : System.EventArgs {
            
            private ReceiptDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRowChangeEvent(ReceiptDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptMasterRowChangeEvent : System.EventArgs {
            
            private ReceiptMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRowChangeEvent(ReceiptMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptRemainsRowChangeEvent : System.EventArgs {
            
            private ReceiptRemainsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRowChangeEvent(ReceiptRemainsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockRowChangeEvent : System.EventArgs {
            
            private StockRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRowChangeEvent(StockRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StorageConditionRowChangeEvent : System.EventArgs {
            
            private StorageConditionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRowChangeEvent(StorageConditionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubstanceRowChangeEvent : System.EventArgs {
            
            private SubstanceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRowChangeEvent(SubstanceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TradePutletRowChangeEvent : System.EventArgs {
            
            private TradePutletRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRowChangeEvent(TradePutletRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FarmGroupLevel2RowChangeEvent : System.EventArgs {
            
            private FarmGroupLevel2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2RowChangeEvent(FarmGroupLevel2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductRowChangeEvent : System.EventArgs {
            
            private ProductRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRowChangeEvent(ProductRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptMasterNewRowChangeEvent : System.EventArgs {
            
            private ReceiptMasterNewRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRowChangeEvent(ReceiptMasterNewRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RetailTrade.MDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CountryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Country";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Country] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Ori" +
                "ginal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Country] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Country WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Country] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Country WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM dbo.C" +
                "ountry";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.CountryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.CountryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.CountryDataTable dataTable = new MDataSet.CountryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.CountryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Country");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UnitTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Unit";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Unit] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Origin" +
                "al_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Unit] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Unit WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Unit] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Unit WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM dbo.U" +
                "nit";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.UnitDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.UnitDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.UnitDataTable dataTable = new MDataSet.UnitDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.UnitDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Unit");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DocumentTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocumentTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DocumentType";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsInternal", "IsInternal");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DocumentType] WHERE (([ID] = @Original_ID) AND ([RowVersion] =" +
                " @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DocumentType] ([Name], [IsInternal], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @IsInternal, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, IsInternal, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM DocumentType WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsInternal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsInternal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DocumentType] SET [Name] = @Name, [IsInternal] = @IsInternal, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, IsInternal, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM DocumentType WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsInternal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsInternal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, IsInternal, AuthorCreate, AuthorLastModif, DateCreate, RowVersio" +
                "n FROM dbo.DocumentType";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.DocumentTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.DocumentTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.DocumentTypeDataTable dataTable = new MDataSet.DocumentTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.DocumentTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DocumentType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(IsInternal));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(IsInternal));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FarmGroupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FarmGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FarmGroup";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FarmGroup] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @O" +
                "riginal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[FarmGroup] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM FarmGroup WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FarmGroup] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM FarmGroup WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM dbo.F" +
                "armGroup";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.FarmGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.FarmGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.FarmGroupDataTable dataTable = new MDataSet.FarmGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.FarmGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FarmGroup");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvoiceDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvoiceDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("InvoiceMaterRef", "InvoiceMaterRef");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("PurchaseNDS", "PurchaseNDS");
            tableMapping.ColumnMappings.Add("PriceRetail", "PriceRetail");
            tableMapping.ColumnMappings.Add("RetailNDS", "RetailNDS");
            tableMapping.ColumnMappings.Add("PriceRetailNDS", "PriceRetailNDS");
            tableMapping.ColumnMappings.Add("LocalReceipDetailRef", "LocalReceipDetailRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceDetailRef", "RemoteInvoiceDetailRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[InvoiceDetail] WHERE (([ID] = @Original_ID) AND ([RowVersion] " +
                "= @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[InvoiceDetail] ([InvoiceMaterRef], [Quantity], [PricePurchase], [PurchaseNDS], [PriceRetail], [RetailNDS], [PriceRetailNDS], [LocalReceipDetailRef], [RemoteInvoiceDetailRef], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@InvoiceMaterRef, @Quantity, @PricePurchase, @PurchaseNDS, @PriceRetail, @RetailNDS, @PriceRetailNDS, @LocalReceipDetailRef, @RemoteInvoiceDetailRef, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, InvoiceMaterRef, Quantity, PricePurchase, PurchaseNDS, PriceRetail, RetailNDS, PriceRetailNDS, LocalReceipDetailRef, RemoteInvoiceDetailRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM InvoiceDetail WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMaterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InvoiceMaterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PricePurchase", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "PricePurchase", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchaseNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "PurchaseNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetail", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PriceRetail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "RetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LocalReceipDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LocalReceipDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteInvoiceDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteInvoiceDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[InvoiceDetail] SET [InvoiceMaterRef] = @InvoiceMaterRef, [Quantity] = @Quantity, [PricePurchase] = @PricePurchase, [PurchaseNDS] = @PurchaseNDS, [PriceRetail] = @PriceRetail, [RetailNDS] = @RetailNDS, [PriceRetailNDS] = @PriceRetailNDS, [LocalReceipDetailRef] = @LocalReceipDetailRef, [RemoteInvoiceDetailRef] = @RemoteInvoiceDetailRef, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, InvoiceMaterRef, Quantity, PricePurchase, PurchaseNDS, PriceRetail, RetailNDS, PriceRetailNDS, LocalReceipDetailRef, RemoteInvoiceDetailRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM InvoiceDetail WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMaterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InvoiceMaterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PricePurchase", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "PricePurchase", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchaseNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "PurchaseNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetail", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PriceRetail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "RetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LocalReceipDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LocalReceipDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteInvoiceDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteInvoiceDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, InvoiceMaterRef, Quantity, PricePurchase, PurchaseNDS, PriceRetail, Re" +
                "tailNDS, PriceRetailNDS, LocalReceipDetailRef, RemoteInvoiceDetailRef, AuthorCre" +
                "ate, AuthorLastModif, DateCreate, RowVersion FROM dbo.InvoiceDetail";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.InvoiceDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.InvoiceDetailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.InvoiceDetailDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvoiceDetail");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int InvoiceMaterRef, decimal Quantity, decimal PricePurchase, decimal PurchaseNDS, decimal PriceRetail, decimal RetailNDS, decimal PriceRetailNDS, int LocalReceipDetailRef, int RemoteInvoiceDetailRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(InvoiceMaterRef));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Quantity));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(PricePurchase));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PurchaseNDS));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(PriceRetail));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(RetailNDS));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(PriceRetailNDS));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(LocalReceipDetailRef));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(RemoteInvoiceDetailRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int InvoiceMaterRef, decimal Quantity, decimal PricePurchase, decimal PurchaseNDS, decimal PriceRetail, decimal RetailNDS, decimal PriceRetailNDS, int LocalReceipDetailRef, int RemoteInvoiceDetailRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(InvoiceMaterRef));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Quantity));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(PricePurchase));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(PurchaseNDS));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(PriceRetail));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(RetailNDS));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(PriceRetailNDS));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(LocalReceipDetailRef));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(RemoteInvoiceDetailRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvoiceMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvoiceMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("OrganisationRef", "OrganisationRef");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("RemoteStockRef", "RemoteStockRef");
            tableMapping.ColumnMappings.Add("RemoteReceiptMasterRef", "RemoteReceiptMasterRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceMasterRef", "RemoteInvoiceMasterRef");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("Sum", "Sum");
            tableMapping.ColumnMappings.Add("Nds", "Nds");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[InvoiceMaster] WHERE (([ID] = @Original_ID) AND ([RowVersion] " +
                "= @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[InvoiceMaster] ([Number], [Date], [OrganisationRef], [DocumentTypeRef], [RemoteStockRef], [RemoteReceiptMasterRef], [RemoteInvoiceMasterRef], [IsReadOnly], [Sum], [Nds], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Number, @Date, @OrganisationRef, @DocumentTypeRef, @RemoteStockRef, @RemoteReceiptMasterRef, @RemoteInvoiceMasterRef, @IsReadOnly, @Sum, @Nds, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Number, Date, OrganisationRef, DocumentTypeRef, RemoteStockRef, RemoteReceiptMasterRef, RemoteInvoiceMasterRef, IsReadOnly, Sum, Nds, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM InvoiceMaster WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrganisationRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrganisationRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocumentTypeRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DocumentTypeRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteStockRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteReceiptMasterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteReceiptMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteInvoiceMasterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteInvoiceMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsReadOnly", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsReadOnly", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sum", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "Sum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nds", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "Nds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[InvoiceMaster] SET [Number] = @Number, [Date] = @Date, [OrganisationRef] = @OrganisationRef, [DocumentTypeRef] = @DocumentTypeRef, [RemoteStockRef] = @RemoteStockRef, [RemoteReceiptMasterRef] = @RemoteReceiptMasterRef, [RemoteInvoiceMasterRef] = @RemoteInvoiceMasterRef, [IsReadOnly] = @IsReadOnly, [Sum] = @Sum, [Nds] = @Nds, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Number, Date, OrganisationRef, DocumentTypeRef, RemoteStockRef, RemoteReceiptMasterRef, RemoteInvoiceMasterRef, IsReadOnly, Sum, Nds, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM InvoiceMaster WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrganisationRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "OrganisationRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocumentTypeRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DocumentTypeRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteStockRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteReceiptMasterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteReceiptMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteInvoiceMasterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RemoteInvoiceMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsReadOnly", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsReadOnly", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sum", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "Sum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nds", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "Nds", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Number, Date, OrganisationRef, DocumentTypeRef, RemoteStockRef, Remote" +
                "ReceiptMasterRef, RemoteInvoiceMasterRef, IsReadOnly, Sum, Nds, AuthorCreate, Au" +
                "thorLastModif, DateCreate, RowVersion FROM dbo.InvoiceMaster";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.InvoiceMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.InvoiceMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.InvoiceMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvoiceMaster");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int Number, System.DateTime Date, int OrganisationRef, int DocumentTypeRef, int RemoteStockRef, int RemoteReceiptMasterRef, int RemoteInvoiceMasterRef, bool IsReadOnly, decimal Sum, decimal Nds, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Number));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Date));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(OrganisationRef));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(DocumentTypeRef));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(RemoteStockRef));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(RemoteReceiptMasterRef));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(RemoteInvoiceMasterRef));
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(IsReadOnly));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(Sum));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(Nds));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Number, 
                    System.DateTime Date, 
                    int OrganisationRef, 
                    int DocumentTypeRef, 
                    int RemoteStockRef, 
                    int RemoteReceiptMasterRef, 
                    int RemoteInvoiceMasterRef, 
                    bool IsReadOnly, 
                    decimal Sum, 
                    decimal Nds, 
                    string AuthorCreate, 
                    string AuthorLastModif, 
                    System.DateTime DateCreate, 
                    int Original_ID, 
                    byte[] Original_RowVersion, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Number));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Date));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(OrganisationRef));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(DocumentTypeRef));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(RemoteStockRef));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(RemoteReceiptMasterRef));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(RemoteInvoiceMasterRef));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(IsReadOnly));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Sum));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Nds));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ManufacturerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ManufacturerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Manufacturer";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("CounrtyRef", "CounrtyRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ManufacturerDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ManufacturerInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CounrtyRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CounrtyRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.ManufacturerUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CounrtyRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CounrtyRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ManufacturerSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ManufacturerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ManufacturerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ManufacturerDataTable dataTable = new MDataSet.ManufacturerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ManufacturerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Manufacturer");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, int CounrtyRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(CounrtyRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, int CounrtyRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(CounrtyRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OrganizationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrganizationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Organization";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ShortName", "ShortName");
            tableMapping.ColumnMappings.Add("Director", "Director");
            tableMapping.ColumnMappings.Add("Adress", "Adress");
            tableMapping.ColumnMappings.Add("Address_jur", "Address_jur");
            tableMapping.ColumnMappings.Add("OKPO", "OKPO");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("BankMFO", "BankMFO");
            tableMapping.ColumnMappings.Add("INN", "INN");
            tableMapping.ColumnMappings.Add("NumSvid", "NumSvid");
            tableMapping.ColumnMappings.Add("NumSvidChp", "NumSvidChp");
            tableMapping.ColumnMappings.Add("PassChp", "PassChp");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("License", "License");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("BankRS", "BankRS");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Organization] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Orig" +
                "inal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Organization] ([Name], [ShortName], [Director], [Adress], [Address_jur], [OKPO], [BankName], [BankMFO], [INN], [NumSvid], [NumSvidChp], [PassChp], [Phone], [License], [Note], [AuthorCreate], [AuthorLastModif], [DateCreate], [BankRS]) VALUES (@Name, @ShortName, @Director, @Adress, @Address_jur, @OKPO, @BankName, @BankMFO, @INN, @NumSvid, @NumSvidChp, @PassChp, @Phone, @License, @Note, @AuthorCreate, @AuthorLastModif, @DateCreate, @BankRS);
SELECT ID, Name, ShortName, Director, Adress, Address_jur, OKPO, BankName, BankMFO, INN, NumSvid, NumSvidChp, PassChp, Phone, License, Note, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, BankRS FROM Organization WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ShortName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ShortName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address_jur", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address_jur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OKPO", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OKPO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankMFO", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankMFO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@INN", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "INN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvid", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSvid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvidChp", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSvidChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PassChp", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PassChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@License", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "License", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankRS", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankRS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Organization] SET [Name] = @Name, [ShortName] = @ShortName, [Director] = @Director, [Adress] = @Adress, [Address_jur] = @Address_jur, [OKPO] = @OKPO, [BankName] = @BankName, [BankMFO] = @BankMFO, [INN] = @INN, [NumSvid] = @NumSvid, [NumSvidChp] = @NumSvidChp, [PassChp] = @PassChp, [Phone] = @Phone, [License] = @License, [Note] = @Note, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate, [BankRS] = @BankRS WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, ShortName, Director, Adress, Address_jur, OKPO, BankName, BankMFO, INN, NumSvid, NumSvidChp, PassChp, Phone, License, Note, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, BankRS FROM Organization WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ShortName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ShortName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address_jur", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address_jur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OKPO", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OKPO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankMFO", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankMFO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@INN", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "INN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvid", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSvid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvidChp", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSvidChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PassChp", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PassChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@License", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "License", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankRS", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankRS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, ShortName, Director, Adress, Address_jur, OKPO, BankName, BankMF" +
                "O, INN, NumSvid, NumSvidChp, PassChp, Phone, License, Note, \r\n               Aut" +
                "horCreate, AuthorLastModif, DateCreate, RowVersion, BankRS\r\nFROM  Organization";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.OrganizationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.OrganizationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.OrganizationDataTable dataTable = new MDataSet.OrganizationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.OrganizationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Organization");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Name, 
                    string ShortName, 
                    string Director, 
                    string Adress, 
                    string Address_jur, 
                    string OKPO, 
                    string BankName, 
                    string BankMFO, 
                    string INN, 
                    string NumSvid, 
                    string NumSvidChp, 
                    string PassChp, 
                    string Phone, 
                    string License, 
                    string Note, 
                    string AuthorCreate, 
                    string AuthorLastModif, 
                    System.DateTime DateCreate, 
                    string BankRS) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((ShortName == null)) {
                throw new System.ArgumentNullException("ShortName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ShortName));
            }
            if ((Director == null)) {
                throw new System.ArgumentNullException("Director");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Director));
            }
            if ((Adress == null)) {
                throw new System.ArgumentNullException("Adress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Adress));
            }
            if ((Address_jur == null)) {
                throw new System.ArgumentNullException("Address_jur");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Address_jur));
            }
            if ((OKPO == null)) {
                throw new System.ArgumentNullException("OKPO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(OKPO));
            }
            if ((BankName == null)) {
                throw new System.ArgumentNullException("BankName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(BankName));
            }
            if ((BankMFO == null)) {
                throw new System.ArgumentNullException("BankMFO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(BankMFO));
            }
            if ((INN == null)) {
                throw new System.ArgumentNullException("INN");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(INN));
            }
            if ((NumSvid == null)) {
                throw new System.ArgumentNullException("NumSvid");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(NumSvid));
            }
            if ((NumSvidChp == null)) {
                throw new System.ArgumentNullException("NumSvidChp");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(NumSvidChp));
            }
            if ((PassChp == null)) {
                throw new System.ArgumentNullException("PassChp");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(PassChp));
            }
            if ((Phone == null)) {
                throw new System.ArgumentNullException("Phone");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Phone));
            }
            if ((License == null)) {
                throw new System.ArgumentNullException("License");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(License));
            }
            if ((Note == null)) {
                throw new System.ArgumentNullException("Note");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Note));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(DateCreate));
            if ((BankRS == null)) {
                throw new System.ArgumentNullException("BankRS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(BankRS));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Name, 
                    string ShortName, 
                    string Director, 
                    string Adress, 
                    string Address_jur, 
                    string OKPO, 
                    string BankName, 
                    string BankMFO, 
                    string INN, 
                    string NumSvid, 
                    string NumSvidChp, 
                    string PassChp, 
                    string Phone, 
                    string License, 
                    string Note, 
                    string AuthorCreate, 
                    string AuthorLastModif, 
                    System.DateTime DateCreate, 
                    string BankRS, 
                    int Original_ID, 
                    byte[] Original_RowVersion, 
                    int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((ShortName == null)) {
                throw new System.ArgumentNullException("ShortName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ShortName));
            }
            if ((Director == null)) {
                throw new System.ArgumentNullException("Director");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Director));
            }
            if ((Adress == null)) {
                throw new System.ArgumentNullException("Adress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Adress));
            }
            if ((Address_jur == null)) {
                throw new System.ArgumentNullException("Address_jur");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Address_jur));
            }
            if ((OKPO == null)) {
                throw new System.ArgumentNullException("OKPO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(OKPO));
            }
            if ((BankName == null)) {
                throw new System.ArgumentNullException("BankName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(BankName));
            }
            if ((BankMFO == null)) {
                throw new System.ArgumentNullException("BankMFO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(BankMFO));
            }
            if ((INN == null)) {
                throw new System.ArgumentNullException("INN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(INN));
            }
            if ((NumSvid == null)) {
                throw new System.ArgumentNullException("NumSvid");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(NumSvid));
            }
            if ((NumSvidChp == null)) {
                throw new System.ArgumentNullException("NumSvidChp");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(NumSvidChp));
            }
            if ((PassChp == null)) {
                throw new System.ArgumentNullException("PassChp");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(PassChp));
            }
            if ((Phone == null)) {
                throw new System.ArgumentNullException("Phone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Phone));
            }
            if ((License == null)) {
                throw new System.ArgumentNullException("License");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(License));
            }
            if ((Note == null)) {
                throw new System.ArgumentNullException("Note");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Note));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(DateCreate));
            if ((BankRS == null)) {
                throw new System.ArgumentNullException("BankRS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(BankRS));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PackingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PackingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Packing";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Packing] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Ori" +
                "ginal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Packing] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Packing WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Packing] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Packing WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM dbo.P" +
                "acking";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.PackingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.PackingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.PackingDataTable dataTable = new MDataSet.PackingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.PackingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Packing");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ReceiptMaterRef", "ReceiptMaterRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("Series", "Series");
            tableMapping.ColumnMappings.Add("UseByDate", "UseByDate");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("PurchaseNDS", "PurchaseNDS");
            tableMapping.ColumnMappings.Add("RetailNDS", "RetailNDS");
            tableMapping.ColumnMappings.Add("PriceRetailNDS", "PriceRetailNDS");
            tableMapping.ColumnMappings.Add("InvoiceDetailRef", "InvoiceDetailRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ReceiptDetail] WHERE (([ID] = @Original_ID) AND ([RowVersion] " +
                "= @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ReceiptDetail] ([ReceiptMaterRef], [ProductRef], [Series], [UseByDate], [Quantity], [PricePurchase], [PurchaseNDS], [RetailNDS], [PriceRetailNDS], [InvoiceDetailRef], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@ReceiptMaterRef, @ProductRef, @Series, @UseByDate, @Quantity, @PricePurchase, @PurchaseNDS, @RetailNDS, @PriceRetailNDS, @InvoiceDetailRef, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, ReceiptMaterRef, ProductRef, Series, UseByDate, Quantity, PricePurchase, PurchaseNDS, RetailNDS, PriceRetailNDS, InvoiceDetailRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM ReceiptDetail WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMaterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptMaterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Series", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Series", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UseByDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "UseByDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PricePurchase", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PricePurchase", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchaseNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PurchaseNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "RetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InvoiceDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ReceiptDetail] SET [ReceiptMaterRef] = @ReceiptMaterRef, [ProductRef] = @ProductRef, [Series] = @Series, [UseByDate] = @UseByDate, [Quantity] = @Quantity, [PricePurchase] = @PricePurchase, [PurchaseNDS] = @PurchaseNDS, [RetailNDS] = @RetailNDS, [PriceRetailNDS] = @PriceRetailNDS, [InvoiceDetailRef] = @InvoiceDetailRef, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, ReceiptMaterRef, ProductRef, Series, UseByDate, Quantity, PricePurchase, PurchaseNDS, RetailNDS, PriceRetailNDS, InvoiceDetailRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM ReceiptDetail WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMaterRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptMaterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Series", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Series", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UseByDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "UseByDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PricePurchase", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PricePurchase", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchaseNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PurchaseNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "RetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InvoiceDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, ReceiptMaterRef, ProductRef, Series, UseByDate, Quantity, PricePurchas" +
                "e, PurchaseNDS, RetailNDS, PriceRetailNDS, InvoiceDetailRef, AuthorCreate, Autho" +
                "rLastModif, DateCreate, RowVersion FROM dbo.ReceiptDetail";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptDetailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptDetailDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptDetail");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ReceiptMaterRef, System.Nullable<int> ProductRef, string Series, System.Nullable<System.DateTime> UseByDate, System.Nullable<decimal> Quantity, System.Nullable<decimal> PricePurchase, System.Nullable<decimal> PurchaseNDS, System.Nullable<decimal> RetailNDS, System.Nullable<decimal> PriceRetailNDS, System.Nullable<int> InvoiceDetailRef, string AuthorCreate, string AuthorLastModif, System.Nullable<System.DateTime> DateCreate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ReceiptMaterRef));
            if ((ProductRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ProductRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Series == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Series));
            }
            if ((UseByDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(UseByDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Quantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Quantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PricePurchase.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(PricePurchase.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((PurchaseNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(PurchaseNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RetailNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(RetailNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PriceRetailNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(PriceRetailNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((InvoiceDetailRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(InvoiceDetailRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((AuthorCreate == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(AuthorLastModif));
            }
            if ((DateCreate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(DateCreate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ReceiptMaterRef, 
                    System.Nullable<int> ProductRef, 
                    string Series, 
                    System.Nullable<System.DateTime> UseByDate, 
                    System.Nullable<decimal> Quantity, 
                    System.Nullable<decimal> PricePurchase, 
                    System.Nullable<decimal> PurchaseNDS, 
                    System.Nullable<decimal> RetailNDS, 
                    System.Nullable<decimal> PriceRetailNDS, 
                    System.Nullable<int> InvoiceDetailRef, 
                    string AuthorCreate, 
                    string AuthorLastModif, 
                    System.Nullable<System.DateTime> DateCreate, 
                    int Original_ID, 
                    byte[] Original_RowVersion, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ReceiptMaterRef));
            if ((ProductRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ProductRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Series == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Series));
            }
            if ((UseByDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(UseByDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Quantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Quantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PricePurchase.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(PricePurchase.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((PurchaseNDS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(PurchaseNDS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((RetailNDS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(RetailNDS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PriceRetailNDS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(PriceRetailNDS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((InvoiceDetailRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(InvoiceDetailRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((AuthorCreate == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AuthorLastModif));
            }
            if ((DateCreate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(DateCreate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DocDate", "DocDate");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("OrganizationRef", "OrganizationRef");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("SenderStockRef", "SenderStockRef");
            tableMapping.ColumnMappings.Add("SenderInvoiceRef", "SenderInvoiceRef");
            tableMapping.ColumnMappings.Add("TotalSum", "TotalSum");
            tableMapping.ColumnMappings.Add("PurchSum", "PurchSum");
            tableMapping.ColumnMappings.Add("SumNDS", "SumNDS");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ReceiptMasterDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ReceiptMasterInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Number", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "Number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DocDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrganizationRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OrganizationRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "MainStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SenderStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderInvoiceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SenderInvoiceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.ReceiptMasterUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Number", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "Number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DocDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocumentTypeRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "DocumentTypeRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrganizationRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OrganizationRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "MainStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SenderStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderInvoiceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SenderInvoiceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TotalSum", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "TotalSum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchSum", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PurchSum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SumNDS", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "SumNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsReadOnly", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsReadOnly", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ReceiptMasterSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptMaster");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> Number, string Note, System.Nullable<System.DateTime> DocDate, System.Nullable<int> OrganizationRef, System.Nullable<int> MainStockRef, System.Nullable<int> SenderStockRef, System.Nullable<int> SenderInvoiceRef) {
            if ((Number.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Number.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Note == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Note));
            }
            if ((DocDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DocDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((OrganizationRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(OrganizationRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((MainStockRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(MainStockRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((SenderStockRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(SenderStockRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((SenderInvoiceRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(SenderInvoiceRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Nullable<int> Number, 
                    string Note, 
                    System.Nullable<System.DateTime> DocDate, 
                    System.Nullable<int> DocumentTypeRef, 
                    System.Nullable<int> OrganizationRef, 
                    System.Nullable<int> MainStockRef, 
                    System.Nullable<int> SenderStockRef, 
                    System.Nullable<int> SenderInvoiceRef, 
                    System.Nullable<decimal> TotalSum, 
                    System.Nullable<decimal> PurchSum, 
                    System.Nullable<decimal> SumNDS, 
                    System.Nullable<bool> IsReadOnly, 
                    string AuthorCreate, 
                    string AuthorLastModif, 
                    System.Nullable<System.DateTime> DateCreate, 
                    System.Nullable<int> Original_ID, 
                    byte[] Original_RowVersion, 
                    System.Nullable<int> ID) {
            if ((Number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Note == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Note));
            }
            if ((DocDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DocDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((DocumentTypeRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(DocumentTypeRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((OrganizationRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(OrganizationRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((MainStockRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(MainStockRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((SenderStockRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(SenderStockRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((SenderInvoiceRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(SenderInvoiceRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((TotalSum.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(TotalSum.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((PurchSum.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(PurchSum.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((SumNDS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(SumNDS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((IsReadOnly.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(IsReadOnly.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((AuthorCreate == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(AuthorLastModif));
            }
            if ((DateCreate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(DateCreate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptRemainsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptRemainsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptRemains";
            tableMapping.ColumnMappings.Add("ReceiptDetailRef", "ReceiptDetailRef");
            tableMapping.ColumnMappings.Add("QuantityReceipt", "QuantityReceipt");
            tableMapping.ColumnMappings.Add("QuantityRemains", "QuantityRemains");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ReceiptRemains] ([ReceiptDetailRef], [QuantityReceipt], [Quant" +
                "ityRemains], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@ReceiptDe" +
                "tailRef, @QuantityReceipt, @QuantityRemains, @AuthorCreate, @AuthorLastModif, @D" +
                "ateCreate)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityReceipt", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityReceipt", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityRemains", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityRemains", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ReceiptDetailRef, QuantityReceipt, QuantityRemains, AuthorCreate, AuthorLa" +
                "stModif, DateCreate, RowVersion FROM dbo.ReceiptRemains";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptRemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptRemainsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptRemainsDataTable dataTable = new MDataSet.ReceiptRemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptRemainsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptRemains");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ReceiptDetailRef, decimal QuantityReceipt, decimal QuantityRemains, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ReceiptDetailRef));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(QuantityReceipt));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(QuantityRemains));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StockTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Stock";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("TradePupletRef", "TradePupletRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("IsLocal", "IsLocal");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Stock] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_Ro" +
                "wVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Stock] ([Name], [IsNDS], [TradePupletRef], [AuthorCreate], [AuthorLastModif], [DateCreate], [IsLocal]) VALUES (@Name, @IsNDS, @TradePupletRef, @AuthorCreate, @AuthorLastModif, @DateCreate, @IsLocal);
SELECT ID, Name, IsNDS, TradePupletRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, IsLocal FROM Stock WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePupletRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TradePupletRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLocal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLocal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [Stock] SET [Name] = @Name, [IsNDS] = @IsNDS, [TradePupletRef] = @TradePupletRef, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate, [IsLocal] = @IsLocal WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, IsNDS, TradePupletRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, IsLocal FROM Stock WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePupletRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TradePupletRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLocal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLocal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, IsNDS, TradePupletRef, AuthorCreate, AuthorLastModif, DateCreate" +
                ", RowVersion, IsLocal\r\nFROM  Stock";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.StockDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.StockDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.StockDataTable dataTable = new MDataSet.StockDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.StockDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Stock");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, bool IsNDS, int TradePupletRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, bool IsLocal) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(IsNDS));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(TradePupletRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(IsLocal));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, bool IsNDS, int TradePupletRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, bool IsLocal, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(IsNDS));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(TradePupletRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(IsLocal));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StorageConditionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StorageConditionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StorageCondition";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[StorageCondition] WHERE (([ID] = @Original_ID) AND ([RowVersio" +
                "n] = @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[StorageCondition] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM StorageCondition WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[StorageCondition] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM StorageCondition WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM dbo.S" +
                "torageCondition";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.StorageConditionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.StorageConditionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.StorageConditionDataTable dataTable = new MDataSet.StorageConditionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.StorageConditionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "StorageCondition");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SubstanceTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SubstanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Substance";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Substance] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @O" +
                "riginal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Substance] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Substance WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Substance] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM Substance WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM dbo.S" +
                "ubstance";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SubstanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SubstanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SubstanceDataTable dataTable = new MDataSet.SubstanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SubstanceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Substance");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TradePutletTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TradePutletTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TradePutlet";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("IP", "IP");
            tableMapping.ColumnMappings.Add("Adress", "Adress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [TradePutlet] WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Origi" +
                "nal_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TradePutlet] ([Name], [AuthorCreate], [AuthorLastModif], [DateCreate], [IP], [Adress]) VALUES (@Name, @AuthorCreate, @AuthorLastModif, @DateCreate, @IP, @Adress);
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, IP, Adress FROM TradePutlet WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IP", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [TradePutlet] SET [Name] = @Name, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate, [IP] = @IP, [Adress] = @Adress WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, IP, Adress FROM TradePutlet WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IP", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, IP, Adres" +
                "s\r\nFROM  TradePutlet";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.TradePutletDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.TradePutletDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.TradePutletDataTable dataTable = new MDataSet.TradePutletDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.TradePutletDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TradePutlet");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, string IP, string Adress) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            if ((IP == null)) {
                throw new System.ArgumentNullException("IP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IP));
            }
            if ((Adress == null)) {
                throw new System.ArgumentNullException("Adress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Adress));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, string IP, string Adress, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateCreate));
            if ((IP == null)) {
                throw new System.ArgumentNullException("IP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IP));
            }
            if ((Adress == null)) {
                throw new System.ArgumentNullException("Adress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Adress));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FarmGroupLevel2TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FarmGroupLevel2TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FarmGroupLevel2";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("FarmGroupRef", "FarmGroupRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FarmGroupLevel2] WHERE (([ID] = @Original_ID) AND ([RowVersion" +
                "] = @Original_RowVersion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[FarmGroupLevel2] ([Name], [FarmGroupRef], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@Name, @FarmGroupRef, @AuthorCreate, @AuthorLastModif, @DateCreate);
SELECT ID, Name, FarmGroupRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM FarmGroupLevel2 WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGroupRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FarmGroupRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FarmGroupLevel2] SET [Name] = @Name, [FarmGroupRef] = @FarmGroupRef, [AuthorCreate] = @AuthorCreate, [AuthorLastModif] = @AuthorLastModif, [DateCreate] = @DateCreate WHERE (([ID] = @Original_ID) AND ([RowVersion] = @Original_RowVersion));
SELECT ID, Name, FarmGroupRef, AuthorCreate, AuthorLastModif, DateCreate, RowVersion FROM FarmGroupLevel2 WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGroupRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FarmGroupRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, Name, FarmGroupRef, AuthorCreate, AuthorLastModif, DateCreate, RowVers" +
                "ion FROM dbo.FarmGroupLevel2";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.FarmGroupLevel2DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.FarmGroupLevel2DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.FarmGroupLevel2DataTable dataTable = new MDataSet.FarmGroupLevel2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.FarmGroupLevel2DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FarmGroupLevel2");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, int FarmGroupRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(FarmGroupRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, int FarmGroupRef, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(FarmGroupRef));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProductTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Product";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("SmallName", "SmallName");
            tableMapping.ColumnMappings.Add("PriceManufact", "PriceManufact");
            tableMapping.ColumnMappings.Add("UnitRef", "UnitRef");
            tableMapping.ColumnMappings.Add("PackingRef", "PackingRef");
            tableMapping.ColumnMappings.Add("StorageConditionRef", "StorageConditionRef");
            tableMapping.ColumnMappings.Add("SubstanceRef", "SubstanceRef");
            tableMapping.ColumnMappings.Add("FarmGrouplevel2Ref", "FarmGrouplevel2Ref");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            tableMapping.ColumnMappings.Add("IsRecept", "IsRecept");
            tableMapping.ColumnMappings.Add("IsOneRecept", "IsOneRecept");
            tableMapping.ColumnMappings.Add("IsHide", "IsHide");
            tableMapping.ColumnMappings.Add("MinDivisor", "MinDivisor");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("CountryName", "CountryName");
            tableMapping.ColumnMappings.Add("FarmGroupName", "FarmGroupName");
            tableMapping.ColumnMappings.Add("PackingName", "PackingName");
            tableMapping.ColumnMappings.Add("StorageConditionName", "StorageConditionName");
            tableMapping.ColumnMappings.Add("ManufacturerName", "ManufacturerName");
            tableMapping.ColumnMappings.Add("FarmGroupLevel2", "FarmGroupLevel2");
            tableMapping.ColumnMappings.Add("UnitName", "UnitName");
            tableMapping.ColumnMappings.Add("SubstanceName", "SubstanceName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ProductDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ProductInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SmallName", System.Data.SqlDbType.NChar, 25, System.Data.ParameterDirection.Input, 0, 0, "SmallName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceManufact", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceManufact", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UnitRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "UnitRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PackingRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "PackingRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StorageConditionRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "StorageConditionRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubstanceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SubstanceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGroupRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGrouplevel2Ref", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "FarmGrouplevel2Ref", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManufacturerRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ManufacturerRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsOneRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsOneRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsHide", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsHide", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinDivisor", System.Data.SqlDbType.SmallInt, 2, System.Data.ParameterDirection.Input, 5, 0, "MinDivisor", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.ProductUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SmallName", System.Data.SqlDbType.NChar, 25, System.Data.ParameterDirection.Input, 0, 0, "SmallName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceManufact", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceManufact", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UnitRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "UnitRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PackingRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "PackingRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StorageConditionRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "StorageConditionRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubstanceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SubstanceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGroupRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGrouplevel2Ref", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "FarmGrouplevel2Ref", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManufacturerRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ManufacturerRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsOneRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsOneRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsVisible", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinDivisor", System.Data.SqlDbType.SmallInt, 2, System.Data.ParameterDirection.Input, 5, 0, "MinDivisor", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ProductSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ProductDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ProductDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Product");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptMasterNewTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptMasterNewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptMasterNew";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DocDate", "DocDate");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("OrganizationRef", "OrganizationRef");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("SenderStockRef", "SenderStockRef");
            tableMapping.ColumnMappings.Add("SenderInvoiceRef", "SenderInvoiceRef");
            tableMapping.ColumnMappings.Add("TotalSum", "TotalSum");
            tableMapping.ColumnMappings.Add("PurchSum", "PurchSum");
            tableMapping.ColumnMappings.Add("SumNDS", "SumNDS");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("DocumentTypeName", "DocumentTypeName");
            tableMapping.ColumnMappings.Add("StockName", "StockName");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("TradePutletName", "TradePutletName");
            tableMapping.ColumnMappings.Add("OrganizationName", "OrganizationName");
            tableMapping.ColumnMappings.Add("FullAuthorModif", "FullAuthorModif");
            tableMapping.ColumnMappings.Add("FullAuthorCreate", "FullAuthorCreate");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, Number, Note, DocDate, DocumentTypeRef, OrganizationRef, MainStockRef, SenderStockRef, SenderInvoiceRef, TotalSum, PurchSum, SumNDS, 
               IsReadOnly, AuthorCreate, AuthorLastModif, DateCreate, RowVersion, DocumentTypeName, StockName, IsNDS, TradePutletName, 
               OrganizationName, FullAuthorModif, FullAuthorCreate
FROM  ReceiptMasterNew";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptMasterNewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptMasterNewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptMasterNewDataTable dataTable = new MDataSet.ReceiptMasterNewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591