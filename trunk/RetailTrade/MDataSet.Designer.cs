//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RetailTrade {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MDataSet : System.Data.DataSet {
        
        private CountryDataTable tableCountry;
        
        private DocumentTypeDataTable tableDocumentType;
        
        private InvoiceDetailDataTable tableInvoiceDetail;
        
        private InvoiceMasterDataTable tableInvoiceMaster;
        
        private OrganizationDataTable tableOrganization;
        
        private ReceiptRemainsDataTable tableReceiptRemains;
        
        private StockDataTable tableStock;
        
        private TradePutletDataTable tableTradePutlet;
        
        private ReceiptMasterDataTable tableReceiptMaster;
        
        private ReceiptDetailDataTable tableReceiptDetail;
        
        private StorageConditionDataTable tableStorageCondition;
        
        private ProductDataTable tableProduct;
        
        private FarmGroupDataTable tableFarmGroup;
        
        private PackingDataTable tablePacking;
        
        private SubstanceDataTable tableSubstance;
        
        private UnitDataTable tableUnit;
        
        private ManufacturerDataTable tableManufacturer;
        
        private FarmGroupLevel2DataTable tableFarmGroupLevel2;
        
        private OrdersDataTable tableOrders;
        
        private RemainsDataTable tableRemains;
        
        private PricesPurchaseDataTable tablePricesPurchase;
        
        private PeriodsDataTable tablePeriods;
        
        private LinkedInvoiceDetailDataTable tableLinkedInvoiceDetail;
        
        private LinkedInvoiceMasterDataTable tableLinkedInvoiceMaster;
        
        private System.Data.DataRelation relationFK_Stock_InvoiceMaster;
        
        private System.Data.DataRelation relationFK_InvoiceMaster_StockMain;
        
        private System.Data.DataRelation relationFK_ReceiptRemains_ReceiptDetail;
        
        private System.Data.DataRelation relationFK_FarmGroupLevel2_Product;
        
        private System.Data.DataRelation relationFK_Unit_Product;
        
        private System.Data.DataRelation relationFK_Substance_Product;
        
        private System.Data.DataRelation relationFK_FarmGroup_FarmGroupLevel2;
        
        private System.Data.DataRelation relationFK_InvoiceDetail_InvoiceMaster;
        
        private System.Data.DataRelation relationFK_InvoiceMaster_Organization;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_DocumentType;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Organization;
        
        private System.Data.DataRelation relationFK_ReceiptMaster_Stock;
        
        private System.Data.DataRelation relationStorageCondition_Product;
        
        private System.Data.DataRelation relationFK_Packing_Product;
        
        private System.Data.DataRelation relationReceiptDetail_Orders;
        
        private System.Data.DataRelation relationRemains_InvoiceDetail;
        
        private System.Data.DataRelation relationProduct_Remains;
        
        private System.Data.DataRelation relationProduct_Orders;
        
        private System.Data.DataRelation relationTradePutlet_Orders;
        
        private System.Data.DataRelation relationOrganization_PricesPurchase;
        
        private System.Data.DataRelation relationProduct_PricesPurchase;
        
        private System.Data.DataRelation relationReceiptDetail_PricesPurchase;
        
        private System.Data.DataRelation relationReceiptDetail_InvoiceDetail;
        
        private System.Data.DataRelation relationReceiptDetail_Remains;
        
        private System.Data.DataRelation relationTradePutlet_Stock;
        
        private System.Data.DataRelation relationProduct_ReceiptDetail;
        
        private System.Data.DataRelation relationFK_Manufacturer_ReceiptDetail;
        
        private System.Data.DataRelation relationReceiptMaster_ReceiptDetail;
        
        private System.Data.DataRelation relationLinkedInvoiceMaster_LinkedInvoiceDetail;
        
        private System.Data.DataRelation relationFK_Country_Manufacturer;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["DocumentType"] != null)) {
                    base.Tables.Add(new DocumentTypeDataTable(ds.Tables["DocumentType"]));
                }
                if ((ds.Tables["InvoiceDetail"] != null)) {
                    base.Tables.Add(new InvoiceDetailDataTable(ds.Tables["InvoiceDetail"]));
                }
                if ((ds.Tables["InvoiceMaster"] != null)) {
                    base.Tables.Add(new InvoiceMasterDataTable(ds.Tables["InvoiceMaster"]));
                }
                if ((ds.Tables["Organization"] != null)) {
                    base.Tables.Add(new OrganizationDataTable(ds.Tables["Organization"]));
                }
                if ((ds.Tables["ReceiptRemains"] != null)) {
                    base.Tables.Add(new ReceiptRemainsDataTable(ds.Tables["ReceiptRemains"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                if ((ds.Tables["TradePutlet"] != null)) {
                    base.Tables.Add(new TradePutletDataTable(ds.Tables["TradePutlet"]));
                }
                if ((ds.Tables["ReceiptMaster"] != null)) {
                    base.Tables.Add(new ReceiptMasterDataTable(ds.Tables["ReceiptMaster"]));
                }
                if ((ds.Tables["ReceiptDetail"] != null)) {
                    base.Tables.Add(new ReceiptDetailDataTable(ds.Tables["ReceiptDetail"]));
                }
                if ((ds.Tables["StorageCondition"] != null)) {
                    base.Tables.Add(new StorageConditionDataTable(ds.Tables["StorageCondition"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["FarmGroup"] != null)) {
                    base.Tables.Add(new FarmGroupDataTable(ds.Tables["FarmGroup"]));
                }
                if ((ds.Tables["Packing"] != null)) {
                    base.Tables.Add(new PackingDataTable(ds.Tables["Packing"]));
                }
                if ((ds.Tables["Substance"] != null)) {
                    base.Tables.Add(new SubstanceDataTable(ds.Tables["Substance"]));
                }
                if ((ds.Tables["Unit"] != null)) {
                    base.Tables.Add(new UnitDataTable(ds.Tables["Unit"]));
                }
                if ((ds.Tables["Manufacturer"] != null)) {
                    base.Tables.Add(new ManufacturerDataTable(ds.Tables["Manufacturer"]));
                }
                if ((ds.Tables["FarmGroupLevel2"] != null)) {
                    base.Tables.Add(new FarmGroupLevel2DataTable(ds.Tables["FarmGroupLevel2"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Remains"] != null)) {
                    base.Tables.Add(new RemainsDataTable(ds.Tables["Remains"]));
                }
                if ((ds.Tables["PricesPurchase"] != null)) {
                    base.Tables.Add(new PricesPurchaseDataTable(ds.Tables["PricesPurchase"]));
                }
                if ((ds.Tables["Periods"] != null)) {
                    base.Tables.Add(new PeriodsDataTable(ds.Tables["Periods"]));
                }
                if ((ds.Tables["LinkedInvoiceDetail"] != null)) {
                    base.Tables.Add(new LinkedInvoiceDetailDataTable(ds.Tables["LinkedInvoiceDetail"]));
                }
                if ((ds.Tables["LinkedInvoiceMaster"] != null)) {
                    base.Tables.Add(new LinkedInvoiceMasterDataTable(ds.Tables["LinkedInvoiceMaster"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CountryDataTable Country {
            get {
                return this.tableCountry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DocumentTypeDataTable DocumentType {
            get {
                return this.tableDocumentType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceDetailDataTable InvoiceDetail {
            get {
                return this.tableInvoiceDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoiceMasterDataTable InvoiceMaster {
            get {
                return this.tableInvoiceMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrganizationDataTable Organization {
            get {
                return this.tableOrganization;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptRemainsDataTable ReceiptRemains {
            get {
                return this.tableReceiptRemains;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StockDataTable Stock {
            get {
                return this.tableStock;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TradePutletDataTable TradePutlet {
            get {
                return this.tableTradePutlet;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptMasterDataTable ReceiptMaster {
            get {
                return this.tableReceiptMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReceiptDetailDataTable ReceiptDetail {
            get {
                return this.tableReceiptDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StorageConditionDataTable StorageCondition {
            get {
                return this.tableStorageCondition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductDataTable Product {
            get {
                return this.tableProduct;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FarmGroupDataTable FarmGroup {
            get {
                return this.tableFarmGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PackingDataTable Packing {
            get {
                return this.tablePacking;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubstanceDataTable Substance {
            get {
                return this.tableSubstance;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitDataTable Unit {
            get {
                return this.tableUnit;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ManufacturerDataTable Manufacturer {
            get {
                return this.tableManufacturer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FarmGroupLevel2DataTable FarmGroupLevel2 {
            get {
                return this.tableFarmGroupLevel2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RemainsDataTable Remains {
            get {
                return this.tableRemains;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PricesPurchaseDataTable PricesPurchase {
            get {
                return this.tablePricesPurchase;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PeriodsDataTable Periods {
            get {
                return this.tablePeriods;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkedInvoiceDetailDataTable LinkedInvoiceDetail {
            get {
                return this.tableLinkedInvoiceDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkedInvoiceMasterDataTable LinkedInvoiceMaster {
            get {
                return this.tableLinkedInvoiceMaster;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MDataSet cln = ((MDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["DocumentType"] != null)) {
                    base.Tables.Add(new DocumentTypeDataTable(ds.Tables["DocumentType"]));
                }
                if ((ds.Tables["InvoiceDetail"] != null)) {
                    base.Tables.Add(new InvoiceDetailDataTable(ds.Tables["InvoiceDetail"]));
                }
                if ((ds.Tables["InvoiceMaster"] != null)) {
                    base.Tables.Add(new InvoiceMasterDataTable(ds.Tables["InvoiceMaster"]));
                }
                if ((ds.Tables["Organization"] != null)) {
                    base.Tables.Add(new OrganizationDataTable(ds.Tables["Organization"]));
                }
                if ((ds.Tables["ReceiptRemains"] != null)) {
                    base.Tables.Add(new ReceiptRemainsDataTable(ds.Tables["ReceiptRemains"]));
                }
                if ((ds.Tables["Stock"] != null)) {
                    base.Tables.Add(new StockDataTable(ds.Tables["Stock"]));
                }
                if ((ds.Tables["TradePutlet"] != null)) {
                    base.Tables.Add(new TradePutletDataTable(ds.Tables["TradePutlet"]));
                }
                if ((ds.Tables["ReceiptMaster"] != null)) {
                    base.Tables.Add(new ReceiptMasterDataTable(ds.Tables["ReceiptMaster"]));
                }
                if ((ds.Tables["ReceiptDetail"] != null)) {
                    base.Tables.Add(new ReceiptDetailDataTable(ds.Tables["ReceiptDetail"]));
                }
                if ((ds.Tables["StorageCondition"] != null)) {
                    base.Tables.Add(new StorageConditionDataTable(ds.Tables["StorageCondition"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                if ((ds.Tables["FarmGroup"] != null)) {
                    base.Tables.Add(new FarmGroupDataTable(ds.Tables["FarmGroup"]));
                }
                if ((ds.Tables["Packing"] != null)) {
                    base.Tables.Add(new PackingDataTable(ds.Tables["Packing"]));
                }
                if ((ds.Tables["Substance"] != null)) {
                    base.Tables.Add(new SubstanceDataTable(ds.Tables["Substance"]));
                }
                if ((ds.Tables["Unit"] != null)) {
                    base.Tables.Add(new UnitDataTable(ds.Tables["Unit"]));
                }
                if ((ds.Tables["Manufacturer"] != null)) {
                    base.Tables.Add(new ManufacturerDataTable(ds.Tables["Manufacturer"]));
                }
                if ((ds.Tables["FarmGroupLevel2"] != null)) {
                    base.Tables.Add(new FarmGroupLevel2DataTable(ds.Tables["FarmGroupLevel2"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Remains"] != null)) {
                    base.Tables.Add(new RemainsDataTable(ds.Tables["Remains"]));
                }
                if ((ds.Tables["PricesPurchase"] != null)) {
                    base.Tables.Add(new PricesPurchaseDataTable(ds.Tables["PricesPurchase"]));
                }
                if ((ds.Tables["Periods"] != null)) {
                    base.Tables.Add(new PeriodsDataTable(ds.Tables["Periods"]));
                }
                if ((ds.Tables["LinkedInvoiceDetail"] != null)) {
                    base.Tables.Add(new LinkedInvoiceDetailDataTable(ds.Tables["LinkedInvoiceDetail"]));
                }
                if ((ds.Tables["LinkedInvoiceMaster"] != null)) {
                    base.Tables.Add(new LinkedInvoiceMasterDataTable(ds.Tables["LinkedInvoiceMaster"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCountry = ((CountryDataTable)(base.Tables["Country"]));
            if ((initTable == true)) {
                if ((this.tableCountry != null)) {
                    this.tableCountry.InitVars();
                }
            }
            this.tableDocumentType = ((DocumentTypeDataTable)(base.Tables["DocumentType"]));
            if ((initTable == true)) {
                if ((this.tableDocumentType != null)) {
                    this.tableDocumentType.InitVars();
                }
            }
            this.tableInvoiceDetail = ((InvoiceDetailDataTable)(base.Tables["InvoiceDetail"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceDetail != null)) {
                    this.tableInvoiceDetail.InitVars();
                }
            }
            this.tableInvoiceMaster = ((InvoiceMasterDataTable)(base.Tables["InvoiceMaster"]));
            if ((initTable == true)) {
                if ((this.tableInvoiceMaster != null)) {
                    this.tableInvoiceMaster.InitVars();
                }
            }
            this.tableOrganization = ((OrganizationDataTable)(base.Tables["Organization"]));
            if ((initTable == true)) {
                if ((this.tableOrganization != null)) {
                    this.tableOrganization.InitVars();
                }
            }
            this.tableReceiptRemains = ((ReceiptRemainsDataTable)(base.Tables["ReceiptRemains"]));
            if ((initTable == true)) {
                if ((this.tableReceiptRemains != null)) {
                    this.tableReceiptRemains.InitVars();
                }
            }
            this.tableStock = ((StockDataTable)(base.Tables["Stock"]));
            if ((initTable == true)) {
                if ((this.tableStock != null)) {
                    this.tableStock.InitVars();
                }
            }
            this.tableTradePutlet = ((TradePutletDataTable)(base.Tables["TradePutlet"]));
            if ((initTable == true)) {
                if ((this.tableTradePutlet != null)) {
                    this.tableTradePutlet.InitVars();
                }
            }
            this.tableReceiptMaster = ((ReceiptMasterDataTable)(base.Tables["ReceiptMaster"]));
            if ((initTable == true)) {
                if ((this.tableReceiptMaster != null)) {
                    this.tableReceiptMaster.InitVars();
                }
            }
            this.tableReceiptDetail = ((ReceiptDetailDataTable)(base.Tables["ReceiptDetail"]));
            if ((initTable == true)) {
                if ((this.tableReceiptDetail != null)) {
                    this.tableReceiptDetail.InitVars();
                }
            }
            this.tableStorageCondition = ((StorageConditionDataTable)(base.Tables["StorageCondition"]));
            if ((initTable == true)) {
                if ((this.tableStorageCondition != null)) {
                    this.tableStorageCondition.InitVars();
                }
            }
            this.tableProduct = ((ProductDataTable)(base.Tables["Product"]));
            if ((initTable == true)) {
                if ((this.tableProduct != null)) {
                    this.tableProduct.InitVars();
                }
            }
            this.tableFarmGroup = ((FarmGroupDataTable)(base.Tables["FarmGroup"]));
            if ((initTable == true)) {
                if ((this.tableFarmGroup != null)) {
                    this.tableFarmGroup.InitVars();
                }
            }
            this.tablePacking = ((PackingDataTable)(base.Tables["Packing"]));
            if ((initTable == true)) {
                if ((this.tablePacking != null)) {
                    this.tablePacking.InitVars();
                }
            }
            this.tableSubstance = ((SubstanceDataTable)(base.Tables["Substance"]));
            if ((initTable == true)) {
                if ((this.tableSubstance != null)) {
                    this.tableSubstance.InitVars();
                }
            }
            this.tableUnit = ((UnitDataTable)(base.Tables["Unit"]));
            if ((initTable == true)) {
                if ((this.tableUnit != null)) {
                    this.tableUnit.InitVars();
                }
            }
            this.tableManufacturer = ((ManufacturerDataTable)(base.Tables["Manufacturer"]));
            if ((initTable == true)) {
                if ((this.tableManufacturer != null)) {
                    this.tableManufacturer.InitVars();
                }
            }
            this.tableFarmGroupLevel2 = ((FarmGroupLevel2DataTable)(base.Tables["FarmGroupLevel2"]));
            if ((initTable == true)) {
                if ((this.tableFarmGroupLevel2 != null)) {
                    this.tableFarmGroupLevel2.InitVars();
                }
            }
            this.tableOrders = ((OrdersDataTable)(base.Tables["Orders"]));
            if ((initTable == true)) {
                if ((this.tableOrders != null)) {
                    this.tableOrders.InitVars();
                }
            }
            this.tableRemains = ((RemainsDataTable)(base.Tables["Remains"]));
            if ((initTable == true)) {
                if ((this.tableRemains != null)) {
                    this.tableRemains.InitVars();
                }
            }
            this.tablePricesPurchase = ((PricesPurchaseDataTable)(base.Tables["PricesPurchase"]));
            if ((initTable == true)) {
                if ((this.tablePricesPurchase != null)) {
                    this.tablePricesPurchase.InitVars();
                }
            }
            this.tablePeriods = ((PeriodsDataTable)(base.Tables["Periods"]));
            if ((initTable == true)) {
                if ((this.tablePeriods != null)) {
                    this.tablePeriods.InitVars();
                }
            }
            this.tableLinkedInvoiceDetail = ((LinkedInvoiceDetailDataTable)(base.Tables["LinkedInvoiceDetail"]));
            if ((initTable == true)) {
                if ((this.tableLinkedInvoiceDetail != null)) {
                    this.tableLinkedInvoiceDetail.InitVars();
                }
            }
            this.tableLinkedInvoiceMaster = ((LinkedInvoiceMasterDataTable)(base.Tables["LinkedInvoiceMaster"]));
            if ((initTable == true)) {
                if ((this.tableLinkedInvoiceMaster != null)) {
                    this.tableLinkedInvoiceMaster.InitVars();
                }
            }
            this.relationFK_Stock_InvoiceMaster = this.Relations["FK_Stock_InvoiceMaster"];
            this.relationFK_InvoiceMaster_StockMain = this.Relations["FK_InvoiceMaster_StockMain"];
            this.relationFK_ReceiptRemains_ReceiptDetail = this.Relations["FK_ReceiptRemains_ReceiptDetail"];
            this.relationFK_FarmGroupLevel2_Product = this.Relations["FK_FarmGroupLevel2_Product"];
            this.relationFK_Unit_Product = this.Relations["FK_Unit_Product"];
            this.relationFK_Substance_Product = this.Relations["FK_Substance_Product"];
            this.relationFK_FarmGroup_FarmGroupLevel2 = this.Relations["FK_FarmGroup_FarmGroupLevel2"];
            this.relationFK_InvoiceDetail_InvoiceMaster = this.Relations["FK_InvoiceDetail_InvoiceMaster"];
            this.relationFK_InvoiceMaster_Organization = this.Relations["FK_InvoiceMaster_Organization"];
            this.relationFK_ReceiptMaster_DocumentType = this.Relations["FK_ReceiptMaster_DocumentType"];
            this.relationFK_ReceiptMaster_Organization = this.Relations["FK_ReceiptMaster_Organization"];
            this.relationFK_ReceiptMaster_Stock = this.Relations["FK_ReceiptMaster_Stock"];
            this.relationStorageCondition_Product = this.Relations["StorageCondition_Product"];
            this.relationFK_Packing_Product = this.Relations["FK_Packing_Product"];
            this.relationReceiptDetail_Orders = this.Relations["ReceiptDetail_Orders"];
            this.relationRemains_InvoiceDetail = this.Relations["Remains_InvoiceDetail"];
            this.relationProduct_Remains = this.Relations["Product_Remains"];
            this.relationProduct_Orders = this.Relations["Product_Orders"];
            this.relationTradePutlet_Orders = this.Relations["TradePutlet_Orders"];
            this.relationOrganization_PricesPurchase = this.Relations["Organization_PricesPurchase"];
            this.relationProduct_PricesPurchase = this.Relations["Product_PricesPurchase"];
            this.relationReceiptDetail_PricesPurchase = this.Relations["ReceiptDetail_PricesPurchase"];
            this.relationReceiptDetail_InvoiceDetail = this.Relations["ReceiptDetail_InvoiceDetail"];
            this.relationReceiptDetail_Remains = this.Relations["ReceiptDetail_Remains"];
            this.relationTradePutlet_Stock = this.Relations["TradePutlet_Stock"];
            this.relationProduct_ReceiptDetail = this.Relations["Product_ReceiptDetail"];
            this.relationFK_Manufacturer_ReceiptDetail = this.Relations["FK_Manufacturer_ReceiptDetail"];
            this.relationReceiptMaster_ReceiptDetail = this.Relations["ReceiptMaster_ReceiptDetail"];
            this.relationLinkedInvoiceMaster_LinkedInvoiceDetail = this.Relations["LinkedInvoiceMaster_LinkedInvoiceDetail"];
            this.relationFK_Country_Manufacturer = this.Relations["FK_Country_Manufacturer"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCountry = new CountryDataTable();
            base.Tables.Add(this.tableCountry);
            this.tableDocumentType = new DocumentTypeDataTable();
            base.Tables.Add(this.tableDocumentType);
            this.tableInvoiceDetail = new InvoiceDetailDataTable(false);
            base.Tables.Add(this.tableInvoiceDetail);
            this.tableInvoiceMaster = new InvoiceMasterDataTable(false);
            base.Tables.Add(this.tableInvoiceMaster);
            this.tableOrganization = new OrganizationDataTable(false);
            base.Tables.Add(this.tableOrganization);
            this.tableReceiptRemains = new ReceiptRemainsDataTable();
            base.Tables.Add(this.tableReceiptRemains);
            this.tableStock = new StockDataTable(false);
            base.Tables.Add(this.tableStock);
            this.tableTradePutlet = new TradePutletDataTable();
            base.Tables.Add(this.tableTradePutlet);
            this.tableReceiptMaster = new ReceiptMasterDataTable(false);
            base.Tables.Add(this.tableReceiptMaster);
            this.tableReceiptDetail = new ReceiptDetailDataTable(false);
            base.Tables.Add(this.tableReceiptDetail);
            this.tableStorageCondition = new StorageConditionDataTable(false);
            base.Tables.Add(this.tableStorageCondition);
            this.tableProduct = new ProductDataTable(false);
            base.Tables.Add(this.tableProduct);
            this.tableFarmGroup = new FarmGroupDataTable();
            base.Tables.Add(this.tableFarmGroup);
            this.tablePacking = new PackingDataTable();
            base.Tables.Add(this.tablePacking);
            this.tableSubstance = new SubstanceDataTable();
            base.Tables.Add(this.tableSubstance);
            this.tableUnit = new UnitDataTable();
            base.Tables.Add(this.tableUnit);
            this.tableManufacturer = new ManufacturerDataTable(false);
            base.Tables.Add(this.tableManufacturer);
            this.tableFarmGroupLevel2 = new FarmGroupLevel2DataTable(false);
            base.Tables.Add(this.tableFarmGroupLevel2);
            this.tableOrders = new OrdersDataTable();
            base.Tables.Add(this.tableOrders);
            this.tableRemains = new RemainsDataTable(false);
            base.Tables.Add(this.tableRemains);
            this.tablePricesPurchase = new PricesPurchaseDataTable(false);
            base.Tables.Add(this.tablePricesPurchase);
            this.tablePeriods = new PeriodsDataTable(false);
            base.Tables.Add(this.tablePeriods);
            this.tableLinkedInvoiceDetail = new LinkedInvoiceDetailDataTable();
            base.Tables.Add(this.tableLinkedInvoiceDetail);
            this.tableLinkedInvoiceMaster = new LinkedInvoiceMasterDataTable();
            base.Tables.Add(this.tableLinkedInvoiceMaster);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Stock_InvoiceMaster", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.RemoteStockRefColumn});
            this.tableInvoiceMaster.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_InvoiceMaster_StockMain", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.MainStockRefColumn});
            this.tableInvoiceMaster.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ReceiptRemains_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableReceiptDetail.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptRemains.ReceiptDetailRefColumn});
            this.tableReceiptRemains.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_FarmGroupLevel2_Product", new System.Data.DataColumn[] {
                        this.tableFarmGroupLevel2.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.FarmGrouplevel2RefColumn});
            this.tableProduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Unit_Product", new System.Data.DataColumn[] {
                        this.tableUnit.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.UnitRefColumn});
            this.tableProduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Substance_Product", new System.Data.DataColumn[] {
                        this.tableSubstance.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.SubstanceRefColumn});
            this.tableProduct.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_FarmGroup_FarmGroupLevel2", new System.Data.DataColumn[] {
                        this.tableFarmGroup.IDColumn}, new System.Data.DataColumn[] {
                        this.tableFarmGroupLevel2.FarmGroupRefColumn});
            this.tableFarmGroupLevel2.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_Stock_InvoiceMaster = new System.Data.DataRelation("FK_Stock_InvoiceMaster", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.RemoteStockRefColumn}, false);
            this.Relations.Add(this.relationFK_Stock_InvoiceMaster);
            this.relationFK_InvoiceMaster_StockMain = new System.Data.DataRelation("FK_InvoiceMaster_StockMain", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.MainStockRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceMaster_StockMain);
            this.relationFK_ReceiptRemains_ReceiptDetail = new System.Data.DataRelation("FK_ReceiptRemains_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableReceiptDetail.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptRemains.ReceiptDetailRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptRemains_ReceiptDetail);
            this.relationFK_FarmGroupLevel2_Product = new System.Data.DataRelation("FK_FarmGroupLevel2_Product", new System.Data.DataColumn[] {
                        this.tableFarmGroupLevel2.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.FarmGrouplevel2RefColumn}, false);
            this.Relations.Add(this.relationFK_FarmGroupLevel2_Product);
            this.relationFK_Unit_Product = new System.Data.DataRelation("FK_Unit_Product", new System.Data.DataColumn[] {
                        this.tableUnit.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.UnitRefColumn}, false);
            this.Relations.Add(this.relationFK_Unit_Product);
            this.relationFK_Substance_Product = new System.Data.DataRelation("FK_Substance_Product", new System.Data.DataColumn[] {
                        this.tableSubstance.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.SubstanceRefColumn}, false);
            this.Relations.Add(this.relationFK_Substance_Product);
            this.relationFK_FarmGroup_FarmGroupLevel2 = new System.Data.DataRelation("FK_FarmGroup_FarmGroupLevel2", new System.Data.DataColumn[] {
                        this.tableFarmGroup.IDColumn}, new System.Data.DataColumn[] {
                        this.tableFarmGroupLevel2.FarmGroupRefColumn}, false);
            this.Relations.Add(this.relationFK_FarmGroup_FarmGroupLevel2);
            this.relationFK_InvoiceDetail_InvoiceMaster = new System.Data.DataRelation("FK_InvoiceDetail_InvoiceMaster", new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.InvoiceMasterRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceDetail_InvoiceMaster);
            this.relationFK_InvoiceMaster_Organization = new System.Data.DataRelation("FK_InvoiceMaster_Organization", new System.Data.DataColumn[] {
                        this.tableOrganization.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceMaster.OrganisationRefColumn}, false);
            this.Relations.Add(this.relationFK_InvoiceMaster_Organization);
            this.relationFK_ReceiptMaster_DocumentType = new System.Data.DataRelation("FK_ReceiptMaster_DocumentType", new System.Data.DataColumn[] {
                        this.tableDocumentType.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.DocumentTypeRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_DocumentType);
            this.relationFK_ReceiptMaster_Organization = new System.Data.DataRelation("FK_ReceiptMaster_Organization", new System.Data.DataColumn[] {
                        this.tableOrganization.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.OrganizationRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Organization);
            this.relationFK_ReceiptMaster_Stock = new System.Data.DataRelation("FK_ReceiptMaster_Stock", new System.Data.DataColumn[] {
                        this.tableStock.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptMaster.MainStockRefColumn}, false);
            this.Relations.Add(this.relationFK_ReceiptMaster_Stock);
            this.relationStorageCondition_Product = new System.Data.DataRelation("StorageCondition_Product", new System.Data.DataColumn[] {
                        this.tableStorageCondition.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.StorageConditionRefColumn}, false);
            this.Relations.Add(this.relationStorageCondition_Product);
            this.relationFK_Packing_Product = new System.Data.DataRelation("FK_Packing_Product", new System.Data.DataColumn[] {
                        this.tablePacking.IDColumn}, new System.Data.DataColumn[] {
                        this.tableProduct.PackingRefColumn}, false);
            this.Relations.Add(this.relationFK_Packing_Product);
            this.relationReceiptDetail_Orders = new System.Data.DataRelation("ReceiptDetail_Orders", new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ProductRefColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.ProductRefColumn}, false);
            this.Relations.Add(this.relationReceiptDetail_Orders);
            this.relationRemains_InvoiceDetail = new System.Data.DataRelation("Remains_InvoiceDetail", new System.Data.DataColumn[] {
                        this.tableRemains.ReceiptDetailRefColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.LocalReceiptDetailRefColumn}, false);
            this.Relations.Add(this.relationRemains_InvoiceDetail);
            this.relationProduct_Remains = new System.Data.DataRelation("Product_Remains", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableRemains.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_Remains);
            this.relationProduct_Orders = new System.Data.DataRelation("Product_Orders", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_Orders);
            this.relationTradePutlet_Orders = new System.Data.DataRelation("TradePutlet_Orders", new System.Data.DataColumn[] {
                        this.tableTradePutlet.IDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.TradePupletRefColumn}, false);
            this.Relations.Add(this.relationTradePutlet_Orders);
            this.relationOrganization_PricesPurchase = new System.Data.DataRelation("Organization_PricesPurchase", new System.Data.DataColumn[] {
                        this.tableOrganization.IDColumn}, new System.Data.DataColumn[] {
                        this.tablePricesPurchase.OrganizationRefColumn}, false);
            this.Relations.Add(this.relationOrganization_PricesPurchase);
            this.relationProduct_PricesPurchase = new System.Data.DataRelation("Product_PricesPurchase", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tablePricesPurchase.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_PricesPurchase);
            this.relationReceiptDetail_PricesPurchase = new System.Data.DataRelation("ReceiptDetail_PricesPurchase", new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ProductRefColumn}, new System.Data.DataColumn[] {
                        this.tablePricesPurchase.ProductRefColumn}, false);
            this.Relations.Add(this.relationReceiptDetail_PricesPurchase);
            this.relationReceiptDetail_InvoiceDetail = new System.Data.DataRelation("ReceiptDetail_InvoiceDetail", new System.Data.DataColumn[] {
                        this.tableReceiptDetail.IDColumn}, new System.Data.DataColumn[] {
                        this.tableInvoiceDetail.LocalReceiptDetailRefColumn}, false);
            this.Relations.Add(this.relationReceiptDetail_InvoiceDetail);
            this.relationReceiptDetail_Remains = new System.Data.DataRelation("ReceiptDetail_Remains", new System.Data.DataColumn[] {
                        this.tableReceiptDetail.IDColumn}, new System.Data.DataColumn[] {
                        this.tableRemains.ReceiptDetailRefColumn}, false);
            this.Relations.Add(this.relationReceiptDetail_Remains);
            this.relationTradePutlet_Stock = new System.Data.DataRelation("TradePutlet_Stock", new System.Data.DataColumn[] {
                        this.tableTradePutlet.IDColumn}, new System.Data.DataColumn[] {
                        this.tableStock.TradePutletRefColumn}, false);
            this.Relations.Add(this.relationTradePutlet_Stock);
            this.relationProduct_ReceiptDetail = new System.Data.DataRelation("Product_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableProduct.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ProductRefColumn}, false);
            this.Relations.Add(this.relationProduct_ReceiptDetail);
            this.relationFK_Manufacturer_ReceiptDetail = new System.Data.DataRelation("FK_Manufacturer_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableManufacturer.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ManufacturerRefColumn}, false);
            this.Relations.Add(this.relationFK_Manufacturer_ReceiptDetail);
            this.relationReceiptMaster_ReceiptDetail = new System.Data.DataRelation("ReceiptMaster_ReceiptDetail", new System.Data.DataColumn[] {
                        this.tableReceiptMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableReceiptDetail.ReceiptMasterRefColumn}, false);
            this.Relations.Add(this.relationReceiptMaster_ReceiptDetail);
            this.relationLinkedInvoiceMaster_LinkedInvoiceDetail = new System.Data.DataRelation("LinkedInvoiceMaster_LinkedInvoiceDetail", new System.Data.DataColumn[] {
                        this.tableLinkedInvoiceMaster.TradePutletRefColumn,
                        this.tableLinkedInvoiceMaster.IDColumn}, new System.Data.DataColumn[] {
                        this.tableLinkedInvoiceDetail.TradePutletRefColumn,
                        this.tableLinkedInvoiceDetail.InvoiceMasterRefColumn}, false);
            this.Relations.Add(this.relationLinkedInvoiceMaster_LinkedInvoiceDetail);
            this.relationFK_Country_Manufacturer = new System.Data.DataRelation("FK_Country_Manufacturer", new System.Data.DataColumn[] {
                        this.tableCountry.IDColumn}, new System.Data.DataColumn[] {
                        this.tableManufacturer.CounrtyRefColumn}, false);
            this.Relations.Add(this.relationFK_Country_Manufacturer);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCountry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDocumentType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoiceMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrganization() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptRemains() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStock() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTradePutlet() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReceiptDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStorageCondition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFarmGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePacking() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubstance() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnit() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeManufacturer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFarmGroupLevel2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRemains() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePricesPurchase() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePeriods() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkedInvoiceDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkedInvoiceMaster() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MDataSet ds = new MDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.InvoiceDetail.NumberColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).Number";
            this.InvoiceDetail.DateColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).Date";
            this.InvoiceDetail.ProductNameColumn.Expression = "Parent(Remains_InvoiceDetail).ProductName";
            this.InvoiceDetail.ManufacturerNameColumn.Expression = "Parent(ReceiptDetail_InvoiceDetail).ManufacturerName";
            this.InvoiceDetail.CalcSumColumn.Expression = "PriceRetailNDS*Quantity";
            this.InvoiceDetail.DocumentTypeRefColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).DocumentTypeRef";
            this.InvoiceDetail.ExtraPercentColumn.Expression = "iif( PricePurchase<>0,  (PriceRetailNDS - PricePurchase)/PricePurchase*100,0)";
            this.InvoiceDetail.IsNdsColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).IsNds";
            this.InvoiceMaster.IsNDSColumn.Expression = "Parent(FK_Stock_InvoiceMaster).IsNDS";
            this.InvoiceMaster.IsNDSMainColumn.Expression = "Parent(FK_InvoiceMaster_StockMain).IsNDS";
            this.InvoiceMaster.TradePupletNameColumn.Expression = "Parent(FK_Stock_InvoiceMaster).TradePupletName";
            this.InvoiceMaster.EXTRAColumn.Expression = "sum(Child(FK_InvoiceDetail_InvoiceMaster).extra)";
            this.InvoiceMaster.ExtraPercentColumn.Expression = "AVG(child(FK_InvoiceDetail_InvoiceMaster).ExtraPercent)";
            this.Organization.DateUpdateColumn.Expression = "Max(DateLastModif)";
            this.Stock.TradePupletNameColumn.Expression = "Parent(TradePutlet_Stock).Name";
            this.ReceiptMaster.OrganizationNameColumn.Expression = "Parent(FK_ReceiptMaster_Organization).ShortName";
            this.ReceiptMaster.CalcPurchSumColumn.Expression = "sum(Child(ReceiptMaster_ReceiptDetail).CalcPurchSum)";
            this.ReceiptMaster.IsNDSColumn.Expression = "Parent(FK_ReceiptMaster_Stock).IsNDS";
            this.ReceiptMaster.DateUpdateDetailColumn.Expression = "Max(Child(ReceiptMaster_ReceiptDetail).DateLastModif)";
            this.ReceiptDetail.CalcPurchSumColumn.Expression = "Quantity*PricePurchase";
            this.ReceiptDetail.OrganisationRefColumn.Expression = "Parent(ReceiptMaster_ReceiptDetail).OrganizationRef";
            this.ReceiptDetail.ProductNameColumn.Expression = "Parent(Product_ReceiptDetail).Name";
            this.ReceiptDetail.ManufacturerNameColumn.Expression = "Parent(FK_Manufacturer_ReceiptDetail).Name";
            this.ReceiptDetail.DocumentTypeRefColumn.Expression = "Parent(ReceiptMaster_ReceiptDetail).DocumentTypeRef";
            this.StorageCondition.DateUpdateColumn.Expression = "Max(DateLastModif)";
            this.Product.FarmGroupNameColumn.Expression = "Parent(FK_FarmGroupLevel2_Product).FarmGroupName";
            this.Product.PackingNameColumn.Expression = "Parent(FK_Packing_Product).Name";
            this.Product.StorageConditionNameColumn.Expression = "Parent(StorageCondition_Product).Name";
            this.Product.FarmGroupLevel2Column.Expression = "Parent(FK_FarmGroupLevel2_Product).Name";
            this.Product.UnitNameColumn.Expression = "Parent(FK_Unit_Product).Name";
            this.Product.SubstanceNameColumn.Expression = "Parent(FK_Substance_Product).Name";
            this.Manufacturer.DateUpdateColumn.Expression = "Max(DateLastModif)";
            this.Manufacturer.CountryNameColumn.Expression = "Parent(FK_Country_Manufacturer).Name";
            this.FarmGroupLevel2.FarmGroupNameColumn.Expression = "Parent(FK_FarmGroup_FarmGroupLevel2).Name";
            this.Remains.ProductNameColumn.Expression = "Parent(Product_Remains).Name";
            this.Remains.SumRemainsColumn.Expression = "QuantityRemains*PricePurchase";
            this.PricesPurchase.OrganizationNameColumn.Expression = "Parent(Organization_PricesPurchase).ShortNAme";
            this.Periods.NameColumn.Expression = "StartDate+\' - \'+ClosedDate";
        }
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void DocumentTypeRowChangeEventHandler(object sender, DocumentTypeRowChangeEvent e);
        
        public delegate void InvoiceDetailRowChangeEventHandler(object sender, InvoiceDetailRowChangeEvent e);
        
        public delegate void InvoiceMasterRowChangeEventHandler(object sender, InvoiceMasterRowChangeEvent e);
        
        public delegate void OrganizationRowChangeEventHandler(object sender, OrganizationRowChangeEvent e);
        
        public delegate void ReceiptRemainsRowChangeEventHandler(object sender, ReceiptRemainsRowChangeEvent e);
        
        public delegate void StockRowChangeEventHandler(object sender, StockRowChangeEvent e);
        
        public delegate void TradePutletRowChangeEventHandler(object sender, TradePutletRowChangeEvent e);
        
        public delegate void ReceiptMasterRowChangeEventHandler(object sender, ReceiptMasterRowChangeEvent e);
        
        public delegate void ReceiptDetailRowChangeEventHandler(object sender, ReceiptDetailRowChangeEvent e);
        
        public delegate void StorageConditionRowChangeEventHandler(object sender, StorageConditionRowChangeEvent e);
        
        public delegate void ProductRowChangeEventHandler(object sender, ProductRowChangeEvent e);
        
        public delegate void FarmGroupRowChangeEventHandler(object sender, FarmGroupRowChangeEvent e);
        
        public delegate void PackingRowChangeEventHandler(object sender, PackingRowChangeEvent e);
        
        public delegate void SubstanceRowChangeEventHandler(object sender, SubstanceRowChangeEvent e);
        
        public delegate void UnitRowChangeEventHandler(object sender, UnitRowChangeEvent e);
        
        public delegate void ManufacturerRowChangeEventHandler(object sender, ManufacturerRowChangeEvent e);
        
        public delegate void FarmGroupLevel2RowChangeEventHandler(object sender, FarmGroupLevel2RowChangeEvent e);
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        public delegate void RemainsRowChangeEventHandler(object sender, RemainsRowChangeEvent e);
        
        public delegate void PricesPurchaseRowChangeEventHandler(object sender, PricesPurchaseRowChangeEvent e);
        
        public delegate void PeriodsRowChangeEventHandler(object sender, PeriodsRowChangeEvent e);
        
        public delegate void LinkedInvoiceDetailRowChangeEventHandler(object sender, LinkedInvoiceDetailRowChangeEvent e);
        
        public delegate void LinkedInvoiceMasterRowChangeEventHandler(object sender, LinkedInvoiceMasterRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CountryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnDateLastModif;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryDataTable() {
                this.TableName = "Country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CountryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow this[int index] {
                get {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCountryRow(CountryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow AddCountryRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, System.DateTime DateLastModif) {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                rowCountryRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        DateLastModif};
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow FindByID(int ID) {
                return ((CountryRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CountryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow NewCountryRow() {
                return ((CountryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CountryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CountryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null)) {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null)) {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null)) {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null)) {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCountryRow(CountryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DocumentTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsInternal;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnDateLastModif;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeDataTable() {
                this.TableName = "DocumentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DocumentTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsInternalColumn {
                get {
                    return this.columnIsInternal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow this[int index] {
                get {
                    return ((DocumentTypeRow)(this.Rows[index]));
                }
            }
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowChanging;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowChanged;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowDeleting;
            
            public event DocumentTypeRowChangeEventHandler DocumentTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDocumentTypeRow(DocumentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow AddDocumentTypeRow(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, System.DateTime DateLastModif) {
                DocumentTypeRow rowDocumentTypeRow = ((DocumentTypeRow)(this.NewRow()));
                rowDocumentTypeRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsInternal,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        DateLastModif};
                this.Rows.Add(rowDocumentTypeRow);
                return rowDocumentTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow FindByID(int ID) {
                return ((DocumentTypeRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DocumentTypeDataTable cln = ((DocumentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DocumentTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnIsInternal = base.Columns["IsInternal"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsInternal = new System.Data.DataColumn("IsInternal", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsInternal);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsInternal.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnDateLastModif.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow NewDocumentTypeRow() {
                return ((DocumentTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DocumentTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DocumentTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DocumentTypeRowChanged != null)) {
                    this.DocumentTypeRowChanged(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DocumentTypeRowChanging != null)) {
                    this.DocumentTypeRowChanging(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DocumentTypeRowDeleted != null)) {
                    this.DocumentTypeRowDeleted(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DocumentTypeRowDeleting != null)) {
                    this.DocumentTypeRowDeleting(this, new DocumentTypeRowChangeEvent(((DocumentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDocumentTypeRow(DocumentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DocumentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnInvoiceMasterRef;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnPriceRetail;
            
            private System.Data.DataColumn columnRetailNDS;
            
            private System.Data.DataColumn columnPriceRetailNDS;
            
            private System.Data.DataColumn columnLocalReceiptDetailRef;
            
            private System.Data.DataColumn columnRemoteInvoiceDetailRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnCalcSum;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnExtraPercent;
            
            private System.Data.DataColumn columnIsNds;
            
            private System.Data.DataColumn columnExtra;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailDataTable(bool initExpressions) {
                this.TableName = "InvoiceDetail";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceMasterRefColumn {
                get {
                    return this.columnInvoiceMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailColumn {
                get {
                    return this.columnPriceRetail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailNDSColumn {
                get {
                    return this.columnRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailNDSColumn {
                get {
                    return this.columnPriceRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocalReceiptDetailRefColumn {
                get {
                    return this.columnLocalReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceDetailRefColumn {
                get {
                    return this.columnRemoteInvoiceDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalcSumColumn {
                get {
                    return this.columnCalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraPercentColumn {
                get {
                    return this.columnExtraPercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNdsColumn {
                get {
                    return this.columnIsNds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow this[int index] {
                get {
                    return ((InvoiceDetailRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowChanging;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowChanged;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowDeleting;
            
            public event InvoiceDetailRowChangeEventHandler InvoiceDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceDetailRow(InvoiceDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow AddInvoiceDetailRow(
                        InvoiceMasterRow parentInvoiceMasterRowByFK_InvoiceDetail_InvoiceMaster, 
                        decimal Quantity, 
                        decimal PricePurchase, 
                        decimal PriceRetail, 
                        decimal RetailNDS, 
                        decimal PriceRetailNDS, 
                        RemainsRow parentRemainsRowByRemains_InvoiceDetail, 
                        int RemoteInvoiceDetailRef, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string Note, 
                        System.DateTime DateLastModif, 
                        string Number, 
                        string Date, 
                        string ProductName, 
                        string ManufacturerName, 
                        decimal CalcSum, 
                        string DocumentTypeRef, 
                        decimal ExtraPercent, 
                        string IsNds, 
                        decimal Extra) {
                InvoiceDetailRow rowInvoiceDetailRow = ((InvoiceDetailRow)(this.NewRow()));
                rowInvoiceDetailRow.ItemArray = new object[] {
                        null,
                        parentInvoiceMasterRowByFK_InvoiceDetail_InvoiceMaster[0],
                        Quantity,
                        PricePurchase,
                        PriceRetail,
                        RetailNDS,
                        PriceRetailNDS,
                        parentRemainsRowByRemains_InvoiceDetail[7],
                        RemoteInvoiceDetailRef,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        Note,
                        DateLastModif,
                        Number,
                        Date,
                        ProductName,
                        ManufacturerName,
                        CalcSum,
                        DocumentTypeRef,
                        ExtraPercent,
                        IsNds,
                        Extra};
                this.Rows.Add(rowInvoiceDetailRow);
                return rowInvoiceDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow FindByID(int ID) {
                return ((InvoiceDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoiceDetailDataTable cln = ((InvoiceDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoiceDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnInvoiceMasterRef = base.Columns["InvoiceMasterRef"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnPriceRetail = base.Columns["PriceRetail"];
                this.columnRetailNDS = base.Columns["RetailNDS"];
                this.columnPriceRetailNDS = base.Columns["PriceRetailNDS"];
                this.columnLocalReceiptDetailRef = base.Columns["LocalReceiptDetailRef"];
                this.columnRemoteInvoiceDetailRef = base.Columns["RemoteInvoiceDetailRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnNote = base.Columns["Note"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnNumber = base.Columns["Number"];
                this.columnDate = base.Columns["Date"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnCalcSum = base.Columns["CalcSum"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnExtraPercent = base.Columns["ExtraPercent"];
                this.columnIsNds = base.Columns["IsNds"];
                this.columnExtra = base.Columns["Extra"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnInvoiceMasterRef = new System.Data.DataColumn("InvoiceMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceMasterRef);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnPriceRetail = new System.Data.DataColumn("PriceRetail", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetail);
                this.columnRetailNDS = new System.Data.DataColumn("RetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailNDS);
                this.columnPriceRetailNDS = new System.Data.DataColumn("PriceRetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetailNDS);
                this.columnLocalReceiptDetailRef = new System.Data.DataColumn("LocalReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalReceiptDetailRef);
                this.columnRemoteInvoiceDetailRef = new System.Data.DataColumn("RemoteInvoiceDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceDetailRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDate = new System.Data.DataColumn("Date", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnCalcSum = new System.Data.DataColumn("CalcSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcSum);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnExtraPercent = new System.Data.DataColumn("ExtraPercent", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraPercent);
                this.columnIsNds = new System.Data.DataColumn("IsNds", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNds);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnInvoiceMasterRef.AllowDBNull = false;
                this.columnInvoiceMasterRef.DefaultValue = ((int)(0));
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = ((decimal)(0m));
                this.columnPricePurchase.AllowDBNull = false;
                this.columnPricePurchase.DefaultValue = ((decimal)(0m));
                this.columnPriceRetail.AllowDBNull = false;
                this.columnPriceRetail.DefaultValue = ((decimal)(0m));
                this.columnRetailNDS.AllowDBNull = false;
                this.columnRetailNDS.DefaultValue = ((decimal)(0m));
                this.columnPriceRetailNDS.AllowDBNull = false;
                this.columnPriceRetailNDS.DefaultValue = ((decimal)(0m));
                this.columnLocalReceiptDetailRef.AllowDBNull = false;
                this.columnLocalReceiptDetailRef.DefaultValue = ((int)(0));
                this.columnRemoteInvoiceDetailRef.AllowDBNull = false;
                this.columnRemoteInvoiceDetailRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnNote.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)("\'\'"));
                this.columnNote.MaxLength = 50;
                this.columnNumber.ReadOnly = true;
                this.columnDate.ReadOnly = true;
                this.columnProductName.ReadOnly = true;
                this.columnManufacturerName.ReadOnly = true;
                this.columnCalcSum.ReadOnly = true;
                this.columnDocumentTypeRef.ReadOnly = true;
                this.columnExtraPercent.ReadOnly = true;
                this.columnIsNds.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow NewInvoiceDetailRow() {
                return ((InvoiceDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoiceDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoiceDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.NumberColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).Number";
                this.DateColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).Date";
                this.ProductNameColumn.Expression = "Parent(Remains_InvoiceDetail).ProductName";
                this.ManufacturerNameColumn.Expression = "Parent(ReceiptDetail_InvoiceDetail).ManufacturerName";
                this.CalcSumColumn.Expression = "PriceRetailNDS*Quantity";
                this.DocumentTypeRefColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).DocumentTypeRef";
                this.ExtraPercentColumn.Expression = "iif( PricePurchase<>0,  (PriceRetailNDS - PricePurchase)/PricePurchase*100,0)";
                this.IsNdsColumn.Expression = "Parent(FK_InvoiceDetail_InvoiceMaster).IsNds";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceDetailRowChanged != null)) {
                    this.InvoiceDetailRowChanged(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceDetailRowChanging != null)) {
                    this.InvoiceDetailRowChanging(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceDetailRowDeleted != null)) {
                    this.InvoiceDetailRowDeleted(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceDetailRowDeleting != null)) {
                    this.InvoiceDetailRowDeleting(this, new InvoiceDetailRowChangeEvent(((InvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceDetailRow(InvoiceDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoiceMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnOrganisationRef;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnRemoteStockRef;
            
            private System.Data.DataColumn columnRemoteReceiptMasterRef;
            
            private System.Data.DataColumn columnRemoteInvoiceMasterRef;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnSum;
            
            private System.Data.DataColumn columnNds;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnRecalcSum;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnIsNDSMain;
            
            private System.Data.DataColumn columnTradePupletName;
            
            private System.Data.DataColumn columnEXTRA;
            
            private System.Data.DataColumn columnExtraPercent;
            
            private static System.DateTime columnDate_defaultValue = System.DateTime.Parse("01/01/2001 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterDataTable(bool initExpressions) {
                this.TableName = "InvoiceMaster";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoiceMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganisationRefColumn {
                get {
                    return this.columnOrganisationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteStockRefColumn {
                get {
                    return this.columnRemoteStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteReceiptMasterRefColumn {
                get {
                    return this.columnRemoteReceiptMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceMasterRefColumn {
                get {
                    return this.columnRemoteInvoiceMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumColumn {
                get {
                    return this.columnSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NdsColumn {
                get {
                    return this.columnNds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecalcSumColumn {
                get {
                    return this.columnRecalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSMainColumn {
                get {
                    return this.columnIsNDSMain;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePupletNameColumn {
                get {
                    return this.columnTradePupletName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EXTRAColumn {
                get {
                    return this.columnEXTRA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraPercentColumn {
                get {
                    return this.columnExtraPercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow this[int index] {
                get {
                    return ((InvoiceMasterRow)(this.Rows[index]));
                }
            }
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanging;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanged;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleting;
            
            public event InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoiceMasterRow(InvoiceMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow AddInvoiceMasterRow(
                        System.DateTime Date, 
                        OrganizationRow parentOrganizationRowByFK_InvoiceMaster_Organization, 
                        int DocumentTypeRef, 
                        StockRow parentStockRowByFK_Stock_InvoiceMaster, 
                        int RemoteReceiptMasterRef, 
                        int RemoteInvoiceMasterRef, 
                        bool IsReadOnly, 
                        decimal Sum, 
                        decimal Nds, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string Note, 
                        System.DateTime DateLastModif, 
                        StockRow parentStockRowByFK_InvoiceMaster_StockMain, 
                        bool RecalcSum, 
                        bool IsNDS, 
                        bool IsNDSMain, 
                        string TradePupletName, 
                        string EXTRA, 
                        decimal ExtraPercent) {
                InvoiceMasterRow rowInvoiceMasterRow = ((InvoiceMasterRow)(this.NewRow()));
                rowInvoiceMasterRow.ItemArray = new object[] {
                        null,
                        null,
                        Date,
                        parentOrganizationRowByFK_InvoiceMaster_Organization[0],
                        DocumentTypeRef,
                        parentStockRowByFK_Stock_InvoiceMaster[0],
                        RemoteReceiptMasterRef,
                        RemoteInvoiceMasterRef,
                        IsReadOnly,
                        Sum,
                        Nds,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        Note,
                        DateLastModif,
                        parentStockRowByFK_InvoiceMaster_StockMain[0],
                        RecalcSum,
                        IsNDS,
                        IsNDSMain,
                        TradePupletName,
                        EXTRA,
                        ExtraPercent};
                this.Rows.Add(rowInvoiceMasterRow);
                return rowInvoiceMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow FindByID(int ID) {
                return ((InvoiceMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoiceMasterDataTable cln = ((InvoiceMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoiceMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnDate = base.Columns["Date"];
                this.columnOrganisationRef = base.Columns["OrganisationRef"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnRemoteStockRef = base.Columns["RemoteStockRef"];
                this.columnRemoteReceiptMasterRef = base.Columns["RemoteReceiptMasterRef"];
                this.columnRemoteInvoiceMasterRef = base.Columns["RemoteInvoiceMasterRef"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnSum = base.Columns["Sum"];
                this.columnNds = base.Columns["Nds"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnNote = base.Columns["Note"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnRecalcSum = base.Columns["RecalcSum"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnIsNDSMain = base.Columns["IsNDSMain"];
                this.columnTradePupletName = base.Columns["TradePupletName"];
                this.columnEXTRA = base.Columns["EXTRA"];
                this.columnExtraPercent = base.Columns["ExtraPercent"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnOrganisationRef = new System.Data.DataColumn("OrganisationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationRef);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnRemoteStockRef = new System.Data.DataColumn("RemoteStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteStockRef);
                this.columnRemoteReceiptMasterRef = new System.Data.DataColumn("RemoteReceiptMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteReceiptMasterRef);
                this.columnRemoteInvoiceMasterRef = new System.Data.DataColumn("RemoteInvoiceMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceMasterRef);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnSum = new System.Data.DataColumn("Sum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSum);
                this.columnNds = new System.Data.DataColumn("Nds", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNds);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnRecalcSum = new System.Data.DataColumn("RecalcSum", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecalcSum);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnIsNDSMain = new System.Data.DataColumn("IsNDSMain", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDSMain);
                this.columnTradePupletName = new System.Data.DataColumn("TradePupletName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePupletName);
                this.columnEXTRA = new System.Data.DataColumn("EXTRA", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTRA);
                this.columnExtraPercent = new System.Data.DataColumn("ExtraPercent", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraPercent);
                this.Constraints.Add(new System.Data.UniqueConstraint("InvoiceMasterKey1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNumber.AutoIncrement = true;
                this.columnNumber.AutoIncrementSeed = -1;
                this.columnNumber.AutoIncrementStep = -1;
                this.columnNumber.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnDate.DefaultValue = ((System.DateTime)(InvoiceMasterDataTable.columnDate_defaultValue));
                this.columnOrganisationRef.AllowDBNull = false;
                this.columnOrganisationRef.DefaultValue = ((int)(0));
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnDocumentTypeRef.DefaultValue = ((int)(0));
                this.columnRemoteStockRef.AllowDBNull = false;
                this.columnRemoteStockRef.DefaultValue = ((int)(0));
                this.columnRemoteReceiptMasterRef.AllowDBNull = false;
                this.columnRemoteReceiptMasterRef.DefaultValue = ((int)(0));
                this.columnRemoteInvoiceMasterRef.AllowDBNull = false;
                this.columnRemoteInvoiceMasterRef.DefaultValue = ((int)(0));
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnIsReadOnly.DefaultValue = ((bool)(false));
                this.columnSum.AllowDBNull = false;
                this.columnSum.DefaultValue = ((decimal)(0m));
                this.columnNds.AllowDBNull = false;
                this.columnNds.DefaultValue = ((decimal)(0m));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnNote.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)("\'\'"));
                this.columnNote.MaxLength = 50;
                this.columnMainStockRef.AllowDBNull = false;
                this.columnMainStockRef.DefaultValue = ((int)(0));
                this.columnIsNDS.ReadOnly = true;
                this.columnIsNDSMain.ReadOnly = true;
                this.columnTradePupletName.ReadOnly = true;
                this.columnEXTRA.ReadOnly = true;
                this.columnExtraPercent.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow NewInvoiceMasterRow() {
                return ((InvoiceMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoiceMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoiceMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.IsNDSColumn.Expression = "Parent(FK_Stock_InvoiceMaster).IsNDS";
                this.IsNDSMainColumn.Expression = "Parent(FK_InvoiceMaster_StockMain).IsNDS";
                this.TradePupletNameColumn.Expression = "Parent(FK_Stock_InvoiceMaster).TradePupletName";
                this.EXTRAColumn.Expression = "sum(Child(FK_InvoiceDetail_InvoiceMaster).extra)";
                this.ExtraPercentColumn.Expression = "AVG(child(FK_InvoiceDetail_InvoiceMaster).ExtraPercent)";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoiceMasterRowChanged != null)) {
                    this.InvoiceMasterRowChanged(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoiceMasterRowChanging != null)) {
                    this.InvoiceMasterRowChanging(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoiceMasterRowDeleted != null)) {
                    this.InvoiceMasterRowDeleted(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoiceMasterRowDeleting != null)) {
                    this.InvoiceMasterRowDeleting(this, new InvoiceMasterRowChangeEvent(((InvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoiceMasterRow(InvoiceMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoiceMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrganizationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnShortName;
            
            private System.Data.DataColumn columnDirector;
            
            private System.Data.DataColumn columnAdress;
            
            private System.Data.DataColumn columnAddress_jur;
            
            private System.Data.DataColumn columnOKPO;
            
            private System.Data.DataColumn columnBankName;
            
            private System.Data.DataColumn columnBankMFO;
            
            private System.Data.DataColumn columnINN;
            
            private System.Data.DataColumn columnNumSvid;
            
            private System.Data.DataColumn columnNumSvidChp;
            
            private System.Data.DataColumn columnPassChp;
            
            private System.Data.DataColumn columnPhone;
            
            private System.Data.DataColumn columnLicense;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnBankRS;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateUpdate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganizationDataTable(bool initExpressions) {
                this.TableName = "Organization";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganizationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrganizationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShortNameColumn {
                get {
                    return this.columnShortName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirectorColumn {
                get {
                    return this.columnDirector;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdressColumn {
                get {
                    return this.columnAdress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Address_jurColumn {
                get {
                    return this.columnAddress_jur;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OKPOColumn {
                get {
                    return this.columnOKPO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankMFOColumn {
                get {
                    return this.columnBankMFO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn INNColumn {
                get {
                    return this.columnINN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumSvidColumn {
                get {
                    return this.columnNumSvid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumSvidChpColumn {
                get {
                    return this.columnNumSvidChp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PassChpColumn {
                get {
                    return this.columnPassChp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LicenseColumn {
                get {
                    return this.columnLicense;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankRSColumn {
                get {
                    return this.columnBankRS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateUpdateColumn {
                get {
                    return this.columnDateUpdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow this[int index] {
                get {
                    return ((OrganizationRow)(this.Rows[index]));
                }
            }
            
            public event OrganizationRowChangeEventHandler OrganizationRowChanging;
            
            public event OrganizationRowChangeEventHandler OrganizationRowChanged;
            
            public event OrganizationRowChangeEventHandler OrganizationRowDeleting;
            
            public event OrganizationRowChangeEventHandler OrganizationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrganizationRow(OrganizationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow AddOrganizationRow(
                        string Name, 
                        string ShortName, 
                        string Director, 
                        string Adress, 
                        string Address_jur, 
                        string OKPO, 
                        string BankName, 
                        string BankMFO, 
                        string INN, 
                        string NumSvid, 
                        string NumSvidChp, 
                        string PassChp, 
                        string Phone, 
                        string License, 
                        string Note, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string BankRS, 
                        System.DateTime DateLastModif, 
                        System.DateTime DateUpdate) {
                OrganizationRow rowOrganizationRow = ((OrganizationRow)(this.NewRow()));
                rowOrganizationRow.ItemArray = new object[] {
                        null,
                        Name,
                        ShortName,
                        Director,
                        Adress,
                        Address_jur,
                        OKPO,
                        BankName,
                        BankMFO,
                        INN,
                        NumSvid,
                        NumSvidChp,
                        PassChp,
                        Phone,
                        License,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        BankRS,
                        DateLastModif,
                        DateUpdate};
                this.Rows.Add(rowOrganizationRow);
                return rowOrganizationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow FindByID(int ID) {
                return ((OrganizationRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrganizationDataTable cln = ((OrganizationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrganizationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnShortName = base.Columns["ShortName"];
                this.columnDirector = base.Columns["Director"];
                this.columnAdress = base.Columns["Adress"];
                this.columnAddress_jur = base.Columns["Address_jur"];
                this.columnOKPO = base.Columns["OKPO"];
                this.columnBankName = base.Columns["BankName"];
                this.columnBankMFO = base.Columns["BankMFO"];
                this.columnINN = base.Columns["INN"];
                this.columnNumSvid = base.Columns["NumSvid"];
                this.columnNumSvidChp = base.Columns["NumSvidChp"];
                this.columnPassChp = base.Columns["PassChp"];
                this.columnPhone = base.Columns["Phone"];
                this.columnLicense = base.Columns["License"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnBankRS = base.Columns["BankRS"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateUpdate = base.Columns["DateUpdate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnShortName = new System.Data.DataColumn("ShortName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortName);
                this.columnDirector = new System.Data.DataColumn("Director", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDirector);
                this.columnAdress = new System.Data.DataColumn("Adress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdress);
                this.columnAddress_jur = new System.Data.DataColumn("Address_jur", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress_jur);
                this.columnOKPO = new System.Data.DataColumn("OKPO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOKPO);
                this.columnBankName = new System.Data.DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankName);
                this.columnBankMFO = new System.Data.DataColumn("BankMFO", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankMFO);
                this.columnINN = new System.Data.DataColumn("INN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnINN);
                this.columnNumSvid = new System.Data.DataColumn("NumSvid", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumSvid);
                this.columnNumSvidChp = new System.Data.DataColumn("NumSvidChp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumSvidChp);
                this.columnPassChp = new System.Data.DataColumn("PassChp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassChp);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnLicense = new System.Data.DataColumn("License", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicense);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnBankRS = new System.Data.DataColumn("BankRS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankRS);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateUpdate = new System.Data.DataColumn("DateUpdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateUpdate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.DefaultValue = ((string)("\'\'"));
                this.columnName.MaxLength = 255;
                this.columnShortName.MaxLength = 70;
                this.columnDirector.DefaultValue = ((string)("\'\'"));
                this.columnDirector.MaxLength = 50;
                this.columnAdress.DefaultValue = ((string)("\'\'"));
                this.columnAdress.MaxLength = 70;
                this.columnAddress_jur.DefaultValue = ((string)("\'\'"));
                this.columnAddress_jur.MaxLength = 70;
                this.columnOKPO.DefaultValue = ((string)("0"));
                this.columnOKPO.MaxLength = 10;
                this.columnBankName.DefaultValue = ((string)("\'\'"));
                this.columnBankName.MaxLength = 70;
                this.columnBankMFO.DefaultValue = ((string)("0"));
                this.columnBankMFO.MaxLength = 6;
                this.columnINN.DefaultValue = ((string)("0"));
                this.columnINN.MaxLength = 12;
                this.columnNumSvid.DefaultValue = ((string)("0"));
                this.columnNumSvid.MaxLength = 15;
                this.columnNumSvidChp.DefaultValue = ((string)("\'\'"));
                this.columnNumSvidChp.MaxLength = 15;
                this.columnPassChp.DefaultValue = ((string)("\'\'"));
                this.columnPassChp.MaxLength = 50;
                this.columnPhone.DefaultValue = ((string)("\'\'"));
                this.columnPhone.MaxLength = 50;
                this.columnLicense.DefaultValue = ((string)("\'\'"));
                this.columnLicense.MaxLength = 40;
                this.columnNote.DefaultValue = ((string)("\'\'"));
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnBankRS.DefaultValue = ((string)("0"));
                this.columnBankRS.MaxLength = 15;
                this.columnDateUpdate.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow NewOrganizationRow() {
                return ((OrganizationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrganizationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrganizationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DateUpdateColumn.Expression = "Max(DateLastModif)";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrganizationRowChanged != null)) {
                    this.OrganizationRowChanged(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrganizationRowChanging != null)) {
                    this.OrganizationRowChanging(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrganizationRowDeleted != null)) {
                    this.OrganizationRowDeleted(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrganizationRowDeleting != null)) {
                    this.OrganizationRowDeleting(this, new OrganizationRowChangeEvent(((OrganizationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrganizationRow(OrganizationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrganizationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptRemainsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnReceiptDetailRef;
            
            private System.Data.DataColumn columnQuantityReceipt;
            
            private System.Data.DataColumn columnQuantityRemains;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsDataTable() {
                this.TableName = "ReceiptRemains";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptRemainsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptRemainsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptDetailRefColumn {
                get {
                    return this.columnReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityReceiptColumn {
                get {
                    return this.columnQuantityReceipt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityRemainsColumn {
                get {
                    return this.columnQuantityRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow this[int index] {
                get {
                    return ((ReceiptRemainsRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowChanging;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowChanged;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowDeleting;
            
            public event ReceiptRemainsRowChangeEventHandler ReceiptRemainsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptRemainsRow(ReceiptRemainsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow AddReceiptRemainsRow(ReceiptDetailRow parentReceiptDetailRowByFK_ReceiptRemains_ReceiptDetail, decimal QuantityReceipt, decimal QuantityRemains, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                ReceiptRemainsRow rowReceiptRemainsRow = ((ReceiptRemainsRow)(this.NewRow()));
                rowReceiptRemainsRow.ItemArray = new object[] {
                        parentReceiptDetailRowByFK_ReceiptRemains_ReceiptDetail[0],
                        QuantityReceipt,
                        QuantityRemains,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowReceiptRemainsRow);
                return rowReceiptRemainsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow FindByReceiptDetailRef(int ReceiptDetailRef) {
                return ((ReceiptRemainsRow)(this.Rows.Find(new object[] {
                            ReceiptDetailRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptRemainsDataTable cln = ((ReceiptRemainsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptRemainsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReceiptDetailRef = base.Columns["ReceiptDetailRef"];
                this.columnQuantityReceipt = base.Columns["QuantityReceipt"];
                this.columnQuantityRemains = base.Columns["QuantityRemains"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReceiptDetailRef = new System.Data.DataColumn("ReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDetailRef);
                this.columnQuantityReceipt = new System.Data.DataColumn("QuantityReceipt", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityReceipt);
                this.columnQuantityRemains = new System.Data.DataColumn("QuantityRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityRemains);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReceiptDetailRef}, true));
                this.columnReceiptDetailRef.AllowDBNull = false;
                this.columnReceiptDetailRef.Unique = true;
                this.columnQuantityReceipt.AllowDBNull = false;
                this.columnQuantityRemains.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow NewReceiptRemainsRow() {
                return ((ReceiptRemainsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptRemainsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptRemainsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptRemainsRowChanged != null)) {
                    this.ReceiptRemainsRowChanged(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptRemainsRowChanging != null)) {
                    this.ReceiptRemainsRowChanging(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptRemainsRowDeleted != null)) {
                    this.ReceiptRemainsRowDeleted(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptRemainsRowDeleting != null)) {
                    this.ReceiptRemainsRowDeleting(this, new ReceiptRemainsRowChangeEvent(((ReceiptRemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptRemainsRow(ReceiptRemainsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptRemainsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StockDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnTradePutletRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnisLocal;
            
            private System.Data.DataColumn columnTradePupletName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDataTable(bool initExpressions) {
                this.TableName = "Stock";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StockDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePutletRefColumn {
                get {
                    return this.columnTradePutletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isLocalColumn {
                get {
                    return this.columnisLocal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePupletNameColumn {
                get {
                    return this.columnTradePupletName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow this[int index] {
                get {
                    return ((StockRow)(this.Rows[index]));
                }
            }
            
            public event StockRowChangeEventHandler StockRowChanging;
            
            public event StockRowChangeEventHandler StockRowChanged;
            
            public event StockRowChangeEventHandler StockRowDeleting;
            
            public event StockRowChangeEventHandler StockRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStockRow(StockRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow AddStockRow(string Name, bool IsNDS, TradePutletRow parentTradePutletRowByTradePutlet_Stock, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, bool isLocal, string TradePupletName) {
                StockRow rowStockRow = ((StockRow)(this.NewRow()));
                rowStockRow.ItemArray = new object[] {
                        null,
                        Name,
                        IsNDS,
                        parentTradePutletRowByTradePutlet_Stock[0],
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        isLocal,
                        TradePupletName};
                this.Rows.Add(rowStockRow);
                return rowStockRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow FindByID(int ID) {
                return ((StockRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StockDataTable cln = ((StockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StockDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnTradePutletRef = base.Columns["TradePutletRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnisLocal = base.Columns["isLocal"];
                this.columnTradePupletName = base.Columns["TradePupletName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnTradePutletRef = new System.Data.DataColumn("TradePutletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePutletRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnisLocal = new System.Data.DataColumn("isLocal", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisLocal);
                this.columnTradePupletName = new System.Data.DataColumn("TradePupletName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePupletName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsNDS.AllowDBNull = false;
                this.columnTradePutletRef.AllowDBNull = false;
                this.columnTradePutletRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnisLocal.ReadOnly = true;
                this.columnTradePupletName.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow NewStockRow() {
                return ((StockRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StockRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StockRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.TradePupletNameColumn.Expression = "Parent(TradePutlet_Stock).Name";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StockRowChanged != null)) {
                    this.StockRowChanged(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StockRowChanging != null)) {
                    this.StockRowChanging(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StockRowDeleted != null)) {
                    this.StockRowDeleted(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StockRowDeleting != null)) {
                    this.StockRowDeleting(this, new StockRowChangeEvent(((StockRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStockRow(StockRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TradePutletDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnIP;
            
            private System.Data.DataColumn columnAdress;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletDataTable() {
                this.TableName = "TradePutlet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradePutletDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TradePutletDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdressColumn {
                get {
                    return this.columnAdress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow this[int index] {
                get {
                    return ((TradePutletRow)(this.Rows[index]));
                }
            }
            
            public event TradePutletRowChangeEventHandler TradePutletRowChanging;
            
            public event TradePutletRowChangeEventHandler TradePutletRowChanged;
            
            public event TradePutletRowChangeEventHandler TradePutletRowDeleting;
            
            public event TradePutletRowChangeEventHandler TradePutletRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTradePutletRow(TradePutletRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow AddTradePutletRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, string IP, string Adress) {
                TradePutletRow rowTradePutletRow = ((TradePutletRow)(this.NewRow()));
                rowTradePutletRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        IP,
                        Adress};
                this.Rows.Add(rowTradePutletRow);
                return rowTradePutletRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow FindByID(int ID) {
                return ((TradePutletRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TradePutletDataTable cln = ((TradePutletDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TradePutletDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnIP = base.Columns["IP"];
                this.columnAdress = base.Columns["Adress"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnIP = new System.Data.DataColumn("IP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.columnAdress = new System.Data.DataColumn("Adress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdress);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnIP.AllowDBNull = false;
                this.columnIP.MaxLength = 15;
                this.columnAdress.AllowDBNull = false;
                this.columnAdress.MaxLength = 150;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow NewTradePutletRow() {
                return ((TradePutletRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TradePutletRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TradePutletRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TradePutletRowChanged != null)) {
                    this.TradePutletRowChanged(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TradePutletRowChanging != null)) {
                    this.TradePutletRowChanging(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TradePutletRowDeleted != null)) {
                    this.TradePutletRowDeleted(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TradePutletRowDeleting != null)) {
                    this.TradePutletRowDeleting(this, new TradePutletRowChangeEvent(((TradePutletRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTradePutletRow(TradePutletRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TradePutletDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnOrganizationRef;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnSenderStockRef;
            
            private System.Data.DataColumn columnSenderInvoiceRef;
            
            private System.Data.DataColumn columnSalesSum;
            
            private System.Data.DataColumn columnPurchSum;
            
            private System.Data.DataColumn columnPurchNDS;
            
            private System.Data.DataColumn columnSalesNDS;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnRecalcSum;
            
            private System.Data.DataColumn columnOrganizationName;
            
            private System.Data.DataColumn columnCalcPurchSum;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnDateUpdateDetail;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private static System.DateTime columnDocDate_defaultValue = System.DateTime.Parse("01/01/2007 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterDataTable(bool initExpressions) {
                this.TableName = "ReceiptMaster";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationRefColumn {
                get {
                    return this.columnOrganizationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderStockRefColumn {
                get {
                    return this.columnSenderStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SenderInvoiceRefColumn {
                get {
                    return this.columnSenderInvoiceRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesSumColumn {
                get {
                    return this.columnSalesSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchSumColumn {
                get {
                    return this.columnPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchNDSColumn {
                get {
                    return this.columnPurchNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesNDSColumn {
                get {
                    return this.columnSalesNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecalcSumColumn {
                get {
                    return this.columnRecalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationNameColumn {
                get {
                    return this.columnOrganizationName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalcPurchSumColumn {
                get {
                    return this.columnCalcPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateUpdateDetailColumn {
                get {
                    return this.columnDateUpdateDetail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow this[int index] {
                get {
                    return ((ReceiptMasterRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowChanging;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowChanged;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowDeleting;
            
            public event ReceiptMasterRowChangeEventHandler ReceiptMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptMasterRow(ReceiptMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow AddReceiptMasterRow(
                        string Note, 
                        System.DateTime DocDate, 
                        DocumentTypeRow parentDocumentTypeRowByFK_ReceiptMaster_DocumentType, 
                        OrganizationRow parentOrganizationRowByFK_ReceiptMaster_Organization, 
                        StockRow parentStockRowByFK_ReceiptMaster_Stock, 
                        int SenderStockRef, 
                        int SenderInvoiceRef, 
                        decimal SalesSum, 
                        decimal PurchSum, 
                        decimal PurchNDS, 
                        decimal SalesNDS, 
                        bool IsReadOnly, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        bool RecalcSum, 
                        string OrganizationName, 
                        decimal CalcPurchSum, 
                        bool IsNDS, 
                        System.DateTime DateUpdateDetail, 
                        System.DateTime DateLastModif) {
                ReceiptMasterRow rowReceiptMasterRow = ((ReceiptMasterRow)(this.NewRow()));
                rowReceiptMasterRow.ItemArray = new object[] {
                        null,
                        null,
                        Note,
                        DocDate,
                        parentDocumentTypeRowByFK_ReceiptMaster_DocumentType[0],
                        parentOrganizationRowByFK_ReceiptMaster_Organization[0],
                        parentStockRowByFK_ReceiptMaster_Stock[0],
                        SenderStockRef,
                        SenderInvoiceRef,
                        SalesSum,
                        PurchSum,
                        PurchNDS,
                        SalesNDS,
                        IsReadOnly,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        RecalcSum,
                        OrganizationName,
                        CalcPurchSum,
                        IsNDS,
                        DateUpdateDetail,
                        DateLastModif};
                this.Rows.Add(rowReceiptMasterRow);
                return rowReceiptMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow FindByID(int ID) {
                return ((ReceiptMasterRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptMasterDataTable cln = ((ReceiptMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnNote = base.Columns["Note"];
                this.columnDocDate = base.Columns["DocDate"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnOrganizationRef = base.Columns["OrganizationRef"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnSenderStockRef = base.Columns["SenderStockRef"];
                this.columnSenderInvoiceRef = base.Columns["SenderInvoiceRef"];
                this.columnSalesSum = base.Columns["SalesSum"];
                this.columnPurchSum = base.Columns["PurchSum"];
                this.columnPurchNDS = base.Columns["PurchNDS"];
                this.columnSalesNDS = base.Columns["SalesNDS"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnRecalcSum = base.Columns["RecalcSum"];
                this.columnOrganizationName = base.Columns["OrganizationName"];
                this.columnCalcPurchSum = base.Columns["CalcPurchSum"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnDateUpdateDetail = base.Columns["DateUpdateDetail"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnOrganizationRef = new System.Data.DataColumn("OrganizationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationRef);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnSenderStockRef = new System.Data.DataColumn("SenderStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderStockRef);
                this.columnSenderInvoiceRef = new System.Data.DataColumn("SenderInvoiceRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSenderInvoiceRef);
                this.columnSalesSum = new System.Data.DataColumn("SalesSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSum);
                this.columnPurchSum = new System.Data.DataColumn("PurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchSum);
                this.columnPurchNDS = new System.Data.DataColumn("PurchNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchNDS);
                this.columnSalesNDS = new System.Data.DataColumn("SalesNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesNDS);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnRecalcSum = new System.Data.DataColumn("RecalcSum", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecalcSum);
                this.columnOrganizationName = new System.Data.DataColumn("OrganizationName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationName);
                this.columnCalcPurchSum = new System.Data.DataColumn("CalcPurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcPurchSum);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnDateUpdateDetail = new System.Data.DataColumn("DateUpdateDetail", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateUpdateDetail);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnNumber.AutoIncrement = true;
                this.columnNumber.AutoIncrementSeed = -1;
                this.columnNumber.AutoIncrementStep = -1;
                this.columnNumber.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)("№"));
                this.columnNote.MaxLength = 255;
                this.columnDocDate.AllowDBNull = false;
                this.columnDocDate.DefaultValue = ((System.DateTime)(ReceiptMasterDataTable.columnDocDate_defaultValue));
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnDocumentTypeRef.DefaultValue = ((int)(0));
                this.columnOrganizationRef.AllowDBNull = false;
                this.columnOrganizationRef.DefaultValue = ((int)(0));
                this.columnMainStockRef.AllowDBNull = false;
                this.columnMainStockRef.DefaultValue = ((int)(0));
                this.columnSenderStockRef.AllowDBNull = false;
                this.columnSenderStockRef.ReadOnly = true;
                this.columnSenderStockRef.DefaultValue = ((int)(0));
                this.columnSenderInvoiceRef.AllowDBNull = false;
                this.columnSenderInvoiceRef.ReadOnly = true;
                this.columnSenderInvoiceRef.DefaultValue = ((int)(0));
                this.columnSalesSum.AllowDBNull = false;
                this.columnSalesSum.ReadOnly = true;
                this.columnSalesSum.DefaultValue = ((decimal)(0m));
                this.columnPurchSum.AllowDBNull = false;
                this.columnPurchSum.ReadOnly = true;
                this.columnPurchSum.DefaultValue = ((decimal)(0m));
                this.columnPurchNDS.AllowDBNull = false;
                this.columnPurchNDS.ReadOnly = true;
                this.columnPurchNDS.DefaultValue = ((decimal)(0m));
                this.columnSalesNDS.AllowDBNull = false;
                this.columnSalesNDS.ReadOnly = true;
                this.columnSalesNDS.DefaultValue = ((decimal)(0m));
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnIsReadOnly.ReadOnly = true;
                this.columnIsReadOnly.DefaultValue = ((bool)(false));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnRecalcSum.AllowDBNull = false;
                this.columnRecalcSum.DefaultValue = ((bool)(false));
                this.columnOrganizationName.ReadOnly = true;
                this.columnCalcPurchSum.ReadOnly = true;
                this.columnIsNDS.ReadOnly = true;
                this.columnDateUpdateDetail.ReadOnly = true;
                this.columnDateLastModif.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow NewReceiptMasterRow() {
                return ((ReceiptMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.OrganizationNameColumn.Expression = "Parent(FK_ReceiptMaster_Organization).ShortName";
                this.CalcPurchSumColumn.Expression = "sum(Child(ReceiptMaster_ReceiptDetail).CalcPurchSum)";
                this.IsNDSColumn.Expression = "Parent(FK_ReceiptMaster_Stock).IsNDS";
                this.DateUpdateDetailColumn.Expression = "Max(Child(ReceiptMaster_ReceiptDetail).DateLastModif)";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptMasterRowChanged != null)) {
                    this.ReceiptMasterRowChanged(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptMasterRowChanging != null)) {
                    this.ReceiptMasterRowChanging(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptMasterRowDeleted != null)) {
                    this.ReceiptMasterRowDeleted(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptMasterRowDeleting != null)) {
                    this.ReceiptMasterRowDeleting(this, new ReceiptMasterRowChangeEvent(((ReceiptMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptMasterRow(ReceiptMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReceiptDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnReceiptMasterRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnPurchSum;
            
            private System.Data.DataColumn columnPurchNDS;
            
            private System.Data.DataColumn columnSalesNDS;
            
            private System.Data.DataColumn columnSalesPrice;
            
            private System.Data.DataColumn columnSalesSum;
            
            private System.Data.DataColumn columnInvoiceDetailRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnCalcPurchSum;
            
            private System.Data.DataColumn columnOrganisationRef;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailDataTable(bool initExpressions) {
                this.TableName = "ReceiptDetail";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReceiptDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptMasterRefColumn {
                get {
                    return this.columnReceiptMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchSumColumn {
                get {
                    return this.columnPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchNDSColumn {
                get {
                    return this.columnPurchNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesNDSColumn {
                get {
                    return this.columnSalesNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesPriceColumn {
                get {
                    return this.columnSalesPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SalesSumColumn {
                get {
                    return this.columnSalesSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceDetailRefColumn {
                get {
                    return this.columnInvoiceDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CalcPurchSumColumn {
                get {
                    return this.columnCalcPurchSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganisationRefColumn {
                get {
                    return this.columnOrganisationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow this[int index] {
                get {
                    return ((ReceiptDetailRow)(this.Rows[index]));
                }
            }
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowChanging;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowChanged;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowDeleting;
            
            public event ReceiptDetailRowChangeEventHandler ReceiptDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReceiptDetailRow(ReceiptDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow AddReceiptDetailRow(
                        ReceiptMasterRow parentReceiptMasterRowByReceiptMaster_ReceiptDetail, 
                        ProductRow parentProductRowByProduct_ReceiptDetail, 
                        string Series, 
                        System.DateTime UseByDate, 
                        decimal Quantity, 
                        decimal PricePurchase, 
                        decimal PurchSum, 
                        decimal PurchNDS, 
                        decimal SalesNDS, 
                        decimal SalesPrice, 
                        decimal SalesSum, 
                        int InvoiceDetailRef, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string Note, 
                        System.DateTime DateLastModif, 
                        decimal CalcPurchSum, 
                        int OrganisationRef, 
                        string ProductName, 
                        string ManufacturerName, 
                        string DocumentTypeRef, 
                        ManufacturerRow parentManufacturerRowByFK_Manufacturer_ReceiptDetail) {
                ReceiptDetailRow rowReceiptDetailRow = ((ReceiptDetailRow)(this.NewRow()));
                rowReceiptDetailRow.ItemArray = new object[] {
                        null,
                        parentReceiptMasterRowByReceiptMaster_ReceiptDetail[0],
                        parentProductRowByProduct_ReceiptDetail[0],
                        Series,
                        UseByDate,
                        Quantity,
                        PricePurchase,
                        PurchSum,
                        PurchNDS,
                        SalesNDS,
                        SalesPrice,
                        SalesSum,
                        InvoiceDetailRef,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        Note,
                        DateLastModif,
                        CalcPurchSum,
                        OrganisationRef,
                        ProductName,
                        ManufacturerName,
                        DocumentTypeRef,
                        parentManufacturerRowByFK_Manufacturer_ReceiptDetail[0]};
                this.Rows.Add(rowReceiptDetailRow);
                return rowReceiptDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow FindByID(int ID) {
                return ((ReceiptDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReceiptDetailDataTable cln = ((ReceiptDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReceiptDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnReceiptMasterRef = base.Columns["ReceiptMasterRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnPurchSum = base.Columns["PurchSum"];
                this.columnPurchNDS = base.Columns["PurchNDS"];
                this.columnSalesNDS = base.Columns["SalesNDS"];
                this.columnSalesPrice = base.Columns["SalesPrice"];
                this.columnSalesSum = base.Columns["SalesSum"];
                this.columnInvoiceDetailRef = base.Columns["InvoiceDetailRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnNote = base.Columns["Note"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnCalcPurchSum = base.Columns["CalcPurchSum"];
                this.columnOrganisationRef = base.Columns["OrganisationRef"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnReceiptMasterRef = new System.Data.DataColumn("ReceiptMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptMasterRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnPurchSum = new System.Data.DataColumn("PurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchSum);
                this.columnPurchNDS = new System.Data.DataColumn("PurchNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchNDS);
                this.columnSalesNDS = new System.Data.DataColumn("SalesNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesNDS);
                this.columnSalesPrice = new System.Data.DataColumn("SalesPrice", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesPrice);
                this.columnSalesSum = new System.Data.DataColumn("SalesSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesSum);
                this.columnInvoiceDetailRef = new System.Data.DataColumn("InvoiceDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceDetailRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnCalcPurchSum = new System.Data.DataColumn("CalcPurchSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcPurchSum);
                this.columnOrganisationRef = new System.Data.DataColumn("OrganisationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationRef);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnReceiptMasterRef.AllowDBNull = false;
                this.columnProductRef.AllowDBNull = false;
                this.columnSeries.AllowDBNull = false;
                this.columnSeries.MaxLength = 15;
                this.columnUseByDate.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = ((decimal)(0m));
                this.columnPricePurchase.AllowDBNull = false;
                this.columnPricePurchase.DefaultValue = ((decimal)(0m));
                this.columnPurchSum.DefaultValue = ((decimal)(0m));
                this.columnPurchNDS.DefaultValue = ((decimal)(0m));
                this.columnSalesNDS.DefaultValue = ((decimal)(0m));
                this.columnSalesPrice.DefaultValue = ((decimal)(0m));
                this.columnSalesSum.DefaultValue = ((decimal)(0m));
                this.columnInvoiceDetailRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnNote.DefaultValue = ((string)(" "));
                this.columnNote.MaxLength = 50;
                this.columnCalcPurchSum.ReadOnly = true;
                this.columnOrganisationRef.ReadOnly = true;
                this.columnProductName.ReadOnly = true;
                this.columnManufacturerName.ReadOnly = true;
                this.columnDocumentTypeRef.ReadOnly = true;
                this.columnManufacturerRef.DefaultValue = ((int)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow NewReceiptDetailRow() {
                return ((ReceiptDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReceiptDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReceiptDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.CalcPurchSumColumn.Expression = "Quantity*PricePurchase";
                this.OrganisationRefColumn.Expression = "Parent(ReceiptMaster_ReceiptDetail).OrganizationRef";
                this.ProductNameColumn.Expression = "Parent(Product_ReceiptDetail).Name";
                this.ManufacturerNameColumn.Expression = "Parent(FK_Manufacturer_ReceiptDetail).Name";
                this.DocumentTypeRefColumn.Expression = "Parent(ReceiptMaster_ReceiptDetail).DocumentTypeRef";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReceiptDetailRowChanged != null)) {
                    this.ReceiptDetailRowChanged(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReceiptDetailRowChanging != null)) {
                    this.ReceiptDetailRowChanging(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReceiptDetailRowDeleted != null)) {
                    this.ReceiptDetailRowDeleted(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReceiptDetailRowDeleting != null)) {
                    this.ReceiptDetailRowDeleting(this, new ReceiptDetailRowChangeEvent(((ReceiptDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReceiptDetailRow(ReceiptDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReceiptDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StorageConditionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnDateUpdate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StorageConditionDataTable(bool initExpressions) {
                this.TableName = "StorageCondition";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StorageConditionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StorageConditionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateUpdateColumn {
                get {
                    return this.columnDateUpdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow this[int index] {
                get {
                    return ((StorageConditionRow)(this.Rows[index]));
                }
            }
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowChanging;
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowChanged;
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowDeleting;
            
            public event StorageConditionRowChangeEventHandler StorageConditionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStorageConditionRow(StorageConditionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow AddStorageConditionRow(string Name, System.DateTime DateLastModif, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion, System.DateTime DateUpdate) {
                StorageConditionRow rowStorageConditionRow = ((StorageConditionRow)(this.NewRow()));
                rowStorageConditionRow.ItemArray = new object[] {
                        null,
                        Name,
                        DateLastModif,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        DateUpdate};
                this.Rows.Add(rowStorageConditionRow);
                return rowStorageConditionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow FindByID(int ID) {
                return ((StorageConditionRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StorageConditionDataTable cln = ((StorageConditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StorageConditionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnDateUpdate = base.Columns["DateUpdate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnDateUpdate = new System.Data.DataColumn("DateUpdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateUpdate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnDateUpdate.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow NewStorageConditionRow() {
                return ((StorageConditionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StorageConditionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StorageConditionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DateUpdateColumn.Expression = "Max(DateLastModif)";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StorageConditionRowChanged != null)) {
                    this.StorageConditionRowChanged(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StorageConditionRowChanging != null)) {
                    this.StorageConditionRowChanging(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StorageConditionRowDeleted != null)) {
                    this.StorageConditionRowDeleted(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StorageConditionRowDeleting != null)) {
                    this.StorageConditionRowDeleting(this, new StorageConditionRowChangeEvent(((StorageConditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStorageConditionRow(StorageConditionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StorageConditionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnSmallName;
            
            private System.Data.DataColumn columnPriceManufact;
            
            private System.Data.DataColumn columnUnitRef;
            
            private System.Data.DataColumn columnPackingRef;
            
            private System.Data.DataColumn columnStorageConditionRef;
            
            private System.Data.DataColumn columnSubstanceRef;
            
            private System.Data.DataColumn columnFarmGrouplevel2Ref;
            
            private System.Data.DataColumn columnIsRecept;
            
            private System.Data.DataColumn columnIsOneRecept;
            
            private System.Data.DataColumn columnMinDivisor;
            
            private System.Data.DataColumn columnIsNDS;
            
            private System.Data.DataColumn columnOldKol;
            
            private System.Data.DataColumn columnOldKod;
            
            private System.Data.DataColumn columnOldName;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnFarmGroupName;
            
            private System.Data.DataColumn columnPackingName;
            
            private System.Data.DataColumn columnStorageConditionName;
            
            private System.Data.DataColumn columnFarmGroupLevel2;
            
            private System.Data.DataColumn columnUnitName;
            
            private System.Data.DataColumn columnSubstanceName;
            
            private System.Data.DataColumn columnIsHide;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductDataTable(bool initExpressions) {
                this.TableName = "Product";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SmallNameColumn {
                get {
                    return this.columnSmallName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceManufactColumn {
                get {
                    return this.columnPriceManufact;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitRefColumn {
                get {
                    return this.columnUnitRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingRefColumn {
                get {
                    return this.columnPackingRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionRefColumn {
                get {
                    return this.columnStorageConditionRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceRefColumn {
                get {
                    return this.columnSubstanceRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGrouplevel2RefColumn {
                get {
                    return this.columnFarmGrouplevel2Ref;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReceptColumn {
                get {
                    return this.columnIsRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsOneReceptColumn {
                get {
                    return this.columnIsOneRecept;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinDivisorColumn {
                get {
                    return this.columnMinDivisor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsNDSColumn {
                get {
                    return this.columnIsNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldKolColumn {
                get {
                    return this.columnOldKol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldKodColumn {
                get {
                    return this.columnOldKod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldNameColumn {
                get {
                    return this.columnOldName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupNameColumn {
                get {
                    return this.columnFarmGroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackingNameColumn {
                get {
                    return this.columnPackingName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StorageConditionNameColumn {
                get {
                    return this.columnStorageConditionName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupLevel2Column {
                get {
                    return this.columnFarmGroupLevel2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubstanceNameColumn {
                get {
                    return this.columnSubstanceName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsHideColumn {
                get {
                    return this.columnIsHide;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow this[int index] {
                get {
                    return ((ProductRow)(this.Rows[index]));
                }
            }
            
            public event ProductRowChangeEventHandler ProductRowChanging;
            
            public event ProductRowChangeEventHandler ProductRowChanged;
            
            public event ProductRowChangeEventHandler ProductRowDeleting;
            
            public event ProductRowChangeEventHandler ProductRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductRow(ProductRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow AddProductRow(
                        string Name, 
                        string SmallName, 
                        decimal PriceManufact, 
                        UnitRow parentUnitRowByFK_Unit_Product, 
                        PackingRow parentPackingRowByFK_Packing_Product, 
                        StorageConditionRow parentStorageConditionRowByStorageCondition_Product, 
                        SubstanceRow parentSubstanceRowByFK_Substance_Product, 
                        FarmGroupLevel2Row parentFarmGroupLevel2RowByFK_FarmGroupLevel2_Product, 
                        bool IsRecept, 
                        bool IsOneRecept, 
                        short MinDivisor, 
                        bool IsNDS, 
                        int OldKol, 
                        int OldKod, 
                        string OldName, 
                        string Note, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        string FarmGroupName, 
                        string PackingName, 
                        string StorageConditionName, 
                        string FarmGroupLevel2, 
                        string UnitName, 
                        string SubstanceName, 
                        bool IsHide) {
                ProductRow rowProductRow = ((ProductRow)(this.NewRow()));
                rowProductRow.ItemArray = new object[] {
                        null,
                        Name,
                        SmallName,
                        PriceManufact,
                        parentUnitRowByFK_Unit_Product[0],
                        parentPackingRowByFK_Packing_Product[0],
                        parentStorageConditionRowByStorageCondition_Product[0],
                        parentSubstanceRowByFK_Substance_Product[0],
                        parentFarmGroupLevel2RowByFK_FarmGroupLevel2_Product[0],
                        IsRecept,
                        IsOneRecept,
                        MinDivisor,
                        IsNDS,
                        OldKol,
                        OldKod,
                        OldName,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion,
                        FarmGroupName,
                        PackingName,
                        StorageConditionName,
                        FarmGroupLevel2,
                        UnitName,
                        SubstanceName,
                        IsHide};
                this.Rows.Add(rowProductRow);
                return rowProductRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow FindByID(int ID) {
                return ((ProductRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductDataTable cln = ((ProductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnSmallName = base.Columns["SmallName"];
                this.columnPriceManufact = base.Columns["PriceManufact"];
                this.columnUnitRef = base.Columns["UnitRef"];
                this.columnPackingRef = base.Columns["PackingRef"];
                this.columnStorageConditionRef = base.Columns["StorageConditionRef"];
                this.columnSubstanceRef = base.Columns["SubstanceRef"];
                this.columnFarmGrouplevel2Ref = base.Columns["FarmGrouplevel2Ref"];
                this.columnIsRecept = base.Columns["IsRecept"];
                this.columnIsOneRecept = base.Columns["IsOneRecept"];
                this.columnMinDivisor = base.Columns["MinDivisor"];
                this.columnIsNDS = base.Columns["IsNDS"];
                this.columnOldKol = base.Columns["OldKol"];
                this.columnOldKod = base.Columns["OldKod"];
                this.columnOldName = base.Columns["OldName"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnFarmGroupName = base.Columns["FarmGroupName"];
                this.columnPackingName = base.Columns["PackingName"];
                this.columnStorageConditionName = base.Columns["StorageConditionName"];
                this.columnFarmGroupLevel2 = base.Columns["FarmGroupLevel2"];
                this.columnUnitName = base.Columns["UnitName"];
                this.columnSubstanceName = base.Columns["SubstanceName"];
                this.columnIsHide = base.Columns["IsHide"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnSmallName = new System.Data.DataColumn("SmallName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmallName);
                this.columnPriceManufact = new System.Data.DataColumn("PriceManufact", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceManufact);
                this.columnUnitRef = new System.Data.DataColumn("UnitRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitRef);
                this.columnPackingRef = new System.Data.DataColumn("PackingRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingRef);
                this.columnStorageConditionRef = new System.Data.DataColumn("StorageConditionRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionRef);
                this.columnSubstanceRef = new System.Data.DataColumn("SubstanceRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceRef);
                this.columnFarmGrouplevel2Ref = new System.Data.DataColumn("FarmGrouplevel2Ref", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGrouplevel2Ref);
                this.columnIsRecept = new System.Data.DataColumn("IsRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecept);
                this.columnIsOneRecept = new System.Data.DataColumn("IsOneRecept", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsOneRecept);
                this.columnMinDivisor = new System.Data.DataColumn("MinDivisor", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDivisor);
                this.columnIsNDS = new System.Data.DataColumn("IsNDS", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNDS);
                this.columnOldKol = new System.Data.DataColumn("OldKol", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldKol);
                this.columnOldKod = new System.Data.DataColumn("OldKod", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldKod);
                this.columnOldName = new System.Data.DataColumn("OldName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldName);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnFarmGroupName = new System.Data.DataColumn("FarmGroupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupName);
                this.columnPackingName = new System.Data.DataColumn("PackingName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackingName);
                this.columnStorageConditionName = new System.Data.DataColumn("StorageConditionName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStorageConditionName);
                this.columnFarmGroupLevel2 = new System.Data.DataColumn("FarmGroupLevel2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupLevel2);
                this.columnUnitName = new System.Data.DataColumn("UnitName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitName);
                this.columnSubstanceName = new System.Data.DataColumn("SubstanceName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubstanceName);
                this.columnIsHide = new System.Data.DataColumn("IsHide", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsHide);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.DefaultValue = ((string)("\'\'"));
                this.columnName.MaxLength = 255;
                this.columnSmallName.AllowDBNull = false;
                this.columnSmallName.DefaultValue = ((string)("\'\'"));
                this.columnSmallName.MaxLength = 25;
                this.columnPriceManufact.AllowDBNull = false;
                this.columnPriceManufact.DefaultValue = ((decimal)(0m));
                this.columnUnitRef.AllowDBNull = false;
                this.columnUnitRef.DefaultValue = ((int)(0));
                this.columnPackingRef.AllowDBNull = false;
                this.columnPackingRef.DefaultValue = ((int)(0));
                this.columnStorageConditionRef.AllowDBNull = false;
                this.columnStorageConditionRef.DefaultValue = ((int)(0));
                this.columnSubstanceRef.AllowDBNull = false;
                this.columnSubstanceRef.DefaultValue = ((int)(0));
                this.columnFarmGrouplevel2Ref.AllowDBNull = false;
                this.columnFarmGrouplevel2Ref.DefaultValue = ((int)(0));
                this.columnIsRecept.AllowDBNull = false;
                this.columnIsRecept.DefaultValue = ((bool)(false));
                this.columnIsOneRecept.AllowDBNull = false;
                this.columnIsOneRecept.DefaultValue = ((bool)(false));
                this.columnMinDivisor.AllowDBNull = false;
                this.columnMinDivisor.DefaultValue = ((short)(1));
                this.columnIsNDS.AllowDBNull = false;
                this.columnIsNDS.DefaultValue = ((bool)(false));
                this.columnOldKol.AllowDBNull = false;
                this.columnOldKol.DefaultValue = ((int)(1));
                this.columnOldKod.AllowDBNull = false;
                this.columnOldKod.DefaultValue = ((int)(0));
                this.columnOldName.DefaultValue = ((string)("\'\'"));
                this.columnOldName.MaxLength = 100;
                this.columnNote.DefaultValue = ((string)(" "));
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnFarmGroupName.ReadOnly = true;
                this.columnFarmGroupName.MaxLength = 50;
                this.columnPackingName.ReadOnly = true;
                this.columnPackingName.MaxLength = 50;
                this.columnStorageConditionName.ReadOnly = true;
                this.columnStorageConditionName.MaxLength = 50;
                this.columnFarmGroupLevel2.ReadOnly = true;
                this.columnFarmGroupLevel2.MaxLength = 50;
                this.columnUnitName.ReadOnly = true;
                this.columnUnitName.MaxLength = 10;
                this.columnSubstanceName.ReadOnly = true;
                this.columnSubstanceName.MaxLength = 50;
                this.columnIsHide.AllowDBNull = false;
                this.columnIsHide.DefaultValue = ((bool)(false));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow NewProductRow() {
                return ((ProductRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.FarmGroupNameColumn.Expression = "Parent(FK_FarmGroupLevel2_Product).FarmGroupName";
                this.PackingNameColumn.Expression = "Parent(FK_Packing_Product).Name";
                this.StorageConditionNameColumn.Expression = "Parent(StorageCondition_Product).Name";
                this.FarmGroupLevel2Column.Expression = "Parent(FK_FarmGroupLevel2_Product).Name";
                this.UnitNameColumn.Expression = "Parent(FK_Unit_Product).Name";
                this.SubstanceNameColumn.Expression = "Parent(FK_Substance_Product).Name";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductRowChanged != null)) {
                    this.ProductRowChanged(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductRowChanging != null)) {
                    this.ProductRowChanging(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductRowDeleted != null)) {
                    this.ProductRowDeleted(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductRowDeleting != null)) {
                    this.ProductRowDeleting(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductRow(ProductRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FarmGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupDataTable() {
                this.TableName = "FarmGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FarmGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow this[int index] {
                get {
                    return ((FarmGroupRow)(this.Rows[index]));
                }
            }
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowChanging;
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowChanged;
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowDeleting;
            
            public event FarmGroupRowChangeEventHandler FarmGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFarmGroupRow(FarmGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow AddFarmGroupRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                FarmGroupRow rowFarmGroupRow = ((FarmGroupRow)(this.NewRow()));
                rowFarmGroupRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowFarmGroupRow);
                return rowFarmGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow FindByID(int ID) {
                return ((FarmGroupRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FarmGroupDataTable cln = ((FarmGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FarmGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow NewFarmGroupRow() {
                return ((FarmGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FarmGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FarmGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FarmGroupRowChanged != null)) {
                    this.FarmGroupRowChanged(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FarmGroupRowChanging != null)) {
                    this.FarmGroupRowChanging(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FarmGroupRowDeleted != null)) {
                    this.FarmGroupRowDeleted(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FarmGroupRowDeleting != null)) {
                    this.FarmGroupRowDeleting(this, new FarmGroupRowChangeEvent(((FarmGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFarmGroupRow(FarmGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FarmGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PackingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingDataTable() {
                this.TableName = "Packing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PackingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow this[int index] {
                get {
                    return ((PackingRow)(this.Rows[index]));
                }
            }
            
            public event PackingRowChangeEventHandler PackingRowChanging;
            
            public event PackingRowChangeEventHandler PackingRowChanged;
            
            public event PackingRowChangeEventHandler PackingRowDeleting;
            
            public event PackingRowChangeEventHandler PackingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPackingRow(PackingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow AddPackingRow(string Name, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                PackingRow rowPackingRow = ((PackingRow)(this.NewRow()));
                rowPackingRow.ItemArray = new object[] {
                        null,
                        Name,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowPackingRow);
                return rowPackingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow FindByID(int ID) {
                return ((PackingRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PackingDataTable cln = ((PackingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PackingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow NewPackingRow() {
                return ((PackingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PackingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PackingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PackingRowChanged != null)) {
                    this.PackingRowChanged(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PackingRowChanging != null)) {
                    this.PackingRowChanging(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PackingRowDeleted != null)) {
                    this.PackingRowDeleted(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PackingRowDeleting != null)) {
                    this.PackingRowDeleting(this, new PackingRowChangeEvent(((PackingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePackingRow(PackingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PackingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubstanceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceDataTable() {
                this.TableName = "Substance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubstanceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubstanceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow this[int index] {
                get {
                    return ((SubstanceRow)(this.Rows[index]));
                }
            }
            
            public event SubstanceRowChangeEventHandler SubstanceRowChanging;
            
            public event SubstanceRowChangeEventHandler SubstanceRowChanged;
            
            public event SubstanceRowChangeEventHandler SubstanceRowDeleting;
            
            public event SubstanceRowChangeEventHandler SubstanceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubstanceRow(SubstanceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow AddSubstanceRow(string Name, System.DateTime DateLastModif, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                SubstanceRow rowSubstanceRow = ((SubstanceRow)(this.NewRow()));
                rowSubstanceRow.ItemArray = new object[] {
                        null,
                        Name,
                        DateLastModif,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowSubstanceRow);
                return rowSubstanceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow FindByID(int ID) {
                return ((SubstanceRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SubstanceDataTable cln = ((SubstanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SubstanceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow NewSubstanceRow() {
                return ((SubstanceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SubstanceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SubstanceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubstanceRowChanged != null)) {
                    this.SubstanceRowChanged(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubstanceRowChanging != null)) {
                    this.SubstanceRowChanging(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubstanceRowDeleted != null)) {
                    this.SubstanceRowDeleted(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubstanceRowDeleting != null)) {
                    this.SubstanceRowDeleting(this, new SubstanceRowChangeEvent(((SubstanceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubstanceRow(SubstanceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubstanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitDataTable() {
                this.TableName = "Unit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow this[int index] {
                get {
                    return ((UnitRow)(this.Rows[index]));
                }
            }
            
            public event UnitRowChangeEventHandler UnitRowChanging;
            
            public event UnitRowChangeEventHandler UnitRowChanged;
            
            public event UnitRowChangeEventHandler UnitRowDeleting;
            
            public event UnitRowChangeEventHandler UnitRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitRow(UnitRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow AddUnitRow(string Name, System.DateTime DateLastModif, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, byte[] RowVersion) {
                UnitRow rowUnitRow = ((UnitRow)(this.NewRow()));
                rowUnitRow.ItemArray = new object[] {
                        null,
                        Name,
                        DateLastModif,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion};
                this.Rows.Add(rowUnitRow);
                return rowUnitRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow FindByID(int ID) {
                return ((UnitRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UnitDataTable cln = ((UnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UnitDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 10;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow NewUnitRow() {
                return ((UnitRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UnitRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UnitRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitRowChanged != null)) {
                    this.UnitRowChanged(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitRowChanging != null)) {
                    this.UnitRowChanging(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitRowDeleted != null)) {
                    this.UnitRowDeleted(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitRowDeleting != null)) {
                    this.UnitRowDeleting(this, new UnitRowChangeEvent(((UnitRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitRow(UnitRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ManufacturerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnCounrtyRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnDateUpdate;
            
            private System.Data.DataColumn columnCountryName;
            
            private System.Data.DataColumn columnrowguid;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManufacturerDataTable(bool initExpressions) {
                this.TableName = "Manufacturer";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManufacturerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ManufacturerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CounrtyRefColumn {
                get {
                    return this.columnCounrtyRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateUpdateColumn {
                get {
                    return this.columnDateUpdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow this[int index] {
                get {
                    return ((ManufacturerRow)(this.Rows[index]));
                }
            }
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowChanging;
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowChanged;
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowDeleting;
            
            public event ManufacturerRowChangeEventHandler ManufacturerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddManufacturerRow(ManufacturerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow AddManufacturerRow(string Name, CountryRow parentCountryRowByFK_Country_Manufacturer, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, byte[] RowVersion, System.DateTime DateUpdate, string CountryName, System.Guid rowguid) {
                ManufacturerRow rowManufacturerRow = ((ManufacturerRow)(this.NewRow()));
                rowManufacturerRow.ItemArray = new object[] {
                        null,
                        Name,
                        parentCountryRowByFK_Country_Manufacturer[0],
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion,
                        DateUpdate,
                        CountryName,
                        rowguid};
                this.Rows.Add(rowManufacturerRow);
                return rowManufacturerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow FindByID(int ID) {
                return ((ManufacturerRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ManufacturerDataTable cln = ((ManufacturerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ManufacturerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnCounrtyRef = base.Columns["CounrtyRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnDateUpdate = base.Columns["DateUpdate"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnrowguid = base.Columns["rowguid"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCounrtyRef = new System.Data.DataColumn("CounrtyRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCounrtyRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnDateUpdate = new System.Data.DataColumn("DateUpdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateUpdate);
                this.columnCountryName = new System.Data.DataColumn("CountryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnrowguid = new System.Data.DataColumn("rowguid", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnCounrtyRef.AllowDBNull = false;
                this.columnCounrtyRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnDateUpdate.ReadOnly = true;
                this.columnCountryName.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow NewManufacturerRow() {
                return ((ManufacturerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ManufacturerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ManufacturerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.DateUpdateColumn.Expression = "Max(DateLastModif)";
                this.CountryNameColumn.Expression = "Parent(FK_Country_Manufacturer).Name";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ManufacturerRowChanged != null)) {
                    this.ManufacturerRowChanged(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ManufacturerRowChanging != null)) {
                    this.ManufacturerRowChanging(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ManufacturerRowDeleted != null)) {
                    this.ManufacturerRowDeleted(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ManufacturerRowDeleting != null)) {
                    this.ManufacturerRowDeleting(this, new ManufacturerRowChangeEvent(((ManufacturerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveManufacturerRow(ManufacturerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ManufacturerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FarmGroupLevel2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnFarmGroupRef;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnFarmGroupName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2DataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupLevel2DataTable(bool initExpressions) {
                this.TableName = "FarmGroupLevel2";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupLevel2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FarmGroupLevel2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupRefColumn {
                get {
                    return this.columnFarmGroupRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FarmGroupNameColumn {
                get {
                    return this.columnFarmGroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row this[int index] {
                get {
                    return ((FarmGroupLevel2Row)(this.Rows[index]));
                }
            }
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowChanging;
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowChanged;
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowDeleting;
            
            public event FarmGroupLevel2RowChangeEventHandler FarmGroupLevel2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFarmGroupLevel2Row(FarmGroupLevel2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row AddFarmGroupLevel2Row(string Name, FarmGroupRow parentFarmGroupRowByFK_FarmGroup_FarmGroupLevel2, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, byte[] RowVersion, string FarmGroupName) {
                FarmGroupLevel2Row rowFarmGroupLevel2Row = ((FarmGroupLevel2Row)(this.NewRow()));
                rowFarmGroupLevel2Row.ItemArray = new object[] {
                        null,
                        Name,
                        parentFarmGroupRowByFK_FarmGroup_FarmGroupLevel2[0],
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion,
                        FarmGroupName};
                this.Rows.Add(rowFarmGroupLevel2Row);
                return rowFarmGroupLevel2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row FindByID(int ID) {
                return ((FarmGroupLevel2Row)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FarmGroupLevel2DataTable cln = ((FarmGroupLevel2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FarmGroupLevel2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnFarmGroupRef = base.Columns["FarmGroupRef"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnFarmGroupName = base.Columns["FarmGroupName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnFarmGroupRef = new System.Data.DataColumn("FarmGroupRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupRef);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnFarmGroupName = new System.Data.DataColumn("FarmGroupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFarmGroupName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnFarmGroupRef.AllowDBNull = false;
                this.columnFarmGroupRef.DefaultValue = ((int)(0));
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
                this.columnFarmGroupName.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row NewFarmGroupLevel2Row() {
                return ((FarmGroupLevel2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FarmGroupLevel2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FarmGroupLevel2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.FarmGroupNameColumn.Expression = "Parent(FK_FarmGroup_FarmGroupLevel2).Name";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FarmGroupLevel2RowChanged != null)) {
                    this.FarmGroupLevel2RowChanged(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FarmGroupLevel2RowChanging != null)) {
                    this.FarmGroupLevel2RowChanging(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FarmGroupLevel2RowDeleted != null)) {
                    this.FarmGroupLevel2RowDeleted(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FarmGroupLevel2RowDeleting != null)) {
                    this.FarmGroupLevel2RowDeleting(this, new FarmGroupLevel2RowChangeEvent(((FarmGroupLevel2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFarmGroupLevel2Row(FarmGroupLevel2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FarmGroupLevel2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrdersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTradePupletRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnDateOrder;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPrice;
            
            private System.Data.DataColumn columnReserved;
            
            private System.Data.DataColumn columnQuantityNow;
            
            private System.Data.DataColumn columnisClose;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnRowVersion;
            
            private static System.DateTime columnDateOrder_defaultValue = System.DateTime.Parse("01/01/2001 00:00:00");
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersDataTable() {
                this.TableName = "Orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrdersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePupletRefColumn {
                get {
                    return this.columnTradePupletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOrderColumn {
                get {
                    return this.columnDateOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReservedColumn {
                get {
                    return this.columnReserved;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityNowColumn {
                get {
                    return this.columnQuantityNow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isCloseColumn {
                get {
                    return this.columnisClose;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow AddOrdersRow(TradePutletRow parentTradePutletRowByTradePutlet_Orders, ReceiptDetailRow parentReceiptDetailRowByReceiptDetail_Orders, System.DateTime DateOrder, decimal Quantity, decimal Price, decimal Reserved, decimal QuantityNow, bool isClose, string Note, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate, System.DateTime DateLastModif, byte[] RowVersion) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                rowOrdersRow.ItemArray = new object[] {
                        null,
                        parentTradePutletRowByTradePutlet_Orders[0],
                        parentReceiptDetailRowByReceiptDetail_Orders[2],
                        DateOrder,
                        Quantity,
                        Price,
                        Reserved,
                        QuantityNow,
                        isClose,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        DateLastModif,
                        RowVersion};
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow FindByID(int ID) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTradePupletRef = base.Columns["TradePupletRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnDateOrder = base.Columns["DateOrder"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPrice = base.Columns["Price"];
                this.columnReserved = base.Columns["Reserved"];
                this.columnQuantityNow = base.Columns["QuantityNow"];
                this.columnisClose = base.Columns["isClose"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTradePupletRef = new System.Data.DataColumn("TradePupletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePupletRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnDateOrder = new System.Data.DataColumn("DateOrder", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOrder);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPrice = new System.Data.DataColumn("Price", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnReserved = new System.Data.DataColumn("Reserved", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReserved);
                this.columnQuantityNow = new System.Data.DataColumn("QuantityNow", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityNow);
                this.columnisClose = new System.Data.DataColumn("isClose", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisClose);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnTradePupletRef.AllowDBNull = false;
                this.columnProductRef.AllowDBNull = false;
                this.columnProductRef.DefaultValue = ((int)(0));
                this.columnDateOrder.AllowDBNull = false;
                this.columnDateOrder.DefaultValue = ((System.DateTime)(OrdersDataTable.columnDateOrder_defaultValue));
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = ((decimal)(0m));
                this.columnPrice.AllowDBNull = false;
                this.columnPrice.DefaultValue = ((decimal)(0m));
                this.columnReserved.AllowDBNull = false;
                this.columnReserved.DefaultValue = ((decimal)(0m));
                this.columnQuantityNow.AllowDBNull = false;
                this.columnQuantityNow.DefaultValue = ((decimal)(0m));
                this.columnisClose.AllowDBNull = false;
                this.columnisClose.DefaultValue = ((bool)(false));
                this.columnNote.AllowDBNull = false;
                this.columnNote.DefaultValue = ((string)("\'\'"));
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RemainsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnSeries;
            
            private System.Data.DataColumn columnUseByDate;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnQuantityRemains;
            
            private System.Data.DataColumn columnMainStockRef;
            
            private System.Data.DataColumn columnReceiptDetailRef;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            private System.Data.DataColumn columnManufacturerName;
            
            private System.Data.DataColumn columnCountryName;
            
            private System.Data.DataColumn columnSumRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemainsDataTable(bool initExpressions) {
                this.TableName = "Remains";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemainsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RemainsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesColumn {
                get {
                    return this.columnSeries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseByDateColumn {
                get {
                    return this.columnUseByDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityRemainsColumn {
                get {
                    return this.columnQuantityRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MainStockRefColumn {
                get {
                    return this.columnMainStockRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptDetailRefColumn {
                get {
                    return this.columnReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumRemainsColumn {
                get {
                    return this.columnSumRemains;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow this[int index] {
                get {
                    return ((RemainsRow)(this.Rows[index]));
                }
            }
            
            public event RemainsRowChangeEventHandler RemainsRowChanging;
            
            public event RemainsRowChangeEventHandler RemainsRowChanged;
            
            public event RemainsRowChangeEventHandler RemainsRowDeleting;
            
            public event RemainsRowChangeEventHandler RemainsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRemainsRow(RemainsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow AddRemainsRow(
                        System.DateTime DocDate, 
                        ProductRow parentProductRowByProduct_Remains, 
                        string Series, 
                        System.DateTime UseByDate, 
                        decimal PricePurchase, 
                        decimal QuantityRemains, 
                        int MainStockRef, 
                        ReceiptDetailRow parentReceiptDetailRowByReceiptDetail_Remains, 
                        decimal Quantity, 
                        System.DateTime DateLastModif, 
                        string AuthorLastModif, 
                        string ProductName, 
                        string ManufacturerRef, 
                        string ManufacturerName, 
                        string CountryName, 
                        decimal SumRemains) {
                RemainsRow rowRemainsRow = ((RemainsRow)(this.NewRow()));
                rowRemainsRow.ItemArray = new object[] {
                        DocDate,
                        parentProductRowByProduct_Remains[0],
                        Series,
                        UseByDate,
                        PricePurchase,
                        QuantityRemains,
                        MainStockRef,
                        parentReceiptDetailRowByReceiptDetail_Remains[0],
                        Quantity,
                        DateLastModif,
                        AuthorLastModif,
                        ProductName,
                        ManufacturerRef,
                        ManufacturerName,
                        CountryName,
                        SumRemains};
                this.Rows.Add(rowRemainsRow);
                return rowRemainsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow FindByReceiptDetailRef(int ReceiptDetailRef) {
                return ((RemainsRow)(this.Rows.Find(new object[] {
                            ReceiptDetailRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RemainsDataTable cln = ((RemainsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RemainsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDocDate = base.Columns["DocDate"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnSeries = base.Columns["Series"];
                this.columnUseByDate = base.Columns["UseByDate"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnQuantityRemains = base.Columns["QuantityRemains"];
                this.columnMainStockRef = base.Columns["MainStockRef"];
                this.columnReceiptDetailRef = base.Columns["ReceiptDetailRef"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnSumRemains = base.Columns["SumRemains"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnSeries = new System.Data.DataColumn("Series", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeries);
                this.columnUseByDate = new System.Data.DataColumn("UseByDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUseByDate);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnQuantityRemains = new System.Data.DataColumn("QuantityRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantityRemains);
                this.columnMainStockRef = new System.Data.DataColumn("MainStockRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainStockRef);
                this.columnReceiptDetailRef = new System.Data.DataColumn("ReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptDetailRef);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.columnManufacturerName = new System.Data.DataColumn("ManufacturerName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnCountryName = new System.Data.DataColumn("CountryName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnSumRemains = new System.Data.DataColumn("SumRemains", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumRemains);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReceiptDetailRef}, true));
                this.columnDocDate.AllowDBNull = false;
                this.columnProductRef.AllowDBNull = false;
                this.columnSeries.AllowDBNull = false;
                this.columnSeries.MaxLength = 15;
                this.columnUseByDate.AllowDBNull = false;
                this.columnPricePurchase.AllowDBNull = false;
                this.columnQuantityRemains.AllowDBNull = false;
                this.columnMainStockRef.AllowDBNull = false;
                this.columnReceiptDetailRef.AllowDBNull = false;
                this.columnReceiptDetailRef.Unique = true;
                this.columnQuantity.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnProductName.ReadOnly = true;
                this.columnSumRemains.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow NewRemainsRow() {
                return ((RemainsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RemainsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RemainsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ProductNameColumn.Expression = "Parent(Product_Remains).Name";
                this.SumRemainsColumn.Expression = "QuantityRemains*PricePurchase";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RemainsRowChanged != null)) {
                    this.RemainsRowChanged(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RemainsRowChanging != null)) {
                    this.RemainsRowChanging(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RemainsRowDeleted != null)) {
                    this.RemainsRowDeleted(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RemainsRowDeleting != null)) {
                    this.RemainsRowDeleting(this, new RemainsRowChangeEvent(((RemainsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRemainsRow(RemainsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RemainsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PricesPurchaseDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrganizationRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnOrganizationName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PricesPurchaseDataTable(bool initExpressions) {
                this.TableName = "PricesPurchase";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PricesPurchaseDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PricesPurchaseDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationRefColumn {
                get {
                    return this.columnOrganizationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganizationNameColumn {
                get {
                    return this.columnOrganizationName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow this[int index] {
                get {
                    return ((PricesPurchaseRow)(this.Rows[index]));
                }
            }
            
            public event PricesPurchaseRowChangeEventHandler PricesPurchaseRowChanging;
            
            public event PricesPurchaseRowChangeEventHandler PricesPurchaseRowChanged;
            
            public event PricesPurchaseRowChangeEventHandler PricesPurchaseRowDeleting;
            
            public event PricesPurchaseRowChangeEventHandler PricesPurchaseRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPricesPurchaseRow(PricesPurchaseRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow AddPricesPurchaseRow(OrganizationRow parentOrganizationRowByOrganization_PricesPurchase, ProductRow parentProductRowByProduct_PricesPurchase, decimal PricePurchase, System.DateTime Date, string OrganizationName) {
                PricesPurchaseRow rowPricesPurchaseRow = ((PricesPurchaseRow)(this.NewRow()));
                rowPricesPurchaseRow.ItemArray = new object[] {
                        parentOrganizationRowByOrganization_PricesPurchase[0],
                        parentProductRowByProduct_PricesPurchase[0],
                        PricePurchase,
                        Date,
                        OrganizationName};
                this.Rows.Add(rowPricesPurchaseRow);
                return rowPricesPurchaseRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PricesPurchaseDataTable cln = ((PricesPurchaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PricesPurchaseDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrganizationRef = base.Columns["OrganizationRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnDate = base.Columns["Date"];
                this.columnOrganizationName = base.Columns["OrganizationName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrganizationRef = new System.Data.DataColumn("OrganizationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnOrganizationName = new System.Data.DataColumn("OrganizationName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganizationName);
                this.columnOrganizationRef.AllowDBNull = false;
                this.columnProductRef.AllowDBNull = false;
                this.columnPricePurchase.AllowDBNull = false;
                this.columnOrganizationName.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow NewPricesPurchaseRow() {
                return ((PricesPurchaseRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PricesPurchaseRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PricesPurchaseRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.OrganizationNameColumn.Expression = "Parent(Organization_PricesPurchase).ShortNAme";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PricesPurchaseRowChanged != null)) {
                    this.PricesPurchaseRowChanged(this, new PricesPurchaseRowChangeEvent(((PricesPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PricesPurchaseRowChanging != null)) {
                    this.PricesPurchaseRowChanging(this, new PricesPurchaseRowChangeEvent(((PricesPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PricesPurchaseRowDeleted != null)) {
                    this.PricesPurchaseRowDeleted(this, new PricesPurchaseRowChangeEvent(((PricesPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PricesPurchaseRowDeleting != null)) {
                    this.PricesPurchaseRowDeleting(this, new PricesPurchaseRowChangeEvent(((PricesPurchaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePricesPurchaseRow(PricesPurchaseRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PricesPurchaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PeriodsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnStartDate;
            
            private System.Data.DataColumn columnClosedDate;
            
            private System.Data.DataColumn columnisClosed;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsDataTable() : 
                    this(false) {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PeriodsDataTable(bool initExpressions) {
                this.TableName = "Periods";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PeriodsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PeriodsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClosedDateColumn {
                get {
                    return this.columnClosedDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isClosedColumn {
                get {
                    return this.columnisClosed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow this[int index] {
                get {
                    return ((PeriodsRow)(this.Rows[index]));
                }
            }
            
            public event PeriodsRowChangeEventHandler PeriodsRowChanging;
            
            public event PeriodsRowChangeEventHandler PeriodsRowChanged;
            
            public event PeriodsRowChangeEventHandler PeriodsRowDeleting;
            
            public event PeriodsRowChangeEventHandler PeriodsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPeriodsRow(PeriodsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow AddPeriodsRow(System.DateTime StartDate, System.DateTime ClosedDate, bool isClosed, byte[] RowVersion, string Name) {
                PeriodsRow rowPeriodsRow = ((PeriodsRow)(this.NewRow()));
                rowPeriodsRow.ItemArray = new object[] {
                        null,
                        StartDate,
                        ClosedDate,
                        isClosed,
                        RowVersion,
                        Name};
                this.Rows.Add(rowPeriodsRow);
                return rowPeriodsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow FindByID(int ID) {
                return ((PeriodsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PeriodsDataTable cln = ((PeriodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PeriodsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnClosedDate = base.Columns["ClosedDate"];
                this.columnisClosed = base.Columns["isClosed"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnStartDate = new System.Data.DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnClosedDate = new System.Data.DataColumn("ClosedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClosedDate);
                this.columnisClosed = new System.Data.DataColumn("isClosed", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisClosed);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnStartDate.AllowDBNull = false;
                this.columnClosedDate.AllowDBNull = false;
                this.columnisClosed.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnName.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow NewPeriodsRow() {
                return ((PeriodsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PeriodsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PeriodsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.NameColumn.Expression = "StartDate+\' - \'+ClosedDate";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PeriodsRowChanged != null)) {
                    this.PeriodsRowChanged(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PeriodsRowChanging != null)) {
                    this.PeriodsRowChanging(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PeriodsRowDeleted != null)) {
                    this.PeriodsRowDeleted(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PeriodsRowDeleting != null)) {
                    this.PeriodsRowDeleting(this, new PeriodsRowChangeEvent(((PeriodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePeriodsRow(PeriodsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PeriodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkedInvoiceDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnInvoiceMasterRef;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnPricePurchase;
            
            private System.Data.DataColumn columnDiscountSum;
            
            private System.Data.DataColumn columnPurchaseNDS;
            
            private System.Data.DataColumn columnPriceRetail;
            
            private System.Data.DataColumn columnRetailNDS;
            
            private System.Data.DataColumn columnPriceRetailNDS;
            
            private System.Data.DataColumn columnLocalReceiptDetailRef;
            
            private System.Data.DataColumn columnRemoteInvoiceDetailRef;
            
            private System.Data.DataColumn columnExtra;
            
            private System.Data.DataColumn columnDiscount;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnRetailSum;
            
            private System.Data.DataColumn columnArticle;
            
            private System.Data.DataColumn columnHOST;
            
            private System.Data.DataColumn columnrowguid;
            
            private System.Data.DataColumn columnTradePutletRef;
            
            private System.Data.DataColumn columnProductRef;
            
            private System.Data.DataColumn columnManufacturerRef;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailDataTable() {
                this.TableName = "LinkedInvoiceDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedInvoiceDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkedInvoiceDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceMasterRefColumn {
                get {
                    return this.columnInvoiceMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PricePurchaseColumn {
                get {
                    return this.columnPricePurchase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountSumColumn {
                get {
                    return this.columnDiscountSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchaseNDSColumn {
                get {
                    return this.columnPurchaseNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailColumn {
                get {
                    return this.columnPriceRetail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailNDSColumn {
                get {
                    return this.columnRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceRetailNDSColumn {
                get {
                    return this.columnPriceRetailNDS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LocalReceiptDetailRefColumn {
                get {
                    return this.columnLocalReceiptDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceDetailRefColumn {
                get {
                    return this.columnRemoteInvoiceDetailRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RetailSumColumn {
                get {
                    return this.columnRetailSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArticleColumn {
                get {
                    return this.columnArticle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HOSTColumn {
                get {
                    return this.columnHOST;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePutletRefColumn {
                get {
                    return this.columnTradePutletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductRefColumn {
                get {
                    return this.columnProductRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturerRefColumn {
                get {
                    return this.columnManufacturerRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRow this[int index] {
                get {
                    return ((LinkedInvoiceDetailRow)(this.Rows[index]));
                }
            }
            
            public event LinkedInvoiceDetailRowChangeEventHandler LinkedInvoiceDetailRowChanging;
            
            public event LinkedInvoiceDetailRowChangeEventHandler LinkedInvoiceDetailRowChanged;
            
            public event LinkedInvoiceDetailRowChangeEventHandler LinkedInvoiceDetailRowDeleting;
            
            public event LinkedInvoiceDetailRowChangeEventHandler LinkedInvoiceDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkedInvoiceDetailRow(LinkedInvoiceDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRow AddLinkedInvoiceDetailRow(
                        int ID, 
                        int InvoiceMasterRef, 
                        decimal Quantity, 
                        decimal PricePurchase, 
                        decimal DiscountSum, 
                        decimal PurchaseNDS, 
                        decimal PriceRetail, 
                        decimal RetailNDS, 
                        decimal PriceRetailNDS, 
                        int LocalReceiptDetailRef, 
                        int RemoteInvoiceDetailRef, 
                        decimal Extra, 
                        decimal Discount, 
                        string Note, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        decimal RetailSum, 
                        int Article, 
                        string HOST, 
                        System.Guid rowguid, 
                        int TradePutletRef, 
                        int ProductRef, 
                        int ManufacturerRef) {
                LinkedInvoiceDetailRow rowLinkedInvoiceDetailRow = ((LinkedInvoiceDetailRow)(this.NewRow()));
                rowLinkedInvoiceDetailRow.ItemArray = new object[] {
                        ID,
                        InvoiceMasterRef,
                        Quantity,
                        PricePurchase,
                        DiscountSum,
                        PurchaseNDS,
                        PriceRetail,
                        RetailNDS,
                        PriceRetailNDS,
                        LocalReceiptDetailRef,
                        RemoteInvoiceDetailRef,
                        Extra,
                        Discount,
                        Note,
                        AuthorCreate,
                        AuthorLastModif,
                        DateLastModif,
                        DateCreate,
                        RowVersion,
                        RetailSum,
                        Article,
                        HOST,
                        rowguid,
                        TradePutletRef,
                        ProductRef,
                        ManufacturerRef};
                this.Rows.Add(rowLinkedInvoiceDetailRow);
                return rowLinkedInvoiceDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRow FindByrowguidTradePutletRef(System.Guid rowguid, int TradePutletRef) {
                return ((LinkedInvoiceDetailRow)(this.Rows.Find(new object[] {
                            rowguid,
                            TradePutletRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LinkedInvoiceDetailDataTable cln = ((LinkedInvoiceDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LinkedInvoiceDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnInvoiceMasterRef = base.Columns["InvoiceMasterRef"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnPricePurchase = base.Columns["PricePurchase"];
                this.columnDiscountSum = base.Columns["DiscountSum"];
                this.columnPurchaseNDS = base.Columns["PurchaseNDS"];
                this.columnPriceRetail = base.Columns["PriceRetail"];
                this.columnRetailNDS = base.Columns["RetailNDS"];
                this.columnPriceRetailNDS = base.Columns["PriceRetailNDS"];
                this.columnLocalReceiptDetailRef = base.Columns["LocalReceiptDetailRef"];
                this.columnRemoteInvoiceDetailRef = base.Columns["RemoteInvoiceDetailRef"];
                this.columnExtra = base.Columns["Extra"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnNote = base.Columns["Note"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnRetailSum = base.Columns["RetailSum"];
                this.columnArticle = base.Columns["Article"];
                this.columnHOST = base.Columns["HOST"];
                this.columnrowguid = base.Columns["rowguid"];
                this.columnTradePutletRef = base.Columns["TradePutletRef"];
                this.columnProductRef = base.Columns["ProductRef"];
                this.columnManufacturerRef = base.Columns["ManufacturerRef"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnInvoiceMasterRef = new System.Data.DataColumn("InvoiceMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceMasterRef);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnPricePurchase = new System.Data.DataColumn("PricePurchase", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPricePurchase);
                this.columnDiscountSum = new System.Data.DataColumn("DiscountSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscountSum);
                this.columnPurchaseNDS = new System.Data.DataColumn("PurchaseNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseNDS);
                this.columnPriceRetail = new System.Data.DataColumn("PriceRetail", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetail);
                this.columnRetailNDS = new System.Data.DataColumn("RetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailNDS);
                this.columnPriceRetailNDS = new System.Data.DataColumn("PriceRetailNDS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriceRetailNDS);
                this.columnLocalReceiptDetailRef = new System.Data.DataColumn("LocalReceiptDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocalReceiptDetailRef);
                this.columnRemoteInvoiceDetailRef = new System.Data.DataColumn("RemoteInvoiceDetailRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceDetailRef);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.columnDiscount = new System.Data.DataColumn("Discount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnRetailSum = new System.Data.DataColumn("RetailSum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRetailSum);
                this.columnArticle = new System.Data.DataColumn("Article", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticle);
                this.columnHOST = new System.Data.DataColumn("HOST", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOST);
                this.columnrowguid = new System.Data.DataColumn("rowguid", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.columnTradePutletRef = new System.Data.DataColumn("TradePutletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePutletRef);
                this.columnProductRef = new System.Data.DataColumn("ProductRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductRef);
                this.columnManufacturerRef = new System.Data.DataColumn("ManufacturerRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerRef);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrowguid,
                                this.columnTradePutletRef}, true));
                this.columnID.AllowDBNull = false;
                this.columnInvoiceMasterRef.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnPricePurchase.AllowDBNull = false;
                this.columnDiscountSum.AllowDBNull = false;
                this.columnPurchaseNDS.AllowDBNull = false;
                this.columnPriceRetail.AllowDBNull = false;
                this.columnRetailNDS.AllowDBNull = false;
                this.columnPriceRetailNDS.AllowDBNull = false;
                this.columnLocalReceiptDetailRef.AllowDBNull = false;
                this.columnRemoteInvoiceDetailRef.AllowDBNull = false;
                this.columnExtra.AllowDBNull = false;
                this.columnDiscount.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnRetailSum.AllowDBNull = false;
                this.columnArticle.AllowDBNull = false;
                this.columnHOST.AllowDBNull = false;
                this.columnHOST.MaxLength = 128;
                this.columnrowguid.AllowDBNull = false;
                this.columnTradePutletRef.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRow NewLinkedInvoiceDetailRow() {
                return ((LinkedInvoiceDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LinkedInvoiceDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LinkedInvoiceDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkedInvoiceDetailRowChanged != null)) {
                    this.LinkedInvoiceDetailRowChanged(this, new LinkedInvoiceDetailRowChangeEvent(((LinkedInvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkedInvoiceDetailRowChanging != null)) {
                    this.LinkedInvoiceDetailRowChanging(this, new LinkedInvoiceDetailRowChangeEvent(((LinkedInvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkedInvoiceDetailRowDeleted != null)) {
                    this.LinkedInvoiceDetailRowDeleted(this, new LinkedInvoiceDetailRowChangeEvent(((LinkedInvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkedInvoiceDetailRowDeleting != null)) {
                    this.LinkedInvoiceDetailRowDeleting(this, new LinkedInvoiceDetailRowChangeEvent(((LinkedInvoiceDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkedInvoiceDetailRow(LinkedInvoiceDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkedInvoiceDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkedInvoiceMasterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnNumCheck;
            
            private System.Data.DataColumn columnDate;
            
            private System.Data.DataColumn columnOrganisationRef;
            
            private System.Data.DataColumn columnDocumentTypeRef;
            
            private System.Data.DataColumn columnRemoteReceiptMasterRef;
            
            private System.Data.DataColumn columnRemoteInvoiceMasterRef;
            
            private System.Data.DataColumn columnIsReadOnly;
            
            private System.Data.DataColumn columnSum;
            
            private System.Data.DataColumn columnNds;
            
            private System.Data.DataColumn columnExtra;
            
            private System.Data.DataColumn columnDiscount;
            
            private System.Data.DataColumn columnNote;
            
            private System.Data.DataColumn columnPeriodsRef;
            
            private System.Data.DataColumn columnDateLastModif;
            
            private System.Data.DataColumn columnAuthorCreate;
            
            private System.Data.DataColumn columnAuthorLastModif;
            
            private System.Data.DataColumn columnDateCreate;
            
            private System.Data.DataColumn columnRowVersion;
            
            private System.Data.DataColumn columnRecalcSum;
            
            private System.Data.DataColumn columnHOST;
            
            private System.Data.DataColumn columnrowguid;
            
            private System.Data.DataColumn columnTradePutletRef;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterDataTable() {
                this.TableName = "LinkedInvoiceMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedInvoiceMasterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkedInvoiceMasterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumCheckColumn {
                get {
                    return this.columnNumCheck;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrganisationRefColumn {
                get {
                    return this.columnOrganisationRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocumentTypeRefColumn {
                get {
                    return this.columnDocumentTypeRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteReceiptMasterRefColumn {
                get {
                    return this.columnRemoteReceiptMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RemoteInvoiceMasterRefColumn {
                get {
                    return this.columnRemoteInvoiceMasterRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsReadOnlyColumn {
                get {
                    return this.columnIsReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SumColumn {
                get {
                    return this.columnSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NdsColumn {
                get {
                    return this.columnNds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraColumn {
                get {
                    return this.columnExtra;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PeriodsRefColumn {
                get {
                    return this.columnPeriodsRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateLastModifColumn {
                get {
                    return this.columnDateLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorCreateColumn {
                get {
                    return this.columnAuthorCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AuthorLastModifColumn {
                get {
                    return this.columnAuthorLastModif;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateCreateColumn {
                get {
                    return this.columnDateCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecalcSumColumn {
                get {
                    return this.columnRecalcSum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HOSTColumn {
                get {
                    return this.columnHOST;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn rowguidColumn {
                get {
                    return this.columnrowguid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TradePutletRefColumn {
                get {
                    return this.columnTradePutletRef;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRow this[int index] {
                get {
                    return ((LinkedInvoiceMasterRow)(this.Rows[index]));
                }
            }
            
            public event LinkedInvoiceMasterRowChangeEventHandler LinkedInvoiceMasterRowChanging;
            
            public event LinkedInvoiceMasterRowChangeEventHandler LinkedInvoiceMasterRowChanged;
            
            public event LinkedInvoiceMasterRowChangeEventHandler LinkedInvoiceMasterRowDeleting;
            
            public event LinkedInvoiceMasterRowChangeEventHandler LinkedInvoiceMasterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkedInvoiceMasterRow(LinkedInvoiceMasterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRow AddLinkedInvoiceMasterRow(
                        int ID, 
                        int Number, 
                        int NumCheck, 
                        System.DateTime Date, 
                        int OrganisationRef, 
                        int DocumentTypeRef, 
                        int RemoteReceiptMasterRef, 
                        int RemoteInvoiceMasterRef, 
                        bool IsReadOnly, 
                        decimal Sum, 
                        decimal Nds, 
                        decimal Extra, 
                        decimal Discount, 
                        string Note, 
                        int PeriodsRef, 
                        System.DateTime DateLastModif, 
                        string AuthorCreate, 
                        string AuthorLastModif, 
                        System.DateTime DateCreate, 
                        byte[] RowVersion, 
                        bool RecalcSum, 
                        string HOST, 
                        System.Guid rowguid, 
                        int TradePutletRef) {
                LinkedInvoiceMasterRow rowLinkedInvoiceMasterRow = ((LinkedInvoiceMasterRow)(this.NewRow()));
                rowLinkedInvoiceMasterRow.ItemArray = new object[] {
                        ID,
                        Number,
                        NumCheck,
                        Date,
                        OrganisationRef,
                        DocumentTypeRef,
                        RemoteReceiptMasterRef,
                        RemoteInvoiceMasterRef,
                        IsReadOnly,
                        Sum,
                        Nds,
                        Extra,
                        Discount,
                        Note,
                        PeriodsRef,
                        DateLastModif,
                        AuthorCreate,
                        AuthorLastModif,
                        DateCreate,
                        RowVersion,
                        RecalcSum,
                        HOST,
                        rowguid,
                        TradePutletRef};
                this.Rows.Add(rowLinkedInvoiceMasterRow);
                return rowLinkedInvoiceMasterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRow FindByrowguidTradePutletRef(System.Guid rowguid, int TradePutletRef) {
                return ((LinkedInvoiceMasterRow)(this.Rows.Find(new object[] {
                            rowguid,
                            TradePutletRef})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LinkedInvoiceMasterDataTable cln = ((LinkedInvoiceMasterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LinkedInvoiceMasterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnNumCheck = base.Columns["NumCheck"];
                this.columnDate = base.Columns["Date"];
                this.columnOrganisationRef = base.Columns["OrganisationRef"];
                this.columnDocumentTypeRef = base.Columns["DocumentTypeRef"];
                this.columnRemoteReceiptMasterRef = base.Columns["RemoteReceiptMasterRef"];
                this.columnRemoteInvoiceMasterRef = base.Columns["RemoteInvoiceMasterRef"];
                this.columnIsReadOnly = base.Columns["IsReadOnly"];
                this.columnSum = base.Columns["Sum"];
                this.columnNds = base.Columns["Nds"];
                this.columnExtra = base.Columns["Extra"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnNote = base.Columns["Note"];
                this.columnPeriodsRef = base.Columns["PeriodsRef"];
                this.columnDateLastModif = base.Columns["DateLastModif"];
                this.columnAuthorCreate = base.Columns["AuthorCreate"];
                this.columnAuthorLastModif = base.Columns["AuthorLastModif"];
                this.columnDateCreate = base.Columns["DateCreate"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnRecalcSum = base.Columns["RecalcSum"];
                this.columnHOST = base.Columns["HOST"];
                this.columnrowguid = base.Columns["rowguid"];
                this.columnTradePutletRef = base.Columns["TradePutletRef"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new System.Data.DataColumn("Number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnNumCheck = new System.Data.DataColumn("NumCheck", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumCheck);
                this.columnDate = new System.Data.DataColumn("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnOrganisationRef = new System.Data.DataColumn("OrganisationRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganisationRef);
                this.columnDocumentTypeRef = new System.Data.DataColumn("DocumentTypeRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentTypeRef);
                this.columnRemoteReceiptMasterRef = new System.Data.DataColumn("RemoteReceiptMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteReceiptMasterRef);
                this.columnRemoteInvoiceMasterRef = new System.Data.DataColumn("RemoteInvoiceMasterRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemoteInvoiceMasterRef);
                this.columnIsReadOnly = new System.Data.DataColumn("IsReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReadOnly);
                this.columnSum = new System.Data.DataColumn("Sum", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSum);
                this.columnNds = new System.Data.DataColumn("Nds", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNds);
                this.columnExtra = new System.Data.DataColumn("Extra", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtra);
                this.columnDiscount = new System.Data.DataColumn("Discount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnNote = new System.Data.DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnPeriodsRef = new System.Data.DataColumn("PeriodsRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPeriodsRef);
                this.columnDateLastModif = new System.Data.DataColumn("DateLastModif", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateLastModif);
                this.columnAuthorCreate = new System.Data.DataColumn("AuthorCreate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCreate);
                this.columnAuthorLastModif = new System.Data.DataColumn("AuthorLastModif", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastModif);
                this.columnDateCreate = new System.Data.DataColumn("DateCreate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreate);
                this.columnRowVersion = new System.Data.DataColumn("RowVersion", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnRecalcSum = new System.Data.DataColumn("RecalcSum", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecalcSum);
                this.columnHOST = new System.Data.DataColumn("HOST", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOST);
                this.columnrowguid = new System.Data.DataColumn("rowguid", typeof(System.Guid), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowguid);
                this.columnTradePutletRef = new System.Data.DataColumn("TradePutletRef", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTradePutletRef);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnrowguid,
                                this.columnTradePutletRef}, true));
                this.columnID.AllowDBNull = false;
                this.columnNumber.AllowDBNull = false;
                this.columnNumCheck.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnOrganisationRef.AllowDBNull = false;
                this.columnDocumentTypeRef.AllowDBNull = false;
                this.columnRemoteReceiptMasterRef.AllowDBNull = false;
                this.columnRemoteInvoiceMasterRef.AllowDBNull = false;
                this.columnIsReadOnly.AllowDBNull = false;
                this.columnSum.AllowDBNull = false;
                this.columnNds.AllowDBNull = false;
                this.columnExtra.AllowDBNull = false;
                this.columnDiscount.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 50;
                this.columnPeriodsRef.AllowDBNull = false;
                this.columnDateLastModif.AllowDBNull = false;
                this.columnAuthorCreate.AllowDBNull = false;
                this.columnAuthorCreate.MaxLength = 50;
                this.columnAuthorLastModif.AllowDBNull = false;
                this.columnAuthorLastModif.MaxLength = 50;
                this.columnDateCreate.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
                this.columnRecalcSum.AllowDBNull = false;
                this.columnHOST.AllowDBNull = false;
                this.columnHOST.MaxLength = 128;
                this.columnrowguid.AllowDBNull = false;
                this.columnTradePutletRef.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRow NewLinkedInvoiceMasterRow() {
                return ((LinkedInvoiceMasterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LinkedInvoiceMasterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LinkedInvoiceMasterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkedInvoiceMasterRowChanged != null)) {
                    this.LinkedInvoiceMasterRowChanged(this, new LinkedInvoiceMasterRowChangeEvent(((LinkedInvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkedInvoiceMasterRowChanging != null)) {
                    this.LinkedInvoiceMasterRowChanging(this, new LinkedInvoiceMasterRowChangeEvent(((LinkedInvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkedInvoiceMasterRowDeleted != null)) {
                    this.LinkedInvoiceMasterRowDeleted(this, new LinkedInvoiceMasterRowChangeEvent(((LinkedInvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkedInvoiceMasterRowDeleting != null)) {
                    this.LinkedInvoiceMasterRowDeleting(this, new LinkedInvoiceMasterRowChangeEvent(((LinkedInvoiceMasterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkedInvoiceMasterRow(LinkedInvoiceMasterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MDataSet ds = new MDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkedInvoiceMasterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CountryRow : System.Data.DataRow {
            
            private CountryDataTable tableCountry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCountry.IDColumn]));
                }
                set {
                    this[this.tableCountry.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCountry.NameColumn]));
                }
                set {
                    this[this.tableCountry.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableCountry.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableCountry.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCountry.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableCountry.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCountry.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableCountry.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableCountry.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableCountry.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableCountry.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableCountry.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableCountry.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableCountry.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableCountry.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableCountry.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableCountry.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow[] GetManufacturerRows() {
                return ((ManufacturerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Country_Manufacturer"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DocumentTypeRow : System.Data.DataRow {
            
            private DocumentTypeDataTable tableDocumentType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DocumentTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDocumentType = ((DocumentTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableDocumentType.IDColumn]));
                }
                set {
                    this[this.tableDocumentType.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableDocumentType.NameColumn]));
                }
                set {
                    this[this.tableDocumentType.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInternal {
                get {
                    return ((bool)(this[this.tableDocumentType.IsInternalColumn]));
                }
                set {
                    this[this.tableDocumentType.IsInternalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableDocumentType.AuthorCreateColumn]));
                }
                set {
                    this[this.tableDocumentType.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableDocumentType.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableDocumentType.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableDocumentType.DateCreateColumn]));
                }
                set {
                    this[this.tableDocumentType.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableDocumentType.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'DocumentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDocumentType.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableDocumentType.DateLastModifColumn]));
                }
                set {
                    this[this.tableDocumentType.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableDocumentType.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableDocumentType.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRows() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_DocumentType"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceDetailRow : System.Data.DataRow {
            
            private InvoiceDetailDataTable tableInvoiceDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceDetail = ((InvoiceDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableInvoiceDetail.IDColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.InvoiceMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.InvoiceMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.QuantityColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PricePurchaseColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetail {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PriceRetailColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PriceRetailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailNDS {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.RetailNDSColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.RetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetailNDS {
                get {
                    return ((decimal)(this[this.tableInvoiceDetail.PriceRetailNDSColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.PriceRetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalReceiptDetailRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.LocalReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.LocalReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceDetailRef {
                get {
                    return ((int)(this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.RemoteInvoiceDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceDetail.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableInvoiceDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableInvoiceDetail.NoteColumn]));
                }
                set {
                    this[this.tableInvoiceDetail.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceDetail.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Number\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.ManufacturerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CalcSum {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.CalcSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CalcSum\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.CalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentTypeRef {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.DocumentTypeRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DocumentTypeRef\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExtraPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.ExtraPercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtraPercent\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ExtraPercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsNds {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceDetail.IsNdsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsNds\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.IsNdsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceDetail.ExtraColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Extra\' in table \'InvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceDetail.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow InvoiceMasterRow {
                get {
                    return ((InvoiceMasterRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceDetail_InvoiceMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceDetail_InvoiceMaster"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow RemainsRow {
                get {
                    return ((RemainsRow)(this.GetParentRow(this.Table.ParentRelations["Remains_InvoiceDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Remains_InvoiceDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow ReceiptDetailRow {
                get {
                    return ((ReceiptDetailRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptDetail_InvoiceDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptDetail_InvoiceDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableInvoiceDetail.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableInvoiceDetail.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableInvoiceDetail.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableInvoiceDetail.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableInvoiceDetail.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableInvoiceDetail.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInvoiceDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableInvoiceDetail.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableInvoiceDetail.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableInvoiceDetail.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableInvoiceDetail.NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableInvoiceDetail.NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableInvoiceDetail.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableInvoiceDetail.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableInvoiceDetail.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableInvoiceDetail.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableInvoiceDetail.ManufacturerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableInvoiceDetail.ManufacturerNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcSumNull() {
                return this.IsNull(this.tableInvoiceDetail.CalcSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcSumNull() {
                this[this.tableInvoiceDetail.CalcSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeRefNull() {
                return this.IsNull(this.tableInvoiceDetail.DocumentTypeRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeRefNull() {
                this[this.tableInvoiceDetail.DocumentTypeRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraPercentNull() {
                return this.IsNull(this.tableInvoiceDetail.ExtraPercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraPercentNull() {
                this[this.tableInvoiceDetail.ExtraPercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNdsNull() {
                return this.IsNull(this.tableInvoiceDetail.IsNdsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNdsNull() {
                this[this.tableInvoiceDetail.IsNdsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraNull() {
                return this.IsNull(this.tableInvoiceDetail.ExtraColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraNull() {
                this[this.tableInvoiceDetail.ExtraColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoiceMasterRow : System.Data.DataRow {
            
            private InvoiceMasterDataTable tableInvoiceMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoiceMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoiceMaster = ((InvoiceMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableInvoiceMaster.IDColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableInvoiceMaster.NumberColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((System.DateTime)(this[this.tableInvoiceMaster.DateColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.OrganisationRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.OrganisationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteStockRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteStockRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteReceiptMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteReceiptMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteReceiptMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceMasterRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.RemoteInvoiceMasterRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.RemoteInvoiceMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableInvoiceMaster.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Sum {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.SumColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.SumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Nds {
                get {
                    return ((decimal)(this[this.tableInvoiceMaster.NdsColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NdsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceMaster.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceMaster.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceMaster.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableInvoiceMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableInvoiceMaster.NoteColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInvoiceMaster.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    return ((int)(this[this.tableInvoiceMaster.MainStockRefColumn]));
                }
                set {
                    this[this.tableInvoiceMaster.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecalcSum {
                get {
                    try {
                        return ((bool)(this[this.tableInvoiceMaster.RecalcSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecalcSum\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.RecalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    try {
                        return ((bool)(this[this.tableInvoiceMaster.IsNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsNDS\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDSMain {
                get {
                    try {
                        return ((bool)(this[this.tableInvoiceMaster.IsNDSMainColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsNDSMain\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.IsNDSMainColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TradePupletName {
                get {
                    if (this.IsTradePupletNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableInvoiceMaster.TradePupletNameColumn]));
                    }
                }
                set {
                    this[this.tableInvoiceMaster.TradePupletNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTRA {
                get {
                    try {
                        return ((string)(this[this.tableInvoiceMaster.EXTRAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EXTRA\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.EXTRAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExtraPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableInvoiceMaster.ExtraPercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtraPercent\' in table \'InvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoiceMaster.ExtraPercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_Stock_InvoiceMaster {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_Stock_InvoiceMaster"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Stock_InvoiceMaster"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_InvoiceMaster_StockMain {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceMaster_StockMain"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceMaster_StockMain"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow OrganizationRow {
                get {
                    return ((OrganizationRow)(this.GetParentRow(this.Table.ParentRelations["FK_InvoiceMaster_Organization"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_InvoiceMaster_Organization"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableInvoiceMaster.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableInvoiceMaster.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableInvoiceMaster.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableInvoiceMaster.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableInvoiceMaster.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableInvoiceMaster.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableInvoiceMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableInvoiceMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableInvoiceMaster.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableInvoiceMaster.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecalcSumNull() {
                return this.IsNull(this.tableInvoiceMaster.RecalcSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecalcSumNull() {
                this[this.tableInvoiceMaster.RecalcSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNDSNull() {
                return this.IsNull(this.tableInvoiceMaster.IsNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNDSNull() {
                this[this.tableInvoiceMaster.IsNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNDSMainNull() {
                return this.IsNull(this.tableInvoiceMaster.IsNDSMainColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNDSMainNull() {
                this[this.tableInvoiceMaster.IsNDSMainColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTradePupletNameNull() {
                return this.IsNull(this.tableInvoiceMaster.TradePupletNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTradePupletNameNull() {
                this[this.tableInvoiceMaster.TradePupletNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTRANull() {
                return this.IsNull(this.tableInvoiceMaster.EXTRAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTRANull() {
                this[this.tableInvoiceMaster.EXTRAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraPercentNull() {
                return this.IsNull(this.tableInvoiceMaster.ExtraPercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraPercentNull() {
                this[this.tableInvoiceMaster.ExtraPercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceDetail_InvoiceMaster"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrganizationRow : System.Data.DataRow {
            
            private OrganizationDataTable tableOrganization;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrganizationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrganization = ((OrganizationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOrganization.IDColumn]));
                }
                set {
                    this[this.tableOrganization.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortName {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.ShortNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ShortName\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.ShortNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Director {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.DirectorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Director\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.DirectorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adress {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.AdressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Adress\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.AdressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address_jur {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.Address_jurColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address_jur\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.Address_jurColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OKPO {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.OKPOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OKPO\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.OKPOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.BankNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankName\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.BankNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankMFO {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.BankMFOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankMFO\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.BankMFOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INN {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.INNColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'INN\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.INNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumSvid {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.NumSvidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumSvid\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.NumSvidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumSvidChp {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.NumSvidChpColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumSvidChp\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.NumSvidChpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PassChp {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.PassChpColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PassChp\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.PassChpColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Phone\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string License {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.LicenseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'License\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.LicenseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.NoteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Note\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrganization.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableOrganization.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankRS {
                get {
                    try {
                        return ((string)(this[this.tableOrganization.BankRSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BankRS\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.BankRSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrganization.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateUpdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrganization.DateUpdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateUpdate\' in table \'Organization\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrganization.DateUpdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableOrganization.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableOrganization.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShortNameNull() {
                return this.IsNull(this.tableOrganization.ShortNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShortNameNull() {
                this[this.tableOrganization.ShortNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectorNull() {
                return this.IsNull(this.tableOrganization.DirectorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectorNull() {
                this[this.tableOrganization.DirectorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdressNull() {
                return this.IsNull(this.tableOrganization.AdressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdressNull() {
                this[this.tableOrganization.AdressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress_jurNull() {
                return this.IsNull(this.tableOrganization.Address_jurColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress_jurNull() {
                this[this.tableOrganization.Address_jurColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOKPONull() {
                return this.IsNull(this.tableOrganization.OKPOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOKPONull() {
                this[this.tableOrganization.OKPOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankNameNull() {
                return this.IsNull(this.tableOrganization.BankNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankNameNull() {
                this[this.tableOrganization.BankNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankMFONull() {
                return this.IsNull(this.tableOrganization.BankMFOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankMFONull() {
                this[this.tableOrganization.BankMFOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINNNull() {
                return this.IsNull(this.tableOrganization.INNColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINNNull() {
                this[this.tableOrganization.INNColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumSvidNull() {
                return this.IsNull(this.tableOrganization.NumSvidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumSvidNull() {
                this[this.tableOrganization.NumSvidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumSvidChpNull() {
                return this.IsNull(this.tableOrganization.NumSvidChpColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumSvidChpNull() {
                this[this.tableOrganization.NumSvidChpColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPassChpNull() {
                return this.IsNull(this.tableOrganization.PassChpColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPassChpNull() {
                this[this.tableOrganization.PassChpColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableOrganization.PhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableOrganization.PhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseNull() {
                return this.IsNull(this.tableOrganization.LicenseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseNull() {
                this[this.tableOrganization.LicenseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableOrganization.NoteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableOrganization.NoteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableOrganization.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableOrganization.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableOrganization.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableOrganization.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableOrganization.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableOrganization.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableOrganization.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableOrganization.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankRSNull() {
                return this.IsNull(this.tableOrganization.BankRSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankRSNull() {
                this[this.tableOrganization.BankRSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableOrganization.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableOrganization.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateUpdateNull() {
                return this.IsNull(this.tableOrganization.DateUpdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateUpdateNull() {
                this[this.tableOrganization.DateUpdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow[] GetInvoiceMasterRows() {
                return ((InvoiceMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceMaster_Organization"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRows() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Organization"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow[] GetPricesPurchaseRows() {
                return ((PricesPurchaseRow[])(base.GetChildRows(this.Table.ChildRelations["Organization_PricesPurchase"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptRemainsRow : System.Data.DataRow {
            
            private ReceiptRemainsDataTable tableReceiptRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptRemainsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptRemains = ((ReceiptRemainsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptDetailRef {
                get {
                    return ((int)(this[this.tableReceiptRemains.ReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableReceiptRemains.ReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityReceipt {
                get {
                    return ((decimal)(this[this.tableReceiptRemains.QuantityReceiptColumn]));
                }
                set {
                    this[this.tableReceiptRemains.QuantityReceiptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityRemains {
                get {
                    return ((decimal)(this[this.tableReceiptRemains.QuantityRemainsColumn]));
                }
                set {
                    this[this.tableReceiptRemains.QuantityRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableReceiptRemains.AuthorCreateColumn]));
                }
                set {
                    this[this.tableReceiptRemains.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableReceiptRemains.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableReceiptRemains.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptRemains.DateCreateColumn]));
                }
                set {
                    this[this.tableReceiptRemains.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptRemains.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptRemains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptRemains.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow ReceiptDetailRow {
                get {
                    return ((ReceiptDetailRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptRemains_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptRemains_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptRemains.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptRemains.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StockRow : System.Data.DataRow {
            
            private StockDataTable tableStock;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StockRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStock = ((StockDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableStock.IDColumn]));
                }
                set {
                    this[this.tableStock.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableStock.NameColumn]));
                }
                set {
                    this[this.tableStock.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableStock.IsNDSColumn]));
                }
                set {
                    this[this.tableStock.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePutletRef {
                get {
                    return ((int)(this[this.tableStock.TradePutletRefColumn]));
                }
                set {
                    this[this.tableStock.TradePutletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableStock.AuthorCreateColumn]));
                }
                set {
                    this[this.tableStock.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableStock.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableStock.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableStock.DateCreateColumn]));
                }
                set {
                    this[this.tableStock.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableStock.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Stock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStock.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isLocal {
                get {
                    try {
                        return ((bool)(this[this.tableStock.isLocalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'isLocal\' in table \'Stock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStock.isLocalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TradePupletName {
                get {
                    try {
                        return ((string)(this[this.tableStock.TradePupletNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TradePupletName\' in table \'Stock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStock.TradePupletNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow TradePutletRow {
                get {
                    return ((TradePutletRow)(this.GetParentRow(this.Table.ParentRelations["TradePutlet_Stock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TradePutlet_Stock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableStock.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableStock.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisLocalNull() {
                return this.IsNull(this.tableStock.isLocalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisLocalNull() {
                this[this.tableStock.isLocalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTradePupletNameNull() {
                return this.IsNull(this.tableStock.TradePupletNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTradePupletNameNull() {
                this[this.tableStock.TradePupletNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow[] GetInvoiceMasterRowsByFK_Stock_InvoiceMaster() {
                return ((InvoiceMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Stock_InvoiceMaster"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow[] GetInvoiceMasterRowsByFK_InvoiceMaster_StockMain() {
                return ((InvoiceMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_InvoiceMaster_StockMain"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow[] GetReceiptMasterRows() {
                return ((ReceiptMasterRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptMaster_Stock"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TradePutletRow : System.Data.DataRow {
            
            private TradePutletDataTable tableTradePutlet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradePutletRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTradePutlet = ((TradePutletDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableTradePutlet.IDColumn]));
                }
                set {
                    this[this.tableTradePutlet.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTradePutlet.NameColumn]));
                }
                set {
                    this[this.tableTradePutlet.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableTradePutlet.AuthorCreateColumn]));
                }
                set {
                    this[this.tableTradePutlet.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableTradePutlet.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableTradePutlet.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableTradePutlet.DateCreateColumn]));
                }
                set {
                    this[this.tableTradePutlet.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableTradePutlet.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'TradePutlet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradePutlet.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    return ((string)(this[this.tableTradePutlet.IPColumn]));
                }
                set {
                    this[this.tableTradePutlet.IPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adress {
                get {
                    return ((string)(this[this.tableTradePutlet.AdressColumn]));
                }
                set {
                    this[this.tableTradePutlet.AdressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableTradePutlet.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableTradePutlet.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(base.GetChildRows(this.Table.ChildRelations["TradePutlet_Orders"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow[] GetStockRows() {
                return ((StockRow[])(base.GetChildRows(this.Table.ChildRelations["TradePutlet_Stock"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptMasterRow : System.Data.DataRow {
            
            private ReceiptMasterDataTable tableReceiptMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptMaster = ((ReceiptMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptMaster.IDColumn]));
                }
                set {
                    this[this.tableReceiptMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableReceiptMaster.NumberColumn]));
                }
                set {
                    this[this.tableReceiptMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableReceiptMaster.NoteColumn]));
                }
                set {
                    this[this.tableReceiptMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptMaster.DocDateColumn]));
                }
                set {
                    this[this.tableReceiptMaster.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganizationRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.OrganizationRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.OrganizationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.MainStockRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderStockRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.SenderStockRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SenderStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SenderInvoiceRef {
                get {
                    return ((int)(this[this.tableReceiptMaster.SenderInvoiceRefColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SenderInvoiceRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesSum {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.SalesSumColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SalesSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchSum {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.PurchSumColumn]));
                }
                set {
                    this[this.tableReceiptMaster.PurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchNDS {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.PurchNDSColumn]));
                }
                set {
                    this[this.tableReceiptMaster.PurchNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesNDS {
                get {
                    return ((decimal)(this[this.tableReceiptMaster.SalesNDSColumn]));
                }
                set {
                    this[this.tableReceiptMaster.SalesNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableReceiptMaster.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableReceiptMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    if (this.IsAuthorCreateNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableReceiptMaster.AuthorCreateColumn]));
                    }
                }
                set {
                    this[this.tableReceiptMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableReceiptMaster.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptMaster.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecalcSum {
                get {
                    return ((bool)(this[this.tableReceiptMaster.RecalcSumColumn]));
                }
                set {
                    this[this.tableReceiptMaster.RecalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrganizationName {
                get {
                    try {
                        return ((string)(this[this.tableReceiptMaster.OrganizationNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrganizationName\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.OrganizationNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CalcPurchSum {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptMaster.CalcPurchSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CalcPurchSum\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.CalcPurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    try {
                        return ((bool)(this[this.tableReceiptMaster.IsNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsNDS\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateUpdateDetail {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptMaster.DateUpdateDetailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateUpdateDetail\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.DateUpdateDetailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptMaster.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'ReceiptMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptMaster.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow DocumentTypeRow {
                get {
                    return ((DocumentTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_DocumentType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_DocumentType"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow OrganizationRow {
                get {
                    return ((OrganizationRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Organization"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Organization"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow StockRowByFK_ReceiptMaster_Stock {
                get {
                    return ((StockRow)(this.GetParentRow(this.Table.ParentRelations["FK_ReceiptMaster_Stock"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ReceiptMaster_Stock"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableReceiptMaster.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableReceiptMaster.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableReceiptMaster.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableReceiptMaster.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableReceiptMaster.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableReceiptMaster.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganizationNameNull() {
                return this.IsNull(this.tableReceiptMaster.OrganizationNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganizationNameNull() {
                this[this.tableReceiptMaster.OrganizationNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcPurchSumNull() {
                return this.IsNull(this.tableReceiptMaster.CalcPurchSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcPurchSumNull() {
                this[this.tableReceiptMaster.CalcPurchSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNDSNull() {
                return this.IsNull(this.tableReceiptMaster.IsNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNDSNull() {
                this[this.tableReceiptMaster.IsNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateUpdateDetailNull() {
                return this.IsNull(this.tableReceiptMaster.DateUpdateDetailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateUpdateDetailNull() {
                this[this.tableReceiptMaster.DateUpdateDetailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableReceiptMaster.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableReceiptMaster.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptMaster_ReceiptDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReceiptDetailRow : System.Data.DataRow {
            
            private ReceiptDetailDataTable tableReceiptDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReceiptDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReceiptDetail = ((ReceiptDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableReceiptDetail.IDColumn]));
                }
                set {
                    this[this.tableReceiptDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptMasterRef {
                get {
                    return ((int)(this[this.tableReceiptDetail.ReceiptMasterRefColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ReceiptMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tableReceiptDetail.ProductRefColumn]));
                }
                set {
                    this[this.tableReceiptDetail.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    return ((string)(this[this.tableReceiptDetail.SeriesColumn]));
                }
                set {
                    this[this.tableReceiptDetail.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    return ((System.DateTime)(this[this.tableReceiptDetail.UseByDateColumn]));
                }
                set {
                    this[this.tableReceiptDetail.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.QuantityColumn]));
                }
                set {
                    this[this.tableReceiptDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableReceiptDetail.PricePurchaseColumn]));
                }
                set {
                    this[this.tableReceiptDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchSum {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.PurchSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchSum\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.PurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.PurchNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchNDS\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.PurchNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesNDS {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.SalesNDSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SalesNDS\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.SalesNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.SalesPriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SalesPrice\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.SalesPriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SalesSum {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.SalesSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SalesSum\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.SalesSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceDetailRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptDetail.InvoiceDetailRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InvoiceDetailRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.InvoiceDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptDetail.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableReceiptDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.NoteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Note\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableReceiptDetail.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CalcPurchSum {
                get {
                    try {
                        return ((decimal)(this[this.tableReceiptDetail.CalcPurchSumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CalcPurchSum\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.CalcPurchSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptDetail.OrganisationRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrganisationRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.OrganisationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.ManufacturerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentTypeRef {
                get {
                    try {
                        return ((string)(this[this.tableReceiptDetail.DocumentTypeRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DocumentTypeRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerRef {
                get {
                    try {
                        return ((int)(this[this.tableReceiptDetail.ManufacturerRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerRef\' in table \'ReceiptDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReceiptDetail.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow ManufacturerRow {
                get {
                    return ((ManufacturerRow)(this.GetParentRow(this.Table.ParentRelations["FK_Manufacturer_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Manufacturer_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow ReceiptMasterRow {
                get {
                    return ((ReceiptMasterRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptMaster_ReceiptDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptMaster_ReceiptDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchSumNull() {
                return this.IsNull(this.tableReceiptDetail.PurchSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchSumNull() {
                this[this.tableReceiptDetail.PurchSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchNDSNull() {
                return this.IsNull(this.tableReceiptDetail.PurchNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchNDSNull() {
                this[this.tableReceiptDetail.PurchNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNDSNull() {
                return this.IsNull(this.tableReceiptDetail.SalesNDSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNDSNull() {
                this[this.tableReceiptDetail.SalesNDSColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesPriceNull() {
                return this.IsNull(this.tableReceiptDetail.SalesPriceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesPriceNull() {
                this[this.tableReceiptDetail.SalesPriceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesSumNull() {
                return this.IsNull(this.tableReceiptDetail.SalesSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesSumNull() {
                this[this.tableReceiptDetail.SalesSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceDetailRefNull() {
                return this.IsNull(this.tableReceiptDetail.InvoiceDetailRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceDetailRefNull() {
                this[this.tableReceiptDetail.InvoiceDetailRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableReceiptDetail.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableReceiptDetail.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableReceiptDetail.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableReceiptDetail.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableReceiptDetail.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableReceiptDetail.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableReceiptDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableReceiptDetail.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableReceiptDetail.NoteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableReceiptDetail.NoteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableReceiptDetail.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableReceiptDetail.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCalcPurchSumNull() {
                return this.IsNull(this.tableReceiptDetail.CalcPurchSumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCalcPurchSumNull() {
                this[this.tableReceiptDetail.CalcPurchSumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganisationRefNull() {
                return this.IsNull(this.tableReceiptDetail.OrganisationRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganisationRefNull() {
                this[this.tableReceiptDetail.OrganisationRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableReceiptDetail.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableReceiptDetail.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableReceiptDetail.ManufacturerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableReceiptDetail.ManufacturerNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentTypeRefNull() {
                return this.IsNull(this.tableReceiptDetail.DocumentTypeRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentTypeRefNull() {
                this[this.tableReceiptDetail.DocumentTypeRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerRefNull() {
                return this.IsNull(this.tableReceiptDetail.ManufacturerRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerRefNull() {
                this[this.tableReceiptDetail.ManufacturerRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow[] GetReceiptRemainsRows() {
                return ((ReceiptRemainsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ReceiptRemains_ReceiptDetail"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptDetail_Orders"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow[] GetPricesPurchaseRows() {
                return ((PricesPurchaseRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptDetail_PricesPurchase"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptDetail_InvoiceDetail"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow[] GetRemainsRows() {
                return ((RemainsRow[])(base.GetChildRows(this.Table.ChildRelations["ReceiptDetail_Remains"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StorageConditionRow : System.Data.DataRow {
            
            private StorageConditionDataTable tableStorageCondition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StorageConditionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStorageCondition = ((StorageConditionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableStorageCondition.IDColumn]));
                }
                set {
                    this[this.tableStorageCondition.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableStorageCondition.NameColumn]));
                }
                set {
                    this[this.tableStorageCondition.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableStorageCondition.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableStorageCondition.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableStorageCondition.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableStorageCondition.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableStorageCondition.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateUpdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableStorageCondition.DateUpdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateUpdate\' in table \'StorageCondition\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStorageCondition.DateUpdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableStorageCondition.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableStorageCondition.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableStorageCondition.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableStorageCondition.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableStorageCondition.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableStorageCondition.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableStorageCondition.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableStorageCondition.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableStorageCondition.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableStorageCondition.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateUpdateNull() {
                return this.IsNull(this.tableStorageCondition.DateUpdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateUpdateNull() {
                this[this.tableStorageCondition.DateUpdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["StorageCondition_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductRow : System.Data.DataRow {
            
            private ProductDataTable tableProduct;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct = ((ProductDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableProduct.IDColumn]));
                }
                set {
                    this[this.tableProduct.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProduct.NameColumn]));
                }
                set {
                    this[this.tableProduct.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmallName {
                get {
                    return ((string)(this[this.tableProduct.SmallNameColumn]));
                }
                set {
                    this[this.tableProduct.SmallNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceManufact {
                get {
                    return ((decimal)(this[this.tableProduct.PriceManufactColumn]));
                }
                set {
                    this[this.tableProduct.PriceManufactColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitRef {
                get {
                    return ((int)(this[this.tableProduct.UnitRefColumn]));
                }
                set {
                    this[this.tableProduct.UnitRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackingRef {
                get {
                    return ((int)(this[this.tableProduct.PackingRefColumn]));
                }
                set {
                    this[this.tableProduct.PackingRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StorageConditionRef {
                get {
                    return ((int)(this[this.tableProduct.StorageConditionRefColumn]));
                }
                set {
                    this[this.tableProduct.StorageConditionRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubstanceRef {
                get {
                    return ((int)(this[this.tableProduct.SubstanceRefColumn]));
                }
                set {
                    this[this.tableProduct.SubstanceRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FarmGrouplevel2Ref {
                get {
                    return ((int)(this[this.tableProduct.FarmGrouplevel2RefColumn]));
                }
                set {
                    this[this.tableProduct.FarmGrouplevel2RefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecept {
                get {
                    return ((bool)(this[this.tableProduct.IsReceptColumn]));
                }
                set {
                    this[this.tableProduct.IsReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOneRecept {
                get {
                    return ((bool)(this[this.tableProduct.IsOneReceptColumn]));
                }
                set {
                    this[this.tableProduct.IsOneReceptColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short MinDivisor {
                get {
                    return ((short)(this[this.tableProduct.MinDivisorColumn]));
                }
                set {
                    this[this.tableProduct.MinDivisorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNDS {
                get {
                    return ((bool)(this[this.tableProduct.IsNDSColumn]));
                }
                set {
                    this[this.tableProduct.IsNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldKol {
                get {
                    return ((int)(this[this.tableProduct.OldKolColumn]));
                }
                set {
                    this[this.tableProduct.OldKolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldKod {
                get {
                    return ((int)(this[this.tableProduct.OldKodColumn]));
                }
                set {
                    this[this.tableProduct.OldKodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.OldNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OldName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.OldNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableProduct.NoteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Note\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableProduct.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableProduct.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableProduct.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableProduct.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableProduct.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.FarmGroupNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FarmGroupName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.FarmGroupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackingName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.PackingNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PackingName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.PackingNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StorageConditionName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.StorageConditionNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StorageConditionName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.StorageConditionNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupLevel2 {
                get {
                    try {
                        return ((string)(this[this.tableProduct.FarmGroupLevel2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FarmGroupLevel2\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.FarmGroupLevel2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.UnitNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UnitName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.UnitNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubstanceName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.SubstanceNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SubstanceName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.SubstanceNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHide {
                get {
                    return ((bool)(this[this.tableProduct.IsHideColumn]));
                }
                set {
                    this[this.tableProduct.IsHideColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row FarmGroupLevel2Row {
                get {
                    return ((FarmGroupLevel2Row)(this.GetParentRow(this.Table.ParentRelations["FK_FarmGroupLevel2_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FarmGroupLevel2_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow UnitRow {
                get {
                    return ((UnitRow)(this.GetParentRow(this.Table.ParentRelations["FK_Unit_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Unit_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow SubstanceRow {
                get {
                    return ((SubstanceRow)(this.GetParentRow(this.Table.ParentRelations["FK_Substance_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Substance_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow StorageConditionRow {
                get {
                    return ((StorageConditionRow)(this.GetParentRow(this.Table.ParentRelations["StorageCondition_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StorageCondition_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow PackingRow {
                get {
                    return ((PackingRow)(this.GetParentRow(this.Table.ParentRelations["FK_Packing_Product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Packing_Product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldNameNull() {
                return this.IsNull(this.tableProduct.OldNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldNameNull() {
                this[this.tableProduct.OldNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableProduct.NoteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableProduct.NoteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableProduct.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableProduct.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableProduct.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableProduct.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableProduct.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableProduct.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableProduct.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableProduct.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableProduct.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableProduct.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmGroupNameNull() {
                return this.IsNull(this.tableProduct.FarmGroupNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFarmGroupNameNull() {
                this[this.tableProduct.FarmGroupNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackingNameNull() {
                return this.IsNull(this.tableProduct.PackingNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackingNameNull() {
                this[this.tableProduct.PackingNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStorageConditionNameNull() {
                return this.IsNull(this.tableProduct.StorageConditionNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStorageConditionNameNull() {
                this[this.tableProduct.StorageConditionNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmGroupLevel2Null() {
                return this.IsNull(this.tableProduct.FarmGroupLevel2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFarmGroupLevel2Null() {
                this[this.tableProduct.FarmGroupLevel2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNameNull() {
                return this.IsNull(this.tableProduct.UnitNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNameNull() {
                this[this.tableProduct.UnitNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubstanceNameNull() {
                return this.IsNull(this.tableProduct.SubstanceNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubstanceNameNull() {
                this[this.tableProduct.SubstanceNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow[] GetRemainsRows() {
                return ((RemainsRow[])(base.GetChildRows(this.Table.ChildRelations["Product_Remains"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(base.GetChildRows(this.Table.ChildRelations["Product_Orders"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow[] GetPricesPurchaseRows() {
                return ((PricesPurchaseRow[])(base.GetChildRows(this.Table.ChildRelations["Product_PricesPurchase"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["Product_ReceiptDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FarmGroupRow : System.Data.DataRow {
            
            private FarmGroupDataTable tableFarmGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFarmGroup = ((FarmGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFarmGroup.IDColumn]));
                }
                set {
                    this[this.tableFarmGroup.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFarmGroup.NameColumn]));
                }
                set {
                    this[this.tableFarmGroup.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableFarmGroup.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'FarmGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroup.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableFarmGroup.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'FarmGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroup.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFarmGroup.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'FarmGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroup.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFarmGroup.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'FarmGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroup.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableFarmGroup.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'FarmGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroup.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableFarmGroup.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableFarmGroup.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableFarmGroup.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableFarmGroup.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableFarmGroup.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableFarmGroup.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableFarmGroup.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableFarmGroup.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableFarmGroup.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableFarmGroup.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row[] GetFarmGroupLevel2Rows() {
                return ((FarmGroupLevel2Row[])(base.GetChildRows(this.Table.ChildRelations["FK_FarmGroup_FarmGroupLevel2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PackingRow : System.Data.DataRow {
            
            private PackingDataTable tablePacking;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PackingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePacking = ((PackingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePacking.IDColumn]));
                }
                set {
                    this[this.tablePacking.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tablePacking.NameColumn]));
                }
                set {
                    this[this.tablePacking.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tablePacking.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Packing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePacking.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tablePacking.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Packing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePacking.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePacking.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Packing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePacking.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePacking.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Packing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePacking.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tablePacking.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Packing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePacking.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tablePacking.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tablePacking.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tablePacking.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tablePacking.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tablePacking.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tablePacking.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tablePacking.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tablePacking.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePacking.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tablePacking.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Packing_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubstanceRow : System.Data.DataRow {
            
            private SubstanceDataTable tableSubstance;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubstanceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubstance = ((SubstanceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableSubstance.IDColumn]));
                }
                set {
                    this[this.tableSubstance.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSubstance.NameColumn]));
                }
                set {
                    this[this.tableSubstance.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSubstance.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubstance.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableSubstance.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubstance.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableSubstance.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubstance.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSubstance.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubstance.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableSubstance.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Substance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubstance.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableSubstance.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableSubstance.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableSubstance.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableSubstance.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableSubstance.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableSubstance.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableSubstance.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableSubstance.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableSubstance.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableSubstance.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Substance_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitRow : System.Data.DataRow {
            
            private UnitDataTable tableUnit;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnit = ((UnitDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableUnit.IDColumn]));
                }
                set {
                    this[this.tableUnit.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUnit.NameColumn]));
                }
                set {
                    this[this.tableUnit.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUnit.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Unit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnit.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableUnit.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Unit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnit.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableUnit.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Unit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnit.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableUnit.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Unit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnit.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableUnit.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Unit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnit.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableUnit.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableUnit.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableUnit.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableUnit.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableUnit.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableUnit.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableUnit.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableUnit.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableUnit.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableUnit.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Unit_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ManufacturerRow : System.Data.DataRow {
            
            private ManufacturerDataTable tableManufacturer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManufacturerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableManufacturer = ((ManufacturerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableManufacturer.IDColumn]));
                }
                set {
                    this[this.tableManufacturer.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableManufacturer.NameColumn]));
                }
                set {
                    this[this.tableManufacturer.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CounrtyRef {
                get {
                    return ((int)(this[this.tableManufacturer.CounrtyRefColumn]));
                }
                set {
                    this[this.tableManufacturer.CounrtyRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableManufacturer.AuthorCreateColumn]));
                }
                set {
                    this[this.tableManufacturer.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableManufacturer.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableManufacturer.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableManufacturer.DateLastModifColumn]));
                }
                set {
                    this[this.tableManufacturer.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableManufacturer.DateCreateColumn]));
                }
                set {
                    this[this.tableManufacturer.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableManufacturer.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Manufacturer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManufacturer.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateUpdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableManufacturer.DateUpdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateUpdate\' in table \'Manufacturer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManufacturer.DateUpdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tableManufacturer.CountryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CountryName\' in table \'Manufacturer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManufacturer.CountryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    try {
                        return ((System.Guid)(this[this.tableManufacturer.rowguidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'rowguid\' in table \'Manufacturer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManufacturer.rowguidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow CountryRow {
                get {
                    return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["FK_Country_Manufacturer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Country_Manufacturer"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableManufacturer.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableManufacturer.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateUpdateNull() {
                return this.IsNull(this.tableManufacturer.DateUpdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateUpdateNull() {
                this[this.tableManufacturer.DateUpdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tableManufacturer.CountryNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tableManufacturer.CountryNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowguidNull() {
                return this.IsNull(this.tableManufacturer.rowguidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowguidNull() {
                this[this.tableManufacturer.rowguidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow[] GetReceiptDetailRows() {
                return ((ReceiptDetailRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Manufacturer_ReceiptDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FarmGroupLevel2Row : System.Data.DataRow {
            
            private FarmGroupLevel2DataTable tableFarmGroupLevel2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FarmGroupLevel2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFarmGroupLevel2 = ((FarmGroupLevel2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableFarmGroupLevel2.IDColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableFarmGroupLevel2.NameColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FarmGroupRef {
                get {
                    return ((int)(this[this.tableFarmGroupLevel2.FarmGroupRefColumn]));
                }
                set {
                    this[this.tableFarmGroupLevel2.FarmGroupRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableFarmGroupLevel2.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableFarmGroupLevel2.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFarmGroupLevel2.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFarmGroupLevel2.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableFarmGroupLevel2.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FarmGroupName {
                get {
                    try {
                        return ((string)(this[this.tableFarmGroupLevel2.FarmGroupNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FarmGroupName\' in table \'FarmGroupLevel2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFarmGroupLevel2.FarmGroupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow FarmGroupRow {
                get {
                    return ((FarmGroupRow)(this.GetParentRow(this.Table.ParentRelations["FK_FarmGroup_FarmGroupLevel2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FarmGroup_FarmGroupLevel2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableFarmGroupLevel2.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableFarmGroupLevel2.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableFarmGroupLevel2.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableFarmGroupLevel2.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableFarmGroupLevel2.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableFarmGroupLevel2.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableFarmGroupLevel2.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableFarmGroupLevel2.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableFarmGroupLevel2.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableFarmGroupLevel2.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFarmGroupNameNull() {
                return this.IsNull(this.tableFarmGroupLevel2.FarmGroupNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFarmGroupNameNull() {
                this[this.tableFarmGroupLevel2.FarmGroupNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow[] GetProductRows() {
                return ((ProductRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FarmGroupLevel2_Product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrdersRow : System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrdersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableOrders.IDColumn]));
                }
                set {
                    this[this.tableOrders.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePupletRef {
                get {
                    return ((int)(this[this.tableOrders.TradePupletRefColumn]));
                }
                set {
                    this[this.tableOrders.TradePupletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tableOrders.ProductRefColumn]));
                }
                set {
                    this[this.tableOrders.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOrder {
                get {
                    return ((System.DateTime)(this[this.tableOrders.DateOrderColumn]));
                }
                set {
                    this[this.tableOrders.DateOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableOrders.QuantityColumn]));
                }
                set {
                    this[this.tableOrders.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Price {
                get {
                    return ((decimal)(this[this.tableOrders.PriceColumn]));
                }
                set {
                    this[this.tableOrders.PriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Reserved {
                get {
                    return ((decimal)(this[this.tableOrders.ReservedColumn]));
                }
                set {
                    this[this.tableOrders.ReservedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityNow {
                get {
                    return ((decimal)(this[this.tableOrders.QuantityNowColumn]));
                }
                set {
                    this[this.tableOrders.QuantityNowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isClose {
                get {
                    return ((bool)(this[this.tableOrders.isCloseColumn]));
                }
                set {
                    this[this.tableOrders.isCloseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableOrders.NoteColumn]));
                }
                set {
                    this[this.tableOrders.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    try {
                        return ((string)(this[this.tableOrders.AuthorCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorCreate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableOrders.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.DateCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateCreate\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableOrders.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Orders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrders.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow ReceiptDetailRow {
                get {
                    return ((ReceiptDetailRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptDetail_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptDetail_Orders"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_Orders"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow TradePutletRow {
                get {
                    return ((TradePutletRow)(this.GetParentRow(this.Table.ParentRelations["TradePutlet_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TradePutlet_Orders"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCreateNull() {
                return this.IsNull(this.tableOrders.AuthorCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCreateNull() {
                this[this.tableOrders.AuthorCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableOrders.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableOrders.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreateNull() {
                return this.IsNull(this.tableOrders.DateCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreateNull() {
                this[this.tableOrders.DateCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableOrders.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableOrders.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableOrders.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableOrders.RowVersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RemainsRow : System.Data.DataRow {
            
            private RemainsDataTable tableRemains;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemainsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRemains = ((RemainsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    return ((System.DateTime)(this[this.tableRemains.DocDateColumn]));
                }
                set {
                    this[this.tableRemains.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tableRemains.ProductRefColumn]));
                }
                set {
                    this[this.tableRemains.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Series {
                get {
                    return ((string)(this[this.tableRemains.SeriesColumn]));
                }
                set {
                    this[this.tableRemains.SeriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UseByDate {
                get {
                    return ((System.DateTime)(this[this.tableRemains.UseByDateColumn]));
                }
                set {
                    this[this.tableRemains.UseByDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableRemains.PricePurchaseColumn]));
                }
                set {
                    this[this.tableRemains.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QuantityRemains {
                get {
                    return ((decimal)(this[this.tableRemains.QuantityRemainsColumn]));
                }
                set {
                    this[this.tableRemains.QuantityRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MainStockRef {
                get {
                    return ((int)(this[this.tableRemains.MainStockRefColumn]));
                }
                set {
                    this[this.tableRemains.MainStockRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReceiptDetailRef {
                get {
                    return ((int)(this[this.tableRemains.ReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableRemains.ReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableRemains.QuantityColumn]));
                }
                set {
                    this[this.tableRemains.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableRemains.DateLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateLastModif\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    try {
                        return ((string)(this[this.tableRemains.AuthorLastModifColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AuthorLastModif\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableRemains.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerRef {
                get {
                    try {
                        return ((string)(this[this.tableRemains.ManufacturerRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerRef\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableRemains.ManufacturerNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.ManufacturerNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tableRemains.CountryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CountryName\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.CountryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SumRemains {
                get {
                    try {
                        return ((decimal)(this[this.tableRemains.SumRemainsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SumRemains\' in table \'Remains\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemains.SumRemainsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_Remains"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_Remains"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow ReceiptDetailRow {
                get {
                    return ((ReceiptDetailRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptDetail_Remains"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptDetail_Remains"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateLastModifNull() {
                return this.IsNull(this.tableRemains.DateLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateLastModifNull() {
                this[this.tableRemains.DateLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastModifNull() {
                return this.IsNull(this.tableRemains.AuthorLastModifColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastModifNull() {
                this[this.tableRemains.AuthorLastModifColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableRemains.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableRemains.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerRefNull() {
                return this.IsNull(this.tableRemains.ManufacturerRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerRefNull() {
                this[this.tableRemains.ManufacturerRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableRemains.ManufacturerNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableRemains.ManufacturerNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tableRemains.CountryNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tableRemains.CountryNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumRemainsNull() {
                return this.IsNull(this.tableRemains.SumRemainsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumRemainsNull() {
                this[this.tableRemains.SumRemainsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow[] GetInvoiceDetailRows() {
                return ((InvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["Remains_InvoiceDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PricesPurchaseRow : System.Data.DataRow {
            
            private PricesPurchaseDataTable tablePricesPurchase;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PricesPurchaseRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePricesPurchase = ((PricesPurchaseDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganizationRef {
                get {
                    return ((int)(this[this.tablePricesPurchase.OrganizationRefColumn]));
                }
                set {
                    this[this.tablePricesPurchase.OrganizationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    return ((int)(this[this.tablePricesPurchase.ProductRefColumn]));
                }
                set {
                    this[this.tablePricesPurchase.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tablePricesPurchase.PricePurchaseColumn]));
                }
                set {
                    this[this.tablePricesPurchase.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePricesPurchase.DateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Date\' in table \'PricesPurchase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePricesPurchase.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrganizationName {
                get {
                    try {
                        return ((string)(this[this.tablePricesPurchase.OrganizationNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrganizationName\' in table \'PricesPurchase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePricesPurchase.OrganizationNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow OrganizationRow {
                get {
                    return ((OrganizationRow)(this.GetParentRow(this.Table.ParentRelations["Organization_PricesPurchase"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Organization_PricesPurchase"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow ProductRow {
                get {
                    return ((ProductRow)(this.GetParentRow(this.Table.ParentRelations["Product_PricesPurchase"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Product_PricesPurchase"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow ReceiptDetailRow {
                get {
                    return ((ReceiptDetailRow)(this.GetParentRow(this.Table.ParentRelations["ReceiptDetail_PricesPurchase"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ReceiptDetail_PricesPurchase"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePricesPurchase.DateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePricesPurchase.DateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganizationNameNull() {
                return this.IsNull(this.tablePricesPurchase.OrganizationNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganizationNameNull() {
                this[this.tablePricesPurchase.OrganizationNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PeriodsRow : System.Data.DataRow {
            
            private PeriodsDataTable tablePeriods;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PeriodsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePeriods = ((PeriodsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablePeriods.IDColumn]));
                }
                set {
                    this[this.tablePeriods.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((System.DateTime)(this[this.tablePeriods.StartDateColumn]));
                }
                set {
                    this[this.tablePeriods.StartDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ClosedDate {
                get {
                    return ((System.DateTime)(this[this.tablePeriods.ClosedDateColumn]));
                }
                set {
                    this[this.tablePeriods.ClosedDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isClosed {
                get {
                    return ((bool)(this[this.tablePeriods.isClosedColumn]));
                }
                set {
                    this[this.tablePeriods.isClosedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tablePeriods.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Periods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePeriods.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePeriods.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'Periods\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePeriods.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePeriods.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tablePeriods.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePeriods.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePeriods.NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkedInvoiceDetailRow : System.Data.DataRow {
            
            private LinkedInvoiceDetailDataTable tableLinkedInvoiceDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedInvoiceDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkedInvoiceDetail = ((LinkedInvoiceDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLinkedInvoiceDetail.IDColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvoiceMasterRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceDetail.InvoiceMasterRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.InvoiceMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.QuantityColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PricePurchase {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.PricePurchaseColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.PricePurchaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DiscountSum {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.DiscountSumColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.DiscountSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PurchaseNDS {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.PurchaseNDSColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.PurchaseNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetail {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.PriceRetailColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.PriceRetailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailNDS {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.RetailNDSColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.RetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PriceRetailNDS {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.PriceRetailNDSColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.PriceRetailNDSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LocalReceiptDetailRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceDetail.LocalReceiptDetailRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.LocalReceiptDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceDetailRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceDetail.RemoteInvoiceDetailRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.RemoteInvoiceDetailRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.ExtraColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Discount {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.DiscountColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.DiscountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableLinkedInvoiceDetail.NoteColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableLinkedInvoiceDetail.AuthorCreateColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableLinkedInvoiceDetail.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableLinkedInvoiceDetail.DateLastModifColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableLinkedInvoiceDetail.DateCreateColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableLinkedInvoiceDetail.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'LinkedInvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedInvoiceDetail.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RetailSum {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceDetail.RetailSumColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.RetailSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Article {
                get {
                    return ((int)(this[this.tableLinkedInvoiceDetail.ArticleColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.ArticleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HOST {
                get {
                    return ((string)(this[this.tableLinkedInvoiceDetail.HOSTColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.HOSTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    return ((System.Guid)(this[this.tableLinkedInvoiceDetail.rowguidColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.rowguidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePutletRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceDetail.TradePutletRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceDetail.TradePutletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductRef {
                get {
                    try {
                        return ((int)(this[this.tableLinkedInvoiceDetail.ProductRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductRef\' in table \'LinkedInvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedInvoiceDetail.ProductRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManufacturerRef {
                get {
                    try {
                        return ((int)(this[this.tableLinkedInvoiceDetail.ManufacturerRefColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturerRef\' in table \'LinkedInvoiceDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedInvoiceDetail.ManufacturerRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRow LinkedInvoiceMasterRowParent {
                get {
                    return ((LinkedInvoiceMasterRow)(this.GetParentRow(this.Table.ParentRelations["LinkedInvoiceMaster_LinkedInvoiceDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LinkedInvoiceMaster_LinkedInvoiceDetail"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableLinkedInvoiceDetail.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableLinkedInvoiceDetail.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductRefNull() {
                return this.IsNull(this.tableLinkedInvoiceDetail.ProductRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductRefNull() {
                this[this.tableLinkedInvoiceDetail.ProductRefColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerRefNull() {
                return this.IsNull(this.tableLinkedInvoiceDetail.ManufacturerRefColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerRefNull() {
                this[this.tableLinkedInvoiceDetail.ManufacturerRefColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkedInvoiceMasterRow : System.Data.DataRow {
            
            private LinkedInvoiceMasterDataTable tableLinkedInvoiceMaster;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedInvoiceMasterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkedInvoiceMaster = ((LinkedInvoiceMasterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.IDColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.NumberColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumCheck {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.NumCheckColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.NumCheckColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((System.DateTime)(this[this.tableLinkedInvoiceMaster.DateColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrganisationRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.OrganisationRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.OrganisationRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DocumentTypeRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.DocumentTypeRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.DocumentTypeRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteReceiptMasterRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.RemoteReceiptMasterRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.RemoteReceiptMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RemoteInvoiceMasterRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.RemoteInvoiceMasterRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.RemoteInvoiceMasterRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadOnly {
                get {
                    return ((bool)(this[this.tableLinkedInvoiceMaster.IsReadOnlyColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.IsReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Sum {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceMaster.SumColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.SumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Nds {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceMaster.NdsColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.NdsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Extra {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceMaster.ExtraColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.ExtraColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Discount {
                get {
                    return ((decimal)(this[this.tableLinkedInvoiceMaster.DiscountColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.DiscountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableLinkedInvoiceMaster.NoteColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.NoteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PeriodsRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.PeriodsRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.PeriodsRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateLastModif {
                get {
                    return ((System.DateTime)(this[this.tableLinkedInvoiceMaster.DateLastModifColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.DateLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCreate {
                get {
                    return ((string)(this[this.tableLinkedInvoiceMaster.AuthorCreateColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.AuthorCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastModif {
                get {
                    return ((string)(this[this.tableLinkedInvoiceMaster.AuthorLastModifColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.AuthorLastModifColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreate {
                get {
                    return ((System.DateTime)(this[this.tableLinkedInvoiceMaster.DateCreateColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.DateCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableLinkedInvoiceMaster.RowVersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'LinkedInvoiceMaster\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedInvoiceMaster.RowVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecalcSum {
                get {
                    return ((bool)(this[this.tableLinkedInvoiceMaster.RecalcSumColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.RecalcSumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HOST {
                get {
                    return ((string)(this[this.tableLinkedInvoiceMaster.HOSTColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.HOSTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid rowguid {
                get {
                    return ((System.Guid)(this[this.tableLinkedInvoiceMaster.rowguidColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.rowguidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TradePutletRef {
                get {
                    return ((int)(this[this.tableLinkedInvoiceMaster.TradePutletRefColumn]));
                }
                set {
                    this[this.tableLinkedInvoiceMaster.TradePutletRefColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableLinkedInvoiceMaster.RowVersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableLinkedInvoiceMaster.RowVersionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRow[] GetLinkedInvoiceDetailRows() {
                return ((LinkedInvoiceDetailRow[])(base.GetChildRows(this.Table.ChildRelations["LinkedInvoiceMaster_LinkedInvoiceDetail"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CountryRowChangeEvent : System.EventArgs {
            
            private CountryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRowChangeEvent(CountryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DocumentTypeRowChangeEvent : System.EventArgs {
            
            private DocumentTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRowChangeEvent(DocumentTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DocumentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceDetailRowChangeEvent : System.EventArgs {
            
            private InvoiceDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRowChangeEvent(InvoiceDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoiceMasterRowChangeEvent : System.EventArgs {
            
            private InvoiceMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRowChangeEvent(InvoiceMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoiceMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrganizationRowChangeEvent : System.EventArgs {
            
            private OrganizationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRowChangeEvent(OrganizationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrganizationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptRemainsRowChangeEvent : System.EventArgs {
            
            private ReceiptRemainsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRowChangeEvent(ReceiptRemainsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptRemainsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StockRowChangeEvent : System.EventArgs {
            
            private StockRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRowChangeEvent(StockRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TradePutletRowChangeEvent : System.EventArgs {
            
            private TradePutletRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRowChangeEvent(TradePutletRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradePutletRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptMasterRowChangeEvent : System.EventArgs {
            
            private ReceiptMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRowChangeEvent(ReceiptMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReceiptDetailRowChangeEvent : System.EventArgs {
            
            private ReceiptDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRowChangeEvent(ReceiptDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReceiptDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StorageConditionRowChangeEvent : System.EventArgs {
            
            private StorageConditionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRowChangeEvent(StorageConditionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StorageConditionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductRowChangeEvent : System.EventArgs {
            
            private ProductRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRowChangeEvent(ProductRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FarmGroupRowChangeEvent : System.EventArgs {
            
            private FarmGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRowChangeEvent(FarmGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PackingRowChangeEvent : System.EventArgs {
            
            private PackingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRowChangeEvent(PackingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PackingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubstanceRowChangeEvent : System.EventArgs {
            
            private SubstanceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRowChangeEvent(SubstanceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubstanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitRowChangeEvent : System.EventArgs {
            
            private UnitRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRowChangeEvent(UnitRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ManufacturerRowChangeEvent : System.EventArgs {
            
            private ManufacturerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRowChangeEvent(ManufacturerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManufacturerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FarmGroupLevel2RowChangeEvent : System.EventArgs {
            
            private FarmGroupLevel2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2RowChangeEvent(FarmGroupLevel2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FarmGroupLevel2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrdersRowChangeEvent : System.EventArgs {
            
            private OrdersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRowChangeEvent(OrdersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RemainsRowChangeEvent : System.EventArgs {
            
            private RemainsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRowChangeEvent(RemainsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemainsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PricesPurchaseRowChangeEvent : System.EventArgs {
            
            private PricesPurchaseRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRowChangeEvent(PricesPurchaseRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PricesPurchaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PeriodsRowChangeEvent : System.EventArgs {
            
            private PeriodsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRowChangeEvent(PeriodsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PeriodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkedInvoiceDetailRowChangeEvent : System.EventArgs {
            
            private LinkedInvoiceDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRowChangeEvent(LinkedInvoiceDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkedInvoiceMasterRowChangeEvent : System.EventArgs {
            
            private LinkedInvoiceMasterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRowChangeEvent(LinkedInvoiceMasterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedInvoiceMasterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RetailTrade.MDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CountryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Country";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.CountryDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.CountryInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.CountryUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.CountrySelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.CountrySelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, "DateUpdate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.CountryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.CountryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.CountryDataTable dataTable = new MDataSet.CountryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.CountryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.CountryDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.CountryDataTable dataTable = new MDataSet.CountryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.CountryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Country");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name) {
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, System.Nullable<int> Original_ID, byte[] Original_RowVersion, System.Nullable<int> ID) {
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DocumentTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DocumentTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DocumentType";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsInternal", "IsInternal");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.DocumentTypeDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.DocumentTypeInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsInternal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsInternal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.DocumentTypeUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsInternal", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsInternal", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.DocumentTypeSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.DocumentTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.DocumentTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.DocumentTypeDataTable dataTable = new MDataSet.DocumentTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.DocumentTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DocumentType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(IsInternal));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateLastModif));
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, bool IsInternal, string AuthorCreate, string AuthorLastModif, System.DateTime DateLastModif, System.DateTime DateCreate, int Original_ID, byte[] Original_RowVersion, int ID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(IsInternal));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DateLastModif));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(DateCreate));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvoiceDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvoiceDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("InvoiceMasterRef", "InvoiceMasterRef");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("PriceRetail", "PriceRetail");
            tableMapping.ColumnMappings.Add("RetailNDS", "RetailNDS");
            tableMapping.ColumnMappings.Add("PriceRetailNDS", "PriceRetailNDS");
            tableMapping.ColumnMappings.Add("LocalReceipDetailRef", "LocalReceiptDetailRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceDetailRef", "RemoteInvoiceDetailRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.InvoiceDetailDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.InvoiceDetailInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "InvoiceMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 5, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LocalReceiptDetailRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "LocalReceiptDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.InvoiceDetailUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceRetailNDS", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceRetailNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.InvoiceDetailSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InvoiceDetailSelectByIdCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.InvoiceDetailSelectByInvoiceMasterRef";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.InvoiceDetailselectByPeriodCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.InvoiceDetailSelectNewCommand";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.InvoiceDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.InvoiceDetailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillById(MDataSet.InvoiceDetailDataTable dataTable, System.Nullable<int> Id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataById(System.Nullable<int> Id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(Id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInvoiceMasterRef(MDataSet.InvoiceDetailDataTable dataTable, System.Nullable<int> InvoiceMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((InvoiceMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(InvoiceMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataByInvoiceMasterRef(System.Nullable<int> InvoiceMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((InvoiceMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(InvoiceMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.InvoiceDetailDataTable dataTable, System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataByPeriod(System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.InvoiceDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceDetailDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            MDataSet.InvoiceDetailDataTable dataTable = new MDataSet.InvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.InvoiceDetailDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvoiceDetail");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> InvoiceMasterRef, System.Nullable<decimal> Quantity, System.Nullable<decimal> PriceRetailNDS, System.Nullable<int> LocalReceiptDetailRef, string Note) {
            if ((InvoiceMasterRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(InvoiceMasterRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Quantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Quantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((PriceRetailNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PriceRetailNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((LocalReceiptDetailRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(LocalReceiptDetailRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Note == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Note));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<decimal> Quantity, System.Nullable<decimal> PriceRetailNDS, string Note, System.Nullable<int> Original_ID, byte[] Original_RowVersion, System.Nullable<int> ID) {
            if ((Quantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Quantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((PriceRetailNDS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(PriceRetailNDS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Note == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Note));
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InvoiceMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InvoiceMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InvoiceMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("OrganisationRef", "OrganisationRef");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("RemoteStockRef", "RemoteStockRef");
            tableMapping.ColumnMappings.Add("RemoteReceiptMasterRef", "RemoteReceiptMasterRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceMasterRef", "RemoteInvoiceMasterRef");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("Sum", "Sum");
            tableMapping.ColumnMappings.Add("Nds", "Nds");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("RecalcSum", "RecalcSum");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.InvoiceMasterDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.InvoiceMasterInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "RemoteStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "MainStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.InvoiceMasterUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Number", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "Number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Date", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "Date", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RemoteStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "RemoteStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "MainStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.InvoiceMasterSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.InvoiceMasterSelectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.InvoiceMasterSelectByPeriodNumCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.invoiceMasterSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.InvoiceMasterMakeToNew";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@idInvoiceMaster", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.InvoiceMasterMove";
            this._commandCollection[5].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@invoicemasterId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.InvoiceMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.InvoiceMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.InvoiceMasterDataTable dataTable, System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceMasterDataTable GetDataByPeriod(System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriodNum(MDataSet.InvoiceMasterDataTable dataTable, System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceMasterDataTable GetDataByPeriodNum(System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.InvoiceMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.InvoiceMasterDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.InvoiceMasterDataTable dataTable = new MDataSet.InvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.InvoiceMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "InvoiceMaster");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InvoiceMasterMakeToNew(System.Nullable<int> idInvoiceMaster) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((idInvoiceMaster.HasValue == true)) {
                command.Parameters[1].Value = ((int)(idInvoiceMaster.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int InvoiceMasterMove(System.Nullable<int> invoicemasterId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((invoicemasterId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(invoicemasterId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OrganizationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrganizationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Organization";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ShortName", "ShortName");
            tableMapping.ColumnMappings.Add("Director", "Director");
            tableMapping.ColumnMappings.Add("Adress", "Adress");
            tableMapping.ColumnMappings.Add("Address_jur", "Address_jur");
            tableMapping.ColumnMappings.Add("OKPO", "OKPO");
            tableMapping.ColumnMappings.Add("BankName", "BankName");
            tableMapping.ColumnMappings.Add("BankMFO", "BankMFO");
            tableMapping.ColumnMappings.Add("INN", "INN");
            tableMapping.ColumnMappings.Add("NumSvid", "NumSvid");
            tableMapping.ColumnMappings.Add("NumSvidChp", "NumSvidChp");
            tableMapping.ColumnMappings.Add("PassChp", "PassChp");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("License", "License");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("BankRS", "BankRS");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.OrganizationDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.OrganizationInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ShortName", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "ShortName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address_jur", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "Address_jur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OKPO", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "OKPO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankMFO", System.Data.SqlDbType.NChar, 6, System.Data.ParameterDirection.Input, 0, 0, "BankMFO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@INN", System.Data.SqlDbType.NChar, 12, System.Data.ParameterDirection.Input, 0, 0, "INN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvid", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "NumSvid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvidChp", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "NumSvidChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PassChp", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "PassChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@License", System.Data.SqlDbType.NVarChar, 40, System.Data.ParameterDirection.Input, 0, 0, "License", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankRS", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "BankRS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.OrganizationUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ShortName", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "ShortName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Director", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Director", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address_jur", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "Address_jur", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OKPO", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "OKPO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankName", System.Data.SqlDbType.NVarChar, 70, System.Data.ParameterDirection.Input, 0, 0, "BankName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankMFO", System.Data.SqlDbType.NChar, 6, System.Data.ParameterDirection.Input, 0, 0, "BankMFO", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@INN", System.Data.SqlDbType.NChar, 12, System.Data.ParameterDirection.Input, 0, 0, "INN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvid", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "NumSvid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSvidChp", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "NumSvidChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PassChp", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "PassChp", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Phone", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Phone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@License", System.Data.SqlDbType.NVarChar, 40, System.Data.ParameterDirection.Input, 0, 0, "License", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankRS", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "BankRS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.OrganizationSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.OrganizationSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastUpdate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.OrganizationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.OrganizationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.OrganizationDataTable dataTable = new MDataSet.OrganizationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.OrganizationDataTable dataTable, System.Nullable<System.DateTime> DateLastUpdate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DateLastUpdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DateLastUpdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.OrganizationDataTable GetDataNew(System.Nullable<System.DateTime> DateLastUpdate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DateLastUpdate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(DateLastUpdate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.OrganizationDataTable dataTable = new MDataSet.OrganizationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.OrganizationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Organization");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Name, 
                    string ShortName, 
                    string Director, 
                    string Adress, 
                    string Address_jur, 
                    string OKPO, 
                    string BankName, 
                    string BankMFO, 
                    string INN, 
                    string NumSvid, 
                    string NumSvidChp, 
                    string PassChp, 
                    string Phone, 
                    string License, 
                    string Note, 
                    string BankRS) {
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((ShortName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ShortName));
            }
            if ((Director == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Director));
            }
            if ((Adress == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Adress));
            }
            if ((Address_jur == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Address_jur));
            }
            if ((OKPO == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(OKPO));
            }
            if ((BankName == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(BankName));
            }
            if ((BankMFO == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(BankMFO));
            }
            if ((INN == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(INN));
            }
            if ((NumSvid == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(NumSvid));
            }
            if ((NumSvidChp == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(NumSvidChp));
            }
            if ((PassChp == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(PassChp));
            }
            if ((Phone == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Phone));
            }
            if ((License == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(License));
            }
            if ((Note == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Note));
            }
            if ((BankRS == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(BankRS));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Name, 
                    string ShortName, 
                    string Director, 
                    string Adress, 
                    string Address_jur, 
                    string OKPO, 
                    string BankName, 
                    string BankMFO, 
                    string INN, 
                    string NumSvid, 
                    string NumSvidChp, 
                    string PassChp, 
                    string Phone, 
                    string License, 
                    string Note, 
                    string BankRS, 
                    System.Nullable<int> Original_ID, 
                    byte[] Original_RowVersion, 
                    System.Nullable<int> ID) {
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((ShortName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ShortName));
            }
            if ((Director == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Director));
            }
            if ((Adress == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Adress));
            }
            if ((Address_jur == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Address_jur));
            }
            if ((OKPO == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(OKPO));
            }
            if ((BankName == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(BankName));
            }
            if ((BankMFO == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(BankMFO));
            }
            if ((INN == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(INN));
            }
            if ((NumSvid == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(NumSvid));
            }
            if ((NumSvidChp == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(NumSvidChp));
            }
            if ((PassChp == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(PassChp));
            }
            if ((Phone == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Phone));
            }
            if ((License == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(License));
            }
            if ((Note == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Note));
            }
            if ((BankRS == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(BankRS));
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptRemainsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptRemainsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptRemains";
            tableMapping.ColumnMappings.Add("ReceiptDetailRef", "ReceiptDetailRef");
            tableMapping.ColumnMappings.Add("QuantityReceipt", "QuantityReceipt");
            tableMapping.ColumnMappings.Add("QuantityRemains", "QuantityRemains");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ReceiptRemains] ([ReceiptDetailRef], [QuantityReceipt], [Quant" +
                "ityRemains], [AuthorCreate], [AuthorLastModif], [DateCreate]) VALUES (@ReceiptDe" +
                "tailRef, @QuantityReceipt, @QuantityRemains, @AuthorCreate, @AuthorLastModif, @D" +
                "ateCreate)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptDetailRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ReceiptDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityReceipt", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityReceipt", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityRemains", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 5, 3, "QuantityRemains", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ReceiptDetailRef, QuantityReceipt, QuantityRemains, AuthorCreate, AuthorLa" +
                "stModif, DateCreate, RowVersion FROM dbo.ReceiptRemains";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptRemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptRemainsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptRemainsDataTable dataTable = new MDataSet.ReceiptRemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptRemainsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptRemains");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ReceiptDetailRef, decimal QuantityReceipt, decimal QuantityRemains, string AuthorCreate, string AuthorLastModif, System.DateTime DateCreate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ReceiptDetailRef));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(QuantityReceipt));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(QuantityRemains));
            if ((AuthorCreate == null)) {
                throw new System.ArgumentNullException("AuthorCreate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                throw new System.ArgumentNullException("AuthorLastModif");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorLastModif));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DateCreate));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StockTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Stock";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("TradePutletRef", "TradePutletRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("isLocal", "isLocal");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.StockDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.StockInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePupletRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "TradePutletRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.StockUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePupletRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "TradePutletRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.StockSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.StockSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.StockDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.StockDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.StockDataTable dataTable = new MDataSet.StockDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.StockDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.StockDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.StockDataTable dataTable = new MDataSet.StockDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.StockDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Stock");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, System.Nullable<bool> IsNDS, System.Nullable<int> TradePupletRef, string AuthorCreate, string AuthorLastModif, System.Nullable<System.DateTime> DateCreate) {
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(IsNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((TradePupletRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(TradePupletRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((AuthorCreate == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AuthorLastModif));
            }
            if ((DateCreate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(DateCreate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, System.Nullable<bool> IsNDS, System.Nullable<int> TradePupletRef, string AuthorCreate, string AuthorLastModif, System.Nullable<System.DateTime> DateCreate, System.Nullable<int> Original_ID, byte[] Original_RowVersion, System.Nullable<int> ID) {
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsNDS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(IsNDS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((TradePupletRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(TradePupletRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((AuthorCreate == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(AuthorLastModif));
            }
            if ((DateCreate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(DateCreate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TradePutletTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TradePutletTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TradePutlet";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("IP", "IP");
            tableMapping.ColumnMappings.Add("Adress", "Adress");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.TradePutletDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.TradePutletInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IP", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "IP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 150, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.TradePutletUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IP", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "IP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Adress", System.Data.SqlDbType.NVarChar, 150, System.Data.ParameterDirection.Input, 0, 0, "Adress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.TradePutletSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.TradePutletDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.TradePutletDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.TradePutletDataTable dataTable = new MDataSet.TradePutletDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.TradePutletDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TradePutlet");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DocDate", "DocDate");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("OrganizationRef", "OrganizationRef");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("SenderStockRef", "SenderStockRef");
            tableMapping.ColumnMappings.Add("SenderInvoiceRef", "SenderInvoiceRef");
            tableMapping.ColumnMappings.Add("SalesSum", "SalesSum");
            tableMapping.ColumnMappings.Add("PurchSum", "PurchSum");
            tableMapping.ColumnMappings.Add("PurchNDS", "PurchNDS");
            tableMapping.ColumnMappings.Add("SalesNDS", "SalesNDS");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("RecalcSum", "RecalcSum");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ReceiptMasterDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ReceiptMasterInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrganizationRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OrganizationRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "MainStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SenderStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SenderInvoiceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SenderInvoiceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "ReceiptMasterUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Number", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "Number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "DocDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DocumentTypeRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "DocumentTypeRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OrganizationRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OrganizationRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MainStockRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "MainStockRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ReceiptMasterSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ReceiptMasterSelectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ReceiptMasterSelectByPeriodNumCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@num", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.ReceiptMasterSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.ReceiptMasterMakeToNew";
            this._commandCollection[4].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@idReceiptMaster", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.ReceiptMasterMove";
            this._commandCollection[5].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@receiptmasterId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.ReceiptMasterSellCommand";
            this._commandCollection[6].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePutletRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptMasterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.ReceiptMasterDataTable dataTable, System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptMasterDataTable GetDataByPeriod(System.Nullable<System.DateTime> Begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(Begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriodNum(MDataSet.ReceiptMasterDataTable dataTable, System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptMasterDataTable GetDataByPeriodNum(System.Nullable<int> num) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((num.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(num.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.ReceiptMasterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptMasterDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.ReceiptMasterDataTable dataTable = new MDataSet.ReceiptMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptMasterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptMaster");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ReceiptMasterMakeToNew(System.Nullable<int> idReceiptMaster) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((idReceiptMaster.HasValue == true)) {
                command.Parameters[1].Value = ((int)(idReceiptMaster.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ReceiptMasterMove(System.Nullable<int> receiptmasterId) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((receiptmasterId.HasValue == true)) {
                command.Parameters[1].Value = ((int)(receiptmasterId.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int ReceiptMasterSellCommand(System.Nullable<int> ReceiptMasterRef, System.Nullable<int> TradePutletRef) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((ReceiptMasterRef.HasValue == true)) {
                command.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((TradePutletRef.HasValue == true)) {
                command.Parameters[2].Value = ((int)(TradePutletRef.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReceiptDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReceiptDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReceiptDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("ReceiptMasterRef", "ReceiptMasterRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("Series", "Series");
            tableMapping.ColumnMappings.Add("UseByDate", "UseByDate");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("PurchSum", "PurchSum");
            tableMapping.ColumnMappings.Add("PurchNDS", "PurchNDS");
            tableMapping.ColumnMappings.Add("SalesNDS", "SalesNDS");
            tableMapping.ColumnMappings.Add("SalesPrice", "SalesPrice");
            tableMapping.ColumnMappings.Add("SalesSum", "SalesSum");
            tableMapping.ColumnMappings.Add("InvoiceDetailRef", "InvoiceDetailRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ReceiptDetailDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ReceiptDetailInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ReceiptMasterRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ProductRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Series", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "Series", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UseByDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "UseByDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PricePurchase", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 5, "PricePurchase", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchSum", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "PurchSum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PurchNDS", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "PurchNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SalesNDS", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "SalesNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SalesPrice", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "SalesPrice", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SalesSum", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "SalesSum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceDetailRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "InvoiceDetailRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManufacturerRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ManufacturerRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.ReceiptDetailUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Series", System.Data.SqlDbType.NChar, 15, System.Data.ParameterDirection.Input, 0, 0, "Series", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UseByDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, "UseByDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PricePurchase", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 5, "PricePurchase", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManufacturerRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ManufacturerRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ReceiptDetailSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ReceiptDetailselectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@begin", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ReceiptDetailSelectByReceiptMasterRefCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ReceiptDetailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ReceiptDetailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByPeriod(MDataSet.ReceiptDetailDataTable dataTable, System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptDetailDataTable GetDataByPeriod(System.Nullable<System.DateTime> begin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((begin.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(begin.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByReceiptMasterRef(MDataSet.ReceiptDetailDataTable dataTable, System.Nullable<int> ReceiptMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ReceiptDetailDataTable GetDataByReceiptMasterRef(System.Nullable<int> ReceiptMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ReceiptDetailDataTable dataTable = new MDataSet.ReceiptDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ReceiptDetailDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ReceiptDetail");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> ReceiptMasterRef, System.Nullable<int> ProductRef, string Series, System.Nullable<System.DateTime> UseByDate, System.Nullable<decimal> Quantity, System.Nullable<decimal> PricePurchase, System.Nullable<decimal> PurchSum, System.Nullable<decimal> PurchNDS, System.Nullable<decimal> SalesNDS, System.Nullable<decimal> SalesPrice, System.Nullable<decimal> SalesSum, System.Nullable<int> InvoiceDetailRef, int ManufacturerRef) {
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ProductRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ProductRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Series == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Series));
            }
            if ((UseByDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(UseByDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Quantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Quantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((PricePurchase.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(PricePurchase.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((PurchSum.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(PurchSum.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PurchNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(PurchNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((SalesNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(SalesNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((SalesPrice.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(SalesPrice.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((SalesSum.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(SalesSum.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((InvoiceDetailRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(InvoiceDetailRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((int)(ManufacturerRef));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Series, System.Nullable<System.DateTime> UseByDate, System.Nullable<decimal> Quantity, System.Nullable<decimal> PricePurchase, System.Nullable<int> Original_ID, byte[] Original_RowVersion, System.Nullable<int> ID, int ManufacturerRef) {
            if ((Series == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Series));
            }
            if ((UseByDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(UseByDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Quantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Quantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((PricePurchase.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(PricePurchase.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ManufacturerRef));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StorageConditionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StorageConditionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "StorageCondition";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.StorageConditionDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.StorageConditionInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.StorageConditionUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.StorageConditionSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.StorageConditionSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.StorageConditionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.StorageConditionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.StorageConditionDataTable dataTable = new MDataSet.StorageConditionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.StorageConditionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.StorageConditionDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.StorageConditionDataTable dataTable = new MDataSet.StorageConditionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.StorageConditionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "StorageCondition");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProductTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Product";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("SmallName", "SmallName");
            tableMapping.ColumnMappings.Add("PriceManufact", "PriceManufact");
            tableMapping.ColumnMappings.Add("UnitRef", "UnitRef");
            tableMapping.ColumnMappings.Add("PackingRef", "PackingRef");
            tableMapping.ColumnMappings.Add("StorageConditionRef", "StorageConditionRef");
            tableMapping.ColumnMappings.Add("SubstanceRef", "SubstanceRef");
            tableMapping.ColumnMappings.Add("FarmGrouplevel2Ref", "FarmGrouplevel2Ref");
            tableMapping.ColumnMappings.Add("IsRecept", "IsRecept");
            tableMapping.ColumnMappings.Add("IsOneRecept", "IsOneRecept");
            tableMapping.ColumnMappings.Add("MinDivisor", "MinDivisor");
            tableMapping.ColumnMappings.Add("IsNDS", "IsNDS");
            tableMapping.ColumnMappings.Add("OldKol", "OldKol");
            tableMapping.ColumnMappings.Add("OldKod", "OldKod");
            tableMapping.ColumnMappings.Add("OldName", "OldName");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("IsHide", "IsHide");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ProductDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ProductInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SmallName", System.Data.SqlDbType.NChar, 25, System.Data.ParameterDirection.Input, 0, 0, "SmallName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceManufact", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceManufact", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UnitRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "UnitRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PackingRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "PackingRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StorageConditionRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "StorageConditionRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubstanceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SubstanceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGrouplevel2Ref", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "FarmGrouplevel2Ref", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsOneRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsOneRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsHide", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsHide", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinDivisor", System.Data.SqlDbType.SmallInt, 2, System.Data.ParameterDirection.Input, 5, 0, "MinDivisor", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNDS", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsNDS", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OldKol", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OldKol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OldKod", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OldKod", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OldName", System.Data.SqlDbType.NVarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "OldName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.ProductUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SmallName", System.Data.SqlDbType.NChar, 25, System.Data.ParameterDirection.Input, 0, 0, "SmallName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PriceManufact", System.Data.SqlDbType.Decimal, 9, System.Data.ParameterDirection.Input, 18, 2, "PriceManufact", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UnitRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "UnitRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PackingRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "PackingRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StorageConditionRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "StorageConditionRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SubstanceRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "SubstanceRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGrouplevel2Ref", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "FarmGrouplevel2Ref", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsOneRecept", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsOneRecept", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsHide", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 1, 0, "IsHide", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinDivisor", System.Data.SqlDbType.SmallInt, 2, System.Data.ParameterDirection.Input, 5, 0, "MinDivisor", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OldKol", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "OldKol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.ProductSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ProductSelectByIdReceipt";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMasterId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ProductSelectNewCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ProductDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByReceiptId(MDataSet.ProductDataTable dataTable, System.Nullable<int> ReceiptMasterId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ReceiptMasterId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ProductDataTable GetDataByReceiptId(System.Nullable<int> ReceiptMasterId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ReceiptMasterId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.ProductDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ProductDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            MDataSet.ProductDataTable dataTable = new MDataSet.ProductDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ProductDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Product");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(System.Nullable<int> Original_ID, byte[] Original_RowVersion) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string Name, 
                    string SmallName, 
                    System.Nullable<decimal> PriceManufact, 
                    System.Nullable<int> UnitRef, 
                    System.Nullable<int> PackingRef, 
                    System.Nullable<int> StorageConditionRef, 
                    System.Nullable<int> SubstanceRef, 
                    System.Nullable<int> FarmGrouplevel2Ref, 
                    System.Nullable<bool> IsRecept, 
                    System.Nullable<bool> IsOneRecept, 
                    System.Nullable<bool> IsHide, 
                    System.Nullable<short> MinDivisor, 
                    System.Nullable<bool> IsNDS, 
                    System.Nullable<int> OldKol, 
                    System.Nullable<int> OldKod, 
                    string OldName, 
                    string Note) {
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((SmallName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SmallName));
            }
            if ((PriceManufact.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PriceManufact.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((UnitRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(UnitRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PackingRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(PackingRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((StorageConditionRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(StorageConditionRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((SubstanceRef.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(SubstanceRef.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((FarmGrouplevel2Ref.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(FarmGrouplevel2Ref.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IsRecept.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(IsRecept.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((IsOneRecept.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(IsOneRecept.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((IsHide.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(IsHide.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((MinDivisor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((short)(MinDivisor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((IsNDS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(IsNDS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((OldKol.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(OldKol.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((OldKod.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(OldKod.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((OldName == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(OldName));
            }
            if ((Note == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(Note));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Name, 
                    string SmallName, 
                    System.Nullable<decimal> PriceManufact, 
                    System.Nullable<int> UnitRef, 
                    System.Nullable<int> PackingRef, 
                    System.Nullable<int> StorageConditionRef, 
                    System.Nullable<int> SubstanceRef, 
                    System.Nullable<int> FarmGrouplevel2Ref, 
                    System.Nullable<bool> IsRecept, 
                    System.Nullable<bool> IsOneRecept, 
                    System.Nullable<bool> IsHide, 
                    System.Nullable<short> MinDivisor, 
                    string Note, 
                    System.Nullable<int> OldKol, 
                    System.Nullable<int> Original_ID, 
                    byte[] Original_RowVersion, 
                    System.Nullable<int> ID) {
            if ((Name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((SmallName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SmallName));
            }
            if ((PriceManufact.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(PriceManufact.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((UnitRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(UnitRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((PackingRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(PackingRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((StorageConditionRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(StorageConditionRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((SubstanceRef.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(SubstanceRef.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((FarmGrouplevel2Ref.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(FarmGrouplevel2Ref.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((IsRecept.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(IsRecept.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((IsOneRecept.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(IsOneRecept.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((IsHide.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(IsHide.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((MinDivisor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((short)(MinDivisor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Note == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Note));
            }
            if ((OldKol.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(OldKol.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_RowVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((byte[])(Original_RowVersion));
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FarmGroupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FarmGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FarmGroup";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.FarmGroupDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.FarmGroupInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.FarmGroupUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.FarmGroupSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.FarmGroupSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.FarmGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.FarmGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.FarmGroupDataTable dataTable = new MDataSet.FarmGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.FarmGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.FarmGroupDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.FarmGroupDataTable dataTable = new MDataSet.FarmGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.FarmGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FarmGroup");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PackingTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PackingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Packing";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PackingDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PackingInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PackingUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PackingSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PackingSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.PackingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.PackingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.PackingDataTable dataTable = new MDataSet.PackingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.PackingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.PackingDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.PackingDataTable dataTable = new MDataSet.PackingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.PackingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Packing");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SubstanceTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SubstanceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Substance";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.SubstanceDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.SubstanceInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.SubstanceUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.SubstanceSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.SubstanceSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.SubstanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.SubstanceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.SubstanceDataTable dataTable = new MDataSet.SubstanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.SubstanceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.SubstanceDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.SubstanceDataTable dataTable = new MDataSet.SubstanceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.SubstanceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Substance");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UnitTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Unit";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.UnitDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.UnitInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.UnitUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UnitSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.UnitSelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.UnitDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.UnitDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.UnitDataTable dataTable = new MDataSet.UnitDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.UnitDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.UnitDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.UnitDataTable dataTable = new MDataSet.UnitDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.UnitDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Unit");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ManufacturerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ManufacturerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Manufacturer";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("CounrtyRef", "CounrtyRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.ManufacturerDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.ManufacturerInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CounrtyRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "CounrtyRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.ManufacturerUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CounrtyRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "CounrtyRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "ManufacturerSelectFirstCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.ManufacturerSelectByNameCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.ManufacturerSelectByReceiptMasterCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ReceiptMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.ManufacturerSelectNewCommand";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.ManufacturerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.ManufacturerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.ManufacturerDataTable dataTable = new MDataSet.ManufacturerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByName(MDataSet.ManufacturerDataTable dataTable, string name) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((name == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(name));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ManufacturerDataTable GetDataByName(string name) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((name == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(name));
            }
            MDataSet.ManufacturerDataTable dataTable = new MDataSet.ManufacturerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByReceiptMasterRef(MDataSet.ManufacturerDataTable dataTable, System.Nullable<int> ReceiptMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ManufacturerDataTable GetDataByReceiptMasterRef(System.Nullable<int> ReceiptMasterRef) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((ReceiptMasterRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(ReceiptMasterRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.ManufacturerDataTable dataTable = new MDataSet.ManufacturerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.ManufacturerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.ManufacturerDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            MDataSet.ManufacturerDataTable dataTable = new MDataSet.ManufacturerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.ManufacturerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Manufacturer");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FarmGroupLevel2TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FarmGroupLevel2TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FarmGroupLevel2";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("FarmGroupRef", "FarmGroupRef");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.FarmGroupLevel2DeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.FarmGroupLevel2InsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.FarmGroupLevel2UpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FarmGroupRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "FarmGroupRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 8, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.FarmGroupLevel2SelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.FarmGroupLevel2SelectNewCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.FarmGroupLevel2DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.FarmGroupLevel2DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.FarmGroupLevel2DataTable dataTable = new MDataSet.FarmGroupLevel2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.FarmGroupLevel2DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.FarmGroupLevel2DataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            MDataSet.FarmGroupLevel2DataTable dataTable = new MDataSet.FarmGroupLevel2DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.FarmGroupLevel2DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FarmGroupLevel2");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OrdersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OrdersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Orders";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TradePupletRef", "TradePupletRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("DateOrder", "DateOrder");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Price", "Price");
            tableMapping.ColumnMappings.Add("Reserved", "Reserved");
            tableMapping.ColumnMappings.Add("QuantityNow", "QuantityNow");
            tableMapping.ColumnMappings.Add("isClose", "isClose");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.OrdersDeleteCommand";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.OrdersInsertCommand";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePupletRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TradePupletRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.OrdersUpdateCommand";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePupletRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TradePupletRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProductRef", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProductRef", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateOrder", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateOrder", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Quantity", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "Quantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Price", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "Price", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Reserved", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "Reserved", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QuantityNow", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "QuantityNow", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@isClose", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "isClose", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Note", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Note", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorCreate", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AuthorLastModif", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AuthorLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateCreate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateCreate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DateLastModif", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DateLastModif", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RowVersion", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "RowVersion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.OrdersSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.OrdersSelectByPeriodCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.OrdersSetReservedCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@time", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.OrdersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.OrdersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.OrdersDataTable dataTable = new MDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByStartDate(MDataSet.OrdersDataTable dataTable, System.Nullable<System.DateTime> StartDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((StartDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.OrdersDataTable GetDataByStartDate(System.Nullable<System.DateTime> StartDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((StartDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.OrdersDataTable dataTable = new MDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet.OrdersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Orders");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, byte[] Original_RowVersion) {
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((byte[])(Original_RowVersion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TradePupletRef, int ProductRef, decimal Quantity, string Note) {
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TradePupletRef));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ProductRef));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(Quantity));
            if ((Note == null)) {
                throw new System.ArgumentNullException("Note");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Note));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int TradePupletRef, 
                    int ProductRef, 
                    System.DateTime DateOrder, 
                    decimal Quantity, 
                    decimal Price, 
                    decimal Reserved, 
                    decimal QuantityNow, 
                    bool isClose, 
                    string Note, 
                    string AuthorCreate, 
                    string AuthorLastModif, 
                    System.Nullable<System.DateTime> DateCreate, 
                    System.Nullable<System.DateTime> DateLastModif, 
                    int Original_ID, 
                    byte[] Original_RowVersion, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TradePupletRef));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ProductRef));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DateOrder));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Quantity));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Price));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Reserved));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(QuantityNow));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(isClose));
            if ((Note == null)) {
                throw new System.ArgumentNullException("Note");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Note));
            }
            if ((AuthorCreate == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(AuthorCreate));
            }
            if ((AuthorLastModif == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AuthorLastModif));
            }
            if ((DateCreate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(DateCreate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((DateLastModif.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(DateLastModif.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_ID));
            if ((Original_RowVersion == null)) {
                throw new System.ArgumentNullException("Original_RowVersion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((byte[])(Original_RowVersion));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int OrdersSetReservedCommand(System.Nullable<System.DateTime> time) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((time.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(time.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RemainsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RemainsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Remains";
            tableMapping.ColumnMappings.Add("DocDate", "DocDate");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("Series", "Series");
            tableMapping.ColumnMappings.Add("UseByDate", "UseByDate");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("QuantityRemains", "QuantityRemains");
            tableMapping.ColumnMappings.Add("MainStockRef", "MainStockRef");
            tableMapping.ColumnMappings.Add("ReceiptDetailRef", "ReceiptDetailRef");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            tableMapping.ColumnMappings.Add("ManufacturerName", "ManufacturerName");
            tableMapping.ColumnMappings.Add("CountryName", "CountryName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.RemainsSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.RemainsSelectByIdCommand";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.RemainsSelectNewCommand";
            this._commandCollection[2].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.RemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.RemainsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByReceiptDetailRef(MDataSet.RemainsDataTable dataTable, System.Nullable<int> id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.RemainsDataTable GetDataByReceiptDetailRef(System.Nullable<int> id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNew(MDataSet.RemainsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual MDataSet.RemainsDataTable GetDataNew() {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            MDataSet.RemainsDataTable dataTable = new MDataSet.RemainsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PricesPurchaseTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PricesPurchaseTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PricesPurchase";
            tableMapping.ColumnMappings.Add("OrganizationRef", "OrganizationRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("Date", "Date");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OrganizationRef, ProductRef, PricePurchase, Date FROM dbo.PricesPurchase";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.PricesPurchaseDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.PricesPurchaseDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.PricesPurchaseDataTable dataTable = new MDataSet.PricesPurchaseDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PeriodsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeriodsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Periods";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("ClosedDate", "ClosedDate");
            tableMapping.ColumnMappings.Add("isClosed", "isClosed");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PeriodsSelectCommand";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Variant, 0, System.Data.ParameterDirection.ReturnValue, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.PeriodsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.PeriodsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MDataSet.PeriodsDataTable dataTable = new MDataSet.PeriodsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkedInvoiceDetailTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkedInvoiceDetailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkedInvoiceDetail";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("InvoiceMasterRef", "InvoiceMasterRef");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("PricePurchase", "PricePurchase");
            tableMapping.ColumnMappings.Add("DiscountSum", "DiscountSum");
            tableMapping.ColumnMappings.Add("PurchaseNDS", "PurchaseNDS");
            tableMapping.ColumnMappings.Add("PriceRetail", "PriceRetail");
            tableMapping.ColumnMappings.Add("RetailNDS", "RetailNDS");
            tableMapping.ColumnMappings.Add("PriceRetailNDS", "PriceRetailNDS");
            tableMapping.ColumnMappings.Add("LocalReceiptDetailRef", "LocalReceiptDetailRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceDetailRef", "RemoteInvoiceDetailRef");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("RetailSum", "RetailSum");
            tableMapping.ColumnMappings.Add("Article", "Article");
            tableMapping.ColumnMappings.Add("HOST", "HOST");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            tableMapping.ColumnMappings.Add("TradePutletRef", "TradePutletRef");
            tableMapping.ColumnMappings.Add("ProductRef", "ProductRef");
            tableMapping.ColumnMappings.Add("ManufacturerRef", "ManufacturerRef");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "LinkedReturnInvoiceDetail";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePutletRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.LinkedInvoiceDetailDataTable dataTable, System.Nullable<int> TradePutletRef) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TradePutletRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TradePutletRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.LinkedInvoiceDetailDataTable GetData(System.Nullable<int> TradePutletRef) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TradePutletRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TradePutletRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.LinkedInvoiceDetailDataTable dataTable = new MDataSet.LinkedInvoiceDetailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkedInvoiceMasterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkedInvoiceMasterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkedInvoiceMaster";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Number", "Number");
            tableMapping.ColumnMappings.Add("NumCheck", "NumCheck");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("OrganisationRef", "OrganisationRef");
            tableMapping.ColumnMappings.Add("DocumentTypeRef", "DocumentTypeRef");
            tableMapping.ColumnMappings.Add("RemoteReceiptMasterRef", "RemoteReceiptMasterRef");
            tableMapping.ColumnMappings.Add("RemoteInvoiceMasterRef", "RemoteInvoiceMasterRef");
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly");
            tableMapping.ColumnMappings.Add("Sum", "Sum");
            tableMapping.ColumnMappings.Add("Nds", "Nds");
            tableMapping.ColumnMappings.Add("Extra", "Extra");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("PeriodsRef", "PeriodsRef");
            tableMapping.ColumnMappings.Add("DateLastModif", "DateLastModif");
            tableMapping.ColumnMappings.Add("AuthorCreate", "AuthorCreate");
            tableMapping.ColumnMappings.Add("AuthorLastModif", "AuthorLastModif");
            tableMapping.ColumnMappings.Add("DateCreate", "DateCreate");
            tableMapping.ColumnMappings.Add("RowVersion", "RowVersion");
            tableMapping.ColumnMappings.Add("RecalcSum", "RecalcSum");
            tableMapping.ColumnMappings.Add("HOST", "HOST");
            tableMapping.ColumnMappings.Add("rowguid", "rowguid");
            tableMapping.ColumnMappings.Add("TradePutletRef", "TradePutletRef");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.RetailTradeConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "LinkedReturnInvoiceMaster";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePutletRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.LinkedMoveReturnInvoice";
            this._commandCollection[1].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@TradePutletRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@InvoiceMasterRef", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MDataSet.LinkedInvoiceMasterDataTable dataTable, System.Nullable<int> TradePutletRef) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TradePutletRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TradePutletRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MDataSet.LinkedInvoiceMasterDataTable GetData(System.Nullable<int> TradePutletRef) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((TradePutletRef.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(TradePutletRef.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            MDataSet.LinkedInvoiceMasterDataTable dataTable = new MDataSet.LinkedInvoiceMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int LinkedMoveReturnInvoice(System.Nullable<int> TradePutletRef, System.Nullable<int> InvoiceMasterRef) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((TradePutletRef.HasValue == true)) {
                command.Parameters[1].Value = ((int)(TradePutletRef.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            if ((InvoiceMasterRef.HasValue == true)) {
                command.Parameters[2].Value = ((int)(InvoiceMasterRef.Value));
            }
            else {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591