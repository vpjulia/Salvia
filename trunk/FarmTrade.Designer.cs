//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RetailTrade {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("FarmTrade")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FarmTrade : System.Data.DataSet {
        
        private _1DataTable table1;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FarmTrade() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FarmTrade(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["1"] != null)) {
                    base.Tables.Add(new _1DataTable(ds.Tables["1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _1DataTable _1 {
            get {
                return this.table1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            FarmTrade cln = ((FarmTrade)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["1"] != null)) {
                    base.Tables.Add(new _1DataTable(ds.Tables["1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table1 = ((_1DataTable)(base.Tables["1"]));
            if ((initTable == true)) {
                if ((this.table1 != null)) {
                    this.table1.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FarmTrade";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FarmTrade.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.table1 = new _1DataTable();
            base.Tables.Add(this.table1);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            FarmTrade ds = new FarmTrade();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void _1RowChangeEventHandler(object sender, _1RowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpharmtrade;
            
            private System.Data.DataColumn columnfirm;
            
            private System.Data.DataColumn columnsumall;
            
            private System.Data.DataColumn columnndsall;
            
            private System.Data.DataColumn columnnumdoc;
            
            private System.Data.DataColumn columndatedoc;
            
            private System.Data.DataColumn columnsclcode;
            
            private System.Data.DataColumn columnsclname;
            
            private System.Data.DataColumn columnkolvo;
            
            private System.Data.DataColumn columncenands;
            
            private System.Data.DataColumn columnsummands;
            
            private System.Data.DataColumn columnedizm;
            
            private System.Data.DataColumn columnsclmkcd;
            
            private System.Data.DataColumn columnsclmknm;
            
            private System.Data.DataColumn columnserie;
            
            private System.Data.DataColumn columntgodn;
            
            private System.Data.DataColumn columnnumsertf;
            
            private System.Data.DataColumn columndatsertf;
            
            private System.Data.DataColumn columnnumreg;
            
            private System.Data.DataColumn columndatreg;
            
            private System.Data.DataColumn columnenddatreg;
            
            private System.Data.DataColumn columnadding;
            
            private System.Data.DataColumn columnnds;
            
            private System.Data.DataColumn columncena;
            
            private System.Data.DataColumn columnsumma;
            
            private System.Data.DataColumn columncenascl;
            
            private System.Data.DataColumn columntamzav;
            
            private System.Data.DataColumn columnmaxnacenka;
            
            private System.Data.DataColumn columnnacenka;
            
            private System.Data.DataColumn columnextcode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _1DataTable() {
                this.TableName = "1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pharmtradeColumn {
                get {
                    return this.columnpharmtrade;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn firmColumn {
                get {
                    return this.columnfirm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sumallColumn {
                get {
                    return this.columnsumall;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndsallColumn {
                get {
                    return this.columnndsall;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numdocColumn {
                get {
                    return this.columnnumdoc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn datedocColumn {
                get {
                    return this.columndatedoc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sclcodeColumn {
                get {
                    return this.columnsclcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sclnameColumn {
                get {
                    return this.columnsclname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn kolvoColumn {
                get {
                    return this.columnkolvo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cenandsColumn {
                get {
                    return this.columncenands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn summandsColumn {
                get {
                    return this.columnsummands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edizmColumn {
                get {
                    return this.columnedizm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sclmkcdColumn {
                get {
                    return this.columnsclmkcd;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sclmknmColumn {
                get {
                    return this.columnsclmknm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn serieColumn {
                get {
                    return this.columnserie;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tgodnColumn {
                get {
                    return this.columntgodn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numsertfColumn {
                get {
                    return this.columnnumsertf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn datsertfColumn {
                get {
                    return this.columndatsertf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numregColumn {
                get {
                    return this.columnnumreg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn datregColumn {
                get {
                    return this.columndatreg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enddatregColumn {
                get {
                    return this.columnenddatreg;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addingColumn {
                get {
                    return this.columnadding;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndsColumn {
                get {
                    return this.columnnds;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cenaColumn {
                get {
                    return this.columncena;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn summaColumn {
                get {
                    return this.columnsumma;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cenasclColumn {
                get {
                    return this.columncenascl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tamzavColumn {
                get {
                    return this.columntamzav;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxnacenkaColumn {
                get {
                    return this.columnmaxnacenka;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nacenkaColumn {
                get {
                    return this.columnnacenka;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn extcodeColumn {
                get {
                    return this.columnextcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _1Row this[int index] {
                get {
                    return ((_1Row)(this.Rows[index]));
                }
            }
            
            public event _1RowChangeEventHandler _1RowChanging;
            
            public event _1RowChangeEventHandler _1RowChanged;
            
            public event _1RowChangeEventHandler _1RowDeleting;
            
            public event _1RowChangeEventHandler _1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_1Row(_1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _1Row Add_1Row(
                        decimal pharmtrade, 
                        string firm, 
                        decimal sumall, 
                        decimal ndsall, 
                        string numdoc, 
                        System.DateTime datedoc, 
                        int sclcode, 
                        string sclname, 
                        decimal kolvo, 
                        decimal cenands, 
                        decimal summands, 
                        string edizm, 
                        string sclmkcd, 
                        string sclmknm, 
                        string serie, 
                        System.DateTime tgodn, 
                        string numsertf, 
                        System.DateTime datsertf, 
                        string numreg, 
                        System.DateTime datreg, 
                        System.DateTime enddatreg, 
                        string adding, 
                        decimal nds, 
                        decimal cena, 
                        decimal summa, 
                        decimal cenascl, 
                        decimal tamzav, 
                        decimal maxnacenka, 
                        decimal nacenka, 
                        string extcode) {
                _1Row row_1Row = ((_1Row)(this.NewRow()));
                row_1Row.ItemArray = new object[] {
                        pharmtrade,
                        firm,
                        sumall,
                        ndsall,
                        numdoc,
                        datedoc,
                        sclcode,
                        sclname,
                        kolvo,
                        cenands,
                        summands,
                        edizm,
                        sclmkcd,
                        sclmknm,
                        serie,
                        tgodn,
                        numsertf,
                        datsertf,
                        numreg,
                        datreg,
                        enddatreg,
                        adding,
                        nds,
                        cena,
                        summa,
                        cenascl,
                        tamzav,
                        maxnacenka,
                        nacenka,
                        extcode};
                this.Rows.Add(row_1Row);
                return row_1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _1DataTable cln = ((_1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpharmtrade = base.Columns["pharmtrade"];
                this.columnfirm = base.Columns["firm"];
                this.columnsumall = base.Columns["sumall"];
                this.columnndsall = base.Columns["ndsall"];
                this.columnnumdoc = base.Columns["numdoc"];
                this.columndatedoc = base.Columns["datedoc"];
                this.columnsclcode = base.Columns["sclcode"];
                this.columnsclname = base.Columns["sclname"];
                this.columnkolvo = base.Columns["kolvo"];
                this.columncenands = base.Columns["cenands"];
                this.columnsummands = base.Columns["summands"];
                this.columnedizm = base.Columns["edizm"];
                this.columnsclmkcd = base.Columns["sclmkcd"];
                this.columnsclmknm = base.Columns["sclmknm"];
                this.columnserie = base.Columns["serie"];
                this.columntgodn = base.Columns["tgodn"];
                this.columnnumsertf = base.Columns["numsertf"];
                this.columndatsertf = base.Columns["datsertf"];
                this.columnnumreg = base.Columns["numreg"];
                this.columndatreg = base.Columns["datreg"];
                this.columnenddatreg = base.Columns["enddatreg"];
                this.columnadding = base.Columns["adding"];
                this.columnnds = base.Columns["nds"];
                this.columncena = base.Columns["cena"];
                this.columnsumma = base.Columns["summa"];
                this.columncenascl = base.Columns["cenascl"];
                this.columntamzav = base.Columns["tamzav"];
                this.columnmaxnacenka = base.Columns["maxnacenka"];
                this.columnnacenka = base.Columns["nacenka"];
                this.columnextcode = base.Columns["extcode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpharmtrade = new System.Data.DataColumn("pharmtrade", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpharmtrade);
                this.columnfirm = new System.Data.DataColumn("firm", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirm);
                this.columnsumall = new System.Data.DataColumn("sumall", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumall);
                this.columnndsall = new System.Data.DataColumn("ndsall", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndsall);
                this.columnnumdoc = new System.Data.DataColumn("numdoc", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumdoc);
                this.columndatedoc = new System.Data.DataColumn("datedoc", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndatedoc);
                this.columnsclcode = new System.Data.DataColumn("sclcode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsclcode);
                this.columnsclname = new System.Data.DataColumn("sclname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsclname);
                this.columnkolvo = new System.Data.DataColumn("kolvo", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnkolvo);
                this.columncenands = new System.Data.DataColumn("cenands", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncenands);
                this.columnsummands = new System.Data.DataColumn("summands", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsummands);
                this.columnedizm = new System.Data.DataColumn("edizm", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnedizm);
                this.columnsclmkcd = new System.Data.DataColumn("sclmkcd", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsclmkcd);
                this.columnsclmknm = new System.Data.DataColumn("sclmknm", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsclmknm);
                this.columnserie = new System.Data.DataColumn("serie", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnserie);
                this.columntgodn = new System.Data.DataColumn("tgodn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntgodn);
                this.columnnumsertf = new System.Data.DataColumn("numsertf", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumsertf);
                this.columndatsertf = new System.Data.DataColumn("datsertf", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndatsertf);
                this.columnnumreg = new System.Data.DataColumn("numreg", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumreg);
                this.columndatreg = new System.Data.DataColumn("datreg", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndatreg);
                this.columnenddatreg = new System.Data.DataColumn("enddatreg", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenddatreg);
                this.columnadding = new System.Data.DataColumn("adding", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnadding);
                this.columnnds = new System.Data.DataColumn("nds", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnds);
                this.columncena = new System.Data.DataColumn("cena", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncena);
                this.columnsumma = new System.Data.DataColumn("summa", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumma);
                this.columncenascl = new System.Data.DataColumn("cenascl", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncenascl);
                this.columntamzav = new System.Data.DataColumn("tamzav", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntamzav);
                this.columnmaxnacenka = new System.Data.DataColumn("maxnacenka", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmaxnacenka);
                this.columnnacenka = new System.Data.DataColumn("nacenka", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnacenka);
                this.columnextcode = new System.Data.DataColumn("extcode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnextcode);
                this.columnfirm.MaxLength = 50;
                this.columnnumdoc.MaxLength = 20;
                this.columnsclname.MaxLength = 120;
                this.columnedizm.MaxLength = 20;
                this.columnsclmkcd.MaxLength = 40;
                this.columnsclmknm.MaxLength = 40;
                this.columnserie.MaxLength = 20;
                this.columnnumsertf.MaxLength = 20;
                this.columnnumreg.MaxLength = 30;
                this.columnadding.MaxLength = 60;
                this.columnextcode.MaxLength = 40;
                this.ExtendedProperties.Add("Generator_RowClassName", "_1Row");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_1RowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_1RowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_1DataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_1");
                this.ExtendedProperties.Add("Generator_UserTableName", "1");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _1Row New_1Row() {
                return ((_1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._1RowChanged != null)) {
                    this._1RowChanged(this, new _1RowChangeEvent(((_1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._1RowChanging != null)) {
                    this._1RowChanging(this, new _1RowChangeEvent(((_1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._1RowDeleted != null)) {
                    this._1RowDeleted(this, new _1RowChangeEvent(((_1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._1RowDeleting != null)) {
                    this._1RowDeleting(this, new _1RowChangeEvent(((_1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_1Row(_1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FarmTrade ds = new FarmTrade();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _1Row : System.Data.DataRow {
            
            private _1DataTable table1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table1 = ((_1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pharmtrade {
                get {
                    try {
                        return ((decimal)(this[this.table1.pharmtradeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pharmtrade\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.pharmtradeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string firm {
                get {
                    try {
                        return ((string)(this[this.table1.firmColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'firm\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.firmColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sumall {
                get {
                    try {
                        return ((decimal)(this[this.table1.sumallColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sumall\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.sumallColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ndsall {
                get {
                    try {
                        return ((decimal)(this[this.table1.ndsallColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndsall\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.ndsallColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numdoc {
                get {
                    try {
                        return ((string)(this[this.table1.numdocColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numdoc\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.numdocColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datedoc {
                get {
                    try {
                        return ((System.DateTime)(this[this.table1.datedocColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'datedoc\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.datedocColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sclcode {
                get {
                    try {
                        return ((int)(this[this.table1.sclcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sclcode\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.sclcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sclname {
                get {
                    try {
                        return ((string)(this[this.table1.sclnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sclname\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.sclnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal kolvo {
                get {
                    try {
                        return ((decimal)(this[this.table1.kolvoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'kolvo\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.kolvoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cenands {
                get {
                    try {
                        return ((decimal)(this[this.table1.cenandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cenands\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.cenandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal summands {
                get {
                    try {
                        return ((decimal)(this[this.table1.summandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'summands\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.summandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edizm {
                get {
                    try {
                        return ((string)(this[this.table1.edizmColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'edizm\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.edizmColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sclmkcd {
                get {
                    try {
                        return ((string)(this[this.table1.sclmkcdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sclmkcd\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.sclmkcdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sclmknm {
                get {
                    try {
                        return ((string)(this[this.table1.sclmknmColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sclmknm\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.sclmknmColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serie {
                get {
                    try {
                        return ((string)(this[this.table1.serieColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'serie\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.serieColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime tgodn {
                get {
                    try {
                        return ((System.DateTime)(this[this.table1.tgodnColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'tgodn\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.tgodnColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numsertf {
                get {
                    try {
                        return ((string)(this[this.table1.numsertfColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numsertf\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.numsertfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datsertf {
                get {
                    try {
                        return ((System.DateTime)(this[this.table1.datsertfColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'datsertf\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.datsertfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numreg {
                get {
                    try {
                        return ((string)(this[this.table1.numregColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numreg\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.numregColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datreg {
                get {
                    try {
                        return ((System.DateTime)(this[this.table1.datregColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'datreg\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.datregColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime enddatreg {
                get {
                    try {
                        return ((System.DateTime)(this[this.table1.enddatregColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enddatreg\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.enddatregColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string adding {
                get {
                    try {
                        return ((string)(this[this.table1.addingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'adding\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.addingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal nds {
                get {
                    try {
                        return ((decimal)(this[this.table1.ndsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nds\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.ndsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cena {
                get {
                    try {
                        return ((decimal)(this[this.table1.cenaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cena\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.cenaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal summa {
                get {
                    try {
                        return ((decimal)(this[this.table1.summaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'summa\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.summaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cenascl {
                get {
                    try {
                        return ((decimal)(this[this.table1.cenasclColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cenascl\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.cenasclColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tamzav {
                get {
                    try {
                        return ((decimal)(this[this.table1.tamzavColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'tamzav\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.tamzavColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal maxnacenka {
                get {
                    try {
                        return ((decimal)(this[this.table1.maxnacenkaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'maxnacenka\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.maxnacenkaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal nacenka {
                get {
                    try {
                        return ((decimal)(this[this.table1.nacenkaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nacenka\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.nacenkaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string extcode {
                get {
                    try {
                        return ((string)(this[this.table1.extcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'extcode\' in table \'1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table1.extcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspharmtradeNull() {
                return this.IsNull(this.table1.pharmtradeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpharmtradeNull() {
                this[this.table1.pharmtradeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfirmNull() {
                return this.IsNull(this.table1.firmColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfirmNull() {
                this[this.table1.firmColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumallNull() {
                return this.IsNull(this.table1.sumallColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumallNull() {
                this[this.table1.sumallColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsndsallNull() {
                return this.IsNull(this.table1.ndsallColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetndsallNull() {
                this[this.table1.ndsallColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumdocNull() {
                return this.IsNull(this.table1.numdocColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumdocNull() {
                this[this.table1.numdocColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatedocNull() {
                return this.IsNull(this.table1.datedocColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatedocNull() {
                this[this.table1.datedocColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssclcodeNull() {
                return this.IsNull(this.table1.sclcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsclcodeNull() {
                this[this.table1.sclcodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssclnameNull() {
                return this.IsNull(this.table1.sclnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsclnameNull() {
                this[this.table1.sclnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskolvoNull() {
                return this.IsNull(this.table1.kolvoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkolvoNull() {
                this[this.table1.kolvoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscenandsNull() {
                return this.IsNull(this.table1.cenandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcenandsNull() {
                this[this.table1.cenandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssummandsNull() {
                return this.IsNull(this.table1.summandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsummandsNull() {
                this[this.table1.summandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsedizmNull() {
                return this.IsNull(this.table1.edizmColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetedizmNull() {
                this[this.table1.edizmColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssclmkcdNull() {
                return this.IsNull(this.table1.sclmkcdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsclmkcdNull() {
                this[this.table1.sclmkcdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssclmknmNull() {
                return this.IsNull(this.table1.sclmknmColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsclmknmNull() {
                this[this.table1.sclmknmColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsserieNull() {
                return this.IsNull(this.table1.serieColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetserieNull() {
                this[this.table1.serieColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstgodnNull() {
                return this.IsNull(this.table1.tgodnColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettgodnNull() {
                this[this.table1.tgodnColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumsertfNull() {
                return this.IsNull(this.table1.numsertfColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumsertfNull() {
                this[this.table1.numsertfColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatsertfNull() {
                return this.IsNull(this.table1.datsertfColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatsertfNull() {
                this[this.table1.datsertfColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumregNull() {
                return this.IsNull(this.table1.numregColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumregNull() {
                this[this.table1.numregColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatregNull() {
                return this.IsNull(this.table1.datregColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatregNull() {
                this[this.table1.datregColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsenddatregNull() {
                return this.IsNull(this.table1.enddatregColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetenddatregNull() {
                this[this.table1.enddatregColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddingNull() {
                return this.IsNull(this.table1.addingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddingNull() {
                this[this.table1.addingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsndsNull() {
                return this.IsNull(this.table1.ndsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetndsNull() {
                this[this.table1.ndsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscenaNull() {
                return this.IsNull(this.table1.cenaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcenaNull() {
                this[this.table1.cenaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssummaNull() {
                return this.IsNull(this.table1.summaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsummaNull() {
                this[this.table1.summaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscenasclNull() {
                return this.IsNull(this.table1.cenasclColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcenasclNull() {
                this[this.table1.cenasclColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstamzavNull() {
                return this.IsNull(this.table1.tamzavColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettamzavNull() {
                this[this.table1.tamzavColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaxnacenkaNull() {
                return this.IsNull(this.table1.maxnacenkaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaxnacenkaNull() {
                this[this.table1.maxnacenkaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnacenkaNull() {
                return this.IsNull(this.table1.nacenkaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnacenkaNull() {
                this[this.table1.nacenkaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextcodeNull() {
                return this.IsNull(this.table1.extcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextcodeNull() {
                this[this.table1.extcodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _1RowChangeEvent : System.EventArgs {
            
            private _1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _1RowChangeEvent(_1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RetailTrade.FarmTradeTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class _1TableAdapter : System.ComponentModel.Component {
        
        private System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private System.Data.OleDb.OleDbConnection _connection;
        
        private System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "1";
            tableMapping.ColumnMappings.Add("pharmtrade", "pharmtrade");
            tableMapping.ColumnMappings.Add("firm", "firm");
            tableMapping.ColumnMappings.Add("sumall", "sumall");
            tableMapping.ColumnMappings.Add("ndsall", "ndsall");
            tableMapping.ColumnMappings.Add("numdoc", "numdoc");
            tableMapping.ColumnMappings.Add("datedoc", "datedoc");
            tableMapping.ColumnMappings.Add("sclcode", "sclcode");
            tableMapping.ColumnMappings.Add("sclname", "sclname");
            tableMapping.ColumnMappings.Add("kolvo", "kolvo");
            tableMapping.ColumnMappings.Add("cenands", "cenands");
            tableMapping.ColumnMappings.Add("summands", "summands");
            tableMapping.ColumnMappings.Add("edizm", "edizm");
            tableMapping.ColumnMappings.Add("sclmkcd", "sclmkcd");
            tableMapping.ColumnMappings.Add("sclmknm", "sclmknm");
            tableMapping.ColumnMappings.Add("serie", "serie");
            tableMapping.ColumnMappings.Add("tgodn", "tgodn");
            tableMapping.ColumnMappings.Add("numsertf", "numsertf");
            tableMapping.ColumnMappings.Add("datsertf", "datsertf");
            tableMapping.ColumnMappings.Add("numreg", "numreg");
            tableMapping.ColumnMappings.Add("datreg", "datreg");
            tableMapping.ColumnMappings.Add("enddatreg", "enddatreg");
            tableMapping.ColumnMappings.Add("adding", "adding");
            tableMapping.ColumnMappings.Add("nds", "nds");
            tableMapping.ColumnMappings.Add("cena", "cena");
            tableMapping.ColumnMappings.Add("summa", "summa");
            tableMapping.ColumnMappings.Add("cenascl", "cenascl");
            tableMapping.ColumnMappings.Add("tamzav", "tamzav");
            tableMapping.ColumnMappings.Add("maxnacenka", "maxnacenka");
            tableMapping.ColumnMappings.Add("nacenka", "nacenka");
            tableMapping.ColumnMappings.Add("extcode", "extcode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `1` (`pharmtrade`, `firm`, `sumall`, `ndsall`, `numdoc`, `datedoc`, `sclcode`, `sclname`, `kolvo`, `cenands`, `summands`, `edizm`, `sclmkcd`, `sclmknm`, `serie`, `tgodn`, `numsertf`, `datsertf`, `numreg`, `datreg`, `enddatreg`, `adding`, `nds`, `cena`, `summa`, `cenascl`, `tamzav`, `maxnacenka`, `nacenka`, `extcode`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("pharmtrade", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(9)), ((byte)(0)), "pharmtrade", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("firm", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "firm", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sumall", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "sumall", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("ndsall", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "ndsall", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("numdoc", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "numdoc", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("datedoc", System.Data.OleDb.OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "datedoc", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sclcode", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sclcode", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sclname", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sclname", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("kolvo", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(5)), "kolvo", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cenands", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(5)), "cenands", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("summands", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "summands", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("edizm", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "edizm", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sclmkcd", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sclmkcd", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("sclmknm", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "sclmknm", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("serie", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "serie", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("tgodn", System.Data.OleDb.OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tgodn", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("numsertf", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "numsertf", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("datsertf", System.Data.OleDb.OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "datsertf", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("numreg", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "numreg", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("datreg", System.Data.OleDb.OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "datreg", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("enddatreg", System.Data.OleDb.OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "enddatreg", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("adding", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "adding", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("nds", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "nds", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cena", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(4)), "cena", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("summa", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "summa", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("cenascl", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(4)), "cenascl", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("tamzav", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(4)), "tamzav", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("maxnacenka", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "maxnacenka", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("nacenka", System.Data.OleDb.OleDbType.Numeric, 0, System.Data.ParameterDirection.Input, ((byte)(11)), ((byte)(3)), "nacenka", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("extcode", System.Data.OleDb.OleDbType.Char, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "extcode", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::RetailTrade.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT `pharmtrade`, `firm`, `sumall`, `ndsall`, `numdoc`, `datedoc`, `sclcode`, `sclname`, `kolvo`, `cenands`, `summands`, `edizm`, `sclmkcd`, `sclmknm`, `serie`, `tgodn`, `numsertf`, `datsertf`, `numreg`, `datreg`, `enddatreg`, `adding`, `nds`, `cena`, `summa`, `cenascl`, `tamzav`, `maxnacenka`, `nacenka`, `extcode` FROM `1`";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FarmTrade._1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FarmTrade._1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FarmTrade._1DataTable dataTable = new FarmTrade._1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FarmTrade._1DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FarmTrade dataSet) {
            return this.Adapter.Update(dataSet, "1");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    decimal pharmtrade, 
                    string firm, 
                    decimal sumall, 
                    decimal ndsall, 
                    string numdoc, 
                    System.DateTime datedoc, 
                    string sclcode, 
                    string sclname, 
                    decimal kolvo, 
                    decimal cenands, 
                    decimal summands, 
                    string edizm, 
                    string sclmkcd, 
                    string sclmknm, 
                    string serie, 
                    System.DateTime tgodn, 
                    string numsertf, 
                    System.DateTime datsertf, 
                    string numreg, 
                    System.DateTime datreg, 
                    System.DateTime enddatreg, 
                    string adding, 
                    decimal nds, 
                    decimal cena, 
                    decimal summa, 
                    decimal cenascl, 
                    decimal tamzav, 
                    decimal maxnacenka, 
                    decimal nacenka, 
                    string extcode) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(pharmtrade));
            if ((firm == null)) {
                throw new System.ArgumentNullException("firm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(firm));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(sumall));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(ndsall));
            if ((numdoc == null)) {
                throw new System.ArgumentNullException("numdoc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(numdoc));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(datedoc));
            if ((sclcode == null)) {
                throw new System.ArgumentNullException("sclcode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(sclcode));
            }
            if ((sclname == null)) {
                throw new System.ArgumentNullException("sclname");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(sclname));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(kolvo));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(cenands));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(summands));
            if ((edizm == null)) {
                throw new System.ArgumentNullException("edizm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(edizm));
            }
            if ((sclmkcd == null)) {
                throw new System.ArgumentNullException("sclmkcd");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(sclmkcd));
            }
            if ((sclmknm == null)) {
                throw new System.ArgumentNullException("sclmknm");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(sclmknm));
            }
            if ((serie == null)) {
                throw new System.ArgumentNullException("serie");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(serie));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(tgodn));
            if ((numsertf == null)) {
                throw new System.ArgumentNullException("numsertf");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(numsertf));
            }
            this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(datsertf));
            if ((numreg == null)) {
                throw new System.ArgumentNullException("numreg");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(numreg));
            }
            this.Adapter.InsertCommand.Parameters[19].Value = ((System.DateTime)(datreg));
            this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(enddatreg));
            if ((adding == null)) {
                throw new System.ArgumentNullException("adding");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(adding));
            }
            this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(nds));
            this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(cena));
            this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(summa));
            this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(cenascl));
            this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(tamzav));
            this.Adapter.InsertCommand.Parameters[27].Value = ((decimal)(maxnacenka));
            this.Adapter.InsertCommand.Parameters[28].Value = ((decimal)(nacenka));
            if ((extcode == null)) {
                throw new System.ArgumentNullException("extcode");
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(extcode));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591